
 예외.
 279 ~ 315page.



 # 사라진 SQLException.

예외 블랙홀.
catch부분에 아무것도 적지 않거나 printStackTrace만 처리 하면 
콘솔 로그를 계속 모니터링 하지 않으면 에러를 확인하기 힘들다.

무의미하고 무책임한 throws.
매번 예외처리를 throws Exception으로 하는 경우 의미있는 Exception 정보를 알 수 없다.
메소드를 호출하여 사용할 때도 throws Exception을 할 수 밖에 없다.

예외 처리 핵심.
예외를 적절하게 복구시키던지 작업을 중단하고 운영자 또는 개발자에게 통보돼야 한다.
예외를 잡아서 뭔가 조치를 취할 방법이 없다면 잡지 말아야 한다.

예외 종류.
Error : 시스템에 비정상적인 상황이 발생한 경우, 코드로 대응 불가능.
check-Exception : 예외처리를 강제하는 예외. try-catch, throws를 무조건 해야된다.
unchecked-Exception : 예외처리를 강제하지 않는 예외. 주로 프로그램의 오류가 있을 때 발생.

예외 복구.
예외상황을 파악하고 문제를 해결해서 정상 상태로 돌려놓는 것.
예시 - A라는 파일을 실행했을때 오류가 발생하면 B라는 파일을 실행한다.

예외처리 회피.
예외처리를 자신이 담당하지 않고 자신을 호출한 쪽으로 던져버리는 것.
템플릿-콜백 패턴처럼 템플릿에서 명확하게 예외를 처리해야 하는 경우에 사용.
예시 - public void 메소드이름( ) throws Exception { 실행할 코드 ; } 

예외 전환 exception translation.
발생한 예외를 그대로 넘기는 게 아니라 적절한 예외로 전환해서 던진다.

예외 전환의 목적.
1. 예외상황에 대한 적절한 의미를 부여해준다.
2. 예외를 처리하기 쉽고 단순하게 만들기 위해 포장( wrap ) 하는 것이다. ( 체크 -> 언체크 )

처리못할 예외 관리.
1. 코드에서 런타임 예외로 포장해서 던지기.
2. 자세한 로그를 남기고, 관리자에게 메일 등으로 통보.
3. 사용자에게 안내 메시지를 보여주기.

런타임 예외.
대부분 복구할 수 있는 예외는 없다고 가정하고 예외 발생시 시스템 레벨에서 처리한다.
꼭 필요한 경우 런타임 예외라도 잡아서 복구하거나 대응해줄 수 있다.

애플리케이션 예외.
애플리케이션 로직에 의해 의도적으로 발생시키고, 반드시 catch 해서 조치를 취하는 예외.

스프링 예외처리.
스프링의 API 메소드에 정의되어 있는 대부분의 예외는 런타임 예외다.
발생 가능한 예외가 있다고 하더라도 이를 처리하도록 강제하지 않는다.



 # 예외 전환.

jdbc 한계 - 비표준 SQL.
대부분의 DB는 표준을 따르지 않는 비표준 문법과 기능도 같이 제공한다.
DAO는 특정 DB에 대해 종속적인 코드가 될 수밖에 없다.

jdbc 한계 - 호환성 없는 SQLException의 에러정보.
JDBC API는 모든 db Exception을 SQLException으로 처리한다.

DB 에러 코드 매핑을 통한 전환.
DB별 에러 코드를 참고해서 Exception을 분리한다. 
예시 - MySQL 1062, Oracle 1, DB2 -803.

DataAccessException 계층구조.
데이터 액세스 기술을 사용할 때 발생하는 예외들을 DataAccessException에 계층구조에 정리해놨다.

DataAccessException 주의사항.
DuplicateKeyException은 JDBC를 이용하는 경우에만 발생.
즉, 아직 완벽하게 구분되어지지 않은 Exception도 있을 수 있다.



 # 정리.

예외 정리.
예외를 잡아서 아무런 조취를 취하지 않거나 의미 없는 throws를 남발하는 것은 위험하다.
예외는 복구하거나 의도적으로 전달하거나 적절한 예외로 전환해야 한다.
예외 전환에는 좀 더 의미 있는 예외로 변경하거나, 런타임 예외로 포장하는 두 가지 방법이 있다.
복구할 수 없는 예외는 가능한 한 빨리 런타임 예외로 전화나느 것이 바람직하다.
애플리케이션의 로직을 담기 위한 예외는 체크 예외로 만든다.
DataAccessException을 통해 여러 DB에 대한 Exception 계층을 제공한다.
DAO를 독립시키려면 인터페이스 도입과 런타임 예외 전환, 추상화된 예외로 전환이 필요하다.



