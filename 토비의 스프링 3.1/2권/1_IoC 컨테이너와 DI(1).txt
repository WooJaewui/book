
 IoC 컨테이너와 DI(1)



 # IoC 컨테이너 : 빈 팩토리와 애플리케이션 컨텍스트.

다양한 컨테이너 명칭. ( 51 ~ 52 )
- IoC : 코드에서 오브젝트의 제어권을 가지고 있는 것이 아닌 외부에서 제어권을 갖는 경우.
- IoC 컨테이너 : 오브젝트의 제어권을 컨테이너가 가지고 있는 경우를 의미한다.
- 빈 팩토리 : 오브젝트 사이의 관계를 설정하는 DI관점으로 볼 때 컨테이너를 의미한다.
- 애플리케이션 컨텍스트 : 빈 팩토리에 여러가지 추가적인 기능을 추가한 것.

IoC 컨테이너 만들기. ( 52 )
applicationContext ac = new StaticApplicationContext( );
applicationContext 구현 객체를 만들기.

IoC 컨테이너 동작하기 위한 준비물. ( 52 )
1. POJO 클래스.
2. 설정 메타정보.

POJO 클래스. ( 53 ~ 55 )
POJO는 특정 기술과 스펙에서 독립적이고 의존관계에 있는 다른 POJO와 느슨한 결합을 만들어야 한다.

설정 메타 정보. ( 55 ~ 56 )
- POJO 클래스들 중에 애플리케이션에서 사용할 것을 선정하고 
  IoC 컨테이너가 제어할 수 있도록 적절한 메타정보를 만들어 제공해야 한다.
- 빈 bean : 스프링 컨테이너가 관리하는 오브젝트.
- 스프링의 설정 메타정보는 BeanDefinition 인터페이스로 표현되는 정보다. ( XML, 어노테이션 모두 읽음 )

BeanDefinition 인터페이스 빈 메타정보. ( 56 )
빈 아이디, 이름, 별칭 : 빈 오브젝트를 구분할 수 있는 식별자.
클래스 또는 클래스 이름 : 빈으로 만들 POJO 클래스 또는 서비스 클래스 정보.
스코프 : 싱글톤, 프로토타입과 같은 빈의 생성 방식과 존재 범위.
프로퍼티 값 또는 참조 : DI에 사용할 프로퍼티 이름과 값 또는 참조하는 빈의 이름.
생성자 파라미터 값 또는 참조 : DI에 사용할 생성자 파라미터 이름과 값 또는 참조할 빈의 이름.
지연됭 로딩 여부, 우선 빈 여부, 자동와이어링 여부, 부모 빈 정보, 빈팩토리 이름 등.

빈 등록. ( 57 )
빈 메타정보의 항목들은 대부분 디폴트 값이 있다.
싱글톤으로 관리되는 빈 오브젝트를 등록할 때 반드시 제공해야 하는 정보는 빈 이름과 POJO 클래스뿐이다.

코드로 빈 등록/확인하기. 
StaticAQpplicatioNContext ac = new StaticApplicactionContext( ) ;
ac.registerSingleton( "빈이름" , 클래스이름.class ) ;
클래스타입 변수 = ac.getBean( "빈이름" , 클래스이름.class ) ;

BeanDefinition을 이용한 빈 등록/확인하기.
BeanDefinition bd = new RootBeenDefinition( 클래스이름.class ) ;
bd.getPropertyValues( ).addPropertyValue( "name" , "name값" ) ;
ac.registerBeanDefinition( "빈이름" , bd ) ;
클래스타입 변수 = ac.getBean( "빈이름" , 클래스이름.class ) ;
BeanDefinition bd2 = ac.getBeanFactory( ).getBeanDefinition( "BeanDefinition Name" ) ;

ApplicationContext 인터페이스 구현 객체. ( 60 ~ 66 )
StaticApplicationContext : 코드를 통해 빈 메타정보를 등록하기 위해 사용하는 구현객체.
GenericApplicationContext : - XML 파일과 같은 외부의리소스에 메타정보를 읽는 구현객체. 
                                   - XmlBeanDefinitionReader를 이용해 XML 파일을 읽는다.
GenericXmlApplicationContext : XmlBeanDefinitionReader를 내장한 구현객체.
WebApplicationContext : - 웹 애플리케이션에서 만들어지는 컨테이너. 
		        - 웹 모듈에 대한 정보에 접근할 수 있다.

XmlBeanDefinitionReader 예시 코드.
GenericApplicationContext ac = new GenericApplicationContext( ) ;
XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader( ac ) ;
reader.loadBeanDefinitions( "파일경로" ) ;
ac.refresh( ) ;

JUnit 테스트.
@RunWith( SpringJUnit4ClassRunner.class )
@ContextConfiguration( locations = "테스트에서 사용할 설정 파일 경로" )
public class 테스트이름 { 
	@Autowired
	ApplicationContext ac ;
	테스트코드 ;
}

부모 컨텍스트를 이용한 계층구조 효과. ( 67 )
모든 애플리케이션 컨텍스트는 부모 애플리케이션 컨텍스트를 가질 수 있다.
계증구조 안의 모든 컨텍스트는 각자 독립적인 설정정보를 이용해 빈 오브젝트를 관리한다.
빈을 찾을 때는 자신이 관리하는 빈을 확인하고, 없으면 부모 계층의 빈을 확인한다. ( 자식에게는 X )

계층구조 컨텍스트를 만드는 이유. ( 68 )
1. 하위 컨텍스트에서 바꾸고 싶은 빈들을 다시 설정해두고 사용할 수 있다.
2. 애플리케이션 안에 성격이 다른 설정을 분리해서 컨텍스트를 구성하면서 공유하고 싶은게 있을 때 사용.

프론트 컨트롤러 패턴. ( 72 )
몇 개의 서블릿이 중앙집중식으로 모든 요청을 다 받아서 처리하는 방식.

웹 애플리케이션 컨텍스트 계층구조. ( 73 )
웹 애플리케이션 레벨에 등록되는 컨테이너는 루트 애플리케이션 컨텍스트라고 불린다. ( 최상위 )
프론트 컨트롤러 서블릿마다 하나의 컨테이너가 생성된다. 

ContextLoaderListener. ( 외부자료 )
RootApplicationContext를 생성하는 클래스이다.
설정파일과 함께 web.xml에서 작성하여 RootApplicationContext를 생성한다.

웹 애플리케이션의 컨텍스트 구성 방법. ( 76 ~ 77 )
- 서블릿 컨텍스트와 루트 애플리케이션 컨텍스트 계층구조.
	- 가장 많이 사용되는 기본적인 구성 방법.
	- 웹 관련 빈들은 서블릿 컨텍스트, 나머지는 루트 애플리케이션 컨텍스트에 등록.
- 루트 애플리케이션 컨텍스트 단일구조.
	- 스프링 웹 기술을 사용하지 않고 서드파티 웹이나 서비스 엔진만을 사용하는 경우.
- 서블릿 컨텍스트 단일구조.
	- 스프링 외의 프레임워크나 서비스 엔진에서 스프링 빈을 사용하지 않을 경우.

루트 애플리케이션 컨텍스트 등록. ( 77 ~ 78 )
web.xml
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/파일경로</param-value>
</context-param>
<listener>
	<listner-class>org.springframework.web.context.ContextLoaderListener</listner-class>
</listener>
XML 설정파일 위치 : /WEB-INF/applicationContext.xml ( 기본값 )
XmlWebApplicationContext : ContextLoaderListener로 생성되는 context 기본값.

서블릿 애플리케이션 컨텍스트 등록. ( 80 ~ 82 )
web.xml
<servlet>
	<servlet-name>spring</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/파일경로</param-value>
	</init-param>
	<load-on-startup>1</load-on-startup>
</servlet>
servlet-name : 애플리케이션 컨텍스트는 독립적인 네임스페이스를 갖게 된다. ( 기본값에 영향 )
load-on-start-up : 초기화 순서를 지정하는 정수 값. ( 작은 수가 우선적으로 만들어진다 )








