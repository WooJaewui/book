
 오브젝트와 의존관계.
 53 ~ 143page.



 # 초난감 DAO.

스프링 방향성.
스프링은 객체지향 프로그래밍을 기반으로 하여 오브젝트를 중요시한다.

DAO Data Access Object.
DB를 사용해 데이터를 조회하거나 조작하는 기능을 전담하는 오브젝트.

자바빈 JavaBean.
getter, setter 메소드를 가지고 있고, 기본생성자를 가진 오브젝트.

JDBC를 이용하는 순서.
1. DB 연결을 위한 Connection을 가져온다.
2. SQL을 담은 Statemenet를 만든다.
3. 만들어진 statement를 실행한다.
4. SQL 실행 결과를 Resultset으로 받아서 정보를 VO에 저장한다.
5. ResultSet, Statement, Connection을 닫아준다.
6. Exception을 처리해준다.

오브젝트 스스로 자신을 검증하도록 만들기 - test 코드.
main( ) 메소드에 오브젝트를 생성하고 테스트가 필요한 메소드를 검증한다.



 # DAO의 분리.

관심사의 분리 Separation of Concerns.
변화는 대체로 집중된 한 가지 관심에 대해 일어나지만 작업은 집중되지 않는 경우가 많다.
개발할 때 한 가지 관심이 한 군데에 집중되게 만들어야한다.

중복 코드의 메소드 추출.
getConnection( )이라는 DB 연결 코드를 독립적인 메소드로 만들어준다.

변경사항에 대한 검증 : 리팩토링 테스트.
insert 테스트 코드를 작성할 때 기존의 테스트 코드를 지워주는 기능도 필요하다.
리팩토링 : 기능의 변경없이 내부구조를 유지보수 편리하게 정리하는 것.

상속을 통한 확장.
gecConnection( )을 추상메소드로 만든 후 사용하는 환경에 따라 구현 메소드를 만든다.

디자인 패턴.
소프트웨어 설계 시 자주 만나는 문제를 해결하기 위해 만든 재사용 솔루션.
주로 객체지향 설계에 관한 것이다.

템플릿 메소드 패턴 template method pattern.
슈퍼클래스( 부모클래스 )에 로직의 흐름을 만들고 서브클래스( 자식클래스 )에서 구현하는 방식.
변하지 않는 로직은 부모클래스에 자주 변하는 로직은 자식클래스에서 구현한다.

팩토리 메소드 패턴 Factory method pattern.
서브클래스( 자식클래스 )에서 구체적인 오브젝트 생성 방법을 결정하는 방식.
오브젝트가 같아도 오브젝트를 생성하는 방식이 다르면 팩토리 메소드 패턴으로 이해할 수 있다.

상속의 단점.
자바는 다중상속을 허용하지 않는다.
상하위 클래스의 관계가 밀접하다.
DAO클래스를 추가하면 getConnection( )의 중복 코드가 늘어난다.



 # DAO의 확장.

클래스의 분리.
기존의 상속 방식이 아닌 클래스를 직접 생성해서 인스턴스로 사용한다.

직접 생성 방식의 문제점.
메소드의 이름을 통일시켜야된다.
클래스가 변경되면 코드를 수정해야된다.

인터페이스의 도입.
두 개 이상의 클래스를 연결시켜주는 인터페이스를 만들어서 추상화한다.

관계설정 책임의 분리.
생성자의 매개변수로 구현클래스를 입력받는다.

개방 폐쇄 원칙 OCP Open-Closed Principle.
클래스나 모듈은 확장에는 열려 있어야 하고 변경에는 닫혀 있어야 한다.
기능을 변경하거나 확장할 수 있으면서 그 기능을 사용하는 코드는 수정하지 않는다.
인터페이스는 Autowired해서 코드를 수정하지 않으면서 인터페이스 구현클래스는 확장가능.

객체 지향 설계 원칙 SOLID.
객체지향의 특징을 잘 살릴 수 있는 설계의 특징.
로버트 마틴이 정리한 객체 지향 설계 원칙 5가지.
SRP The Single Responsibility Principle : 단일 책임 원칙.
OCP The Open Closed Principle : 개방 페쇄 원칙.
LSP The Liskov Substitution Principle : 리스코프 치환 원칙.
ISP The Interface Segregation Principle : 인터페이스 분리 원칙.
DIP The Dependency Inversion Principle : 의존관계 역전 원칙.

높은 응집도 high coherence.
높은 응집도는 변화가 일어날 때 해당 모듈에서 변하는 부분이 크다는 것.
기능이 여기저기 흩어져 있지 않고 모여져 있는 것을 의미.

낮은 결합도 low coupling.
결합도는 하나의 오브젝트가 변경이 일어날 때에 관계가 있는 다른 오브젝트에 변화를 주는 정도.
인터페이스를 통해 결합도를 낮출 수 있다.

전략 패턴 Strategy Pattern.
개방 폐쇄 원칙에 가장 잘 들어 맞는 패턴.
구현클래스( 전략 )을 컨텍스트에 저장해 필요에 따라 인터페이스에 연결한다.



 # 제어의 역전 Ioc Inversion of Control.

팩토리.
객체 생성 방법을 결정하고 생성된 오브젝트를 리턴.

설계도로서의 팩토리.
컴포넌트 역할을 하는 오브젝트와 구조를 결정하는 오브젝트를 분리.

제어권 이전을 통한 제어관계 역전.
제어역전은 모든 제어 권한을 자신이 아닌 다른 대상에게 위임.
프레임워크는 제어의 역전 개념이 적용되어 애플리케이션 코드는 프레임워크 틀에서 동작.
IoC에서는 컨테이너 같이 컴포넌트의 생성과 관계설정, 생명 주기 관리 등을 관장하는 존재가 필요.



 # 스프링의 IoC.

스프링 관련 용어 정리.
bean : 스프링이 제어권을 가지고 있는 오브젝트를 의미. ( 컴포넌트 )
bean factory : 빈의 생성과 관계설정 제어를 담당하는 IoC 오브젝트.
application context : IoC 방식을 따라 만들어진 일종의 bean factory.
configuration metadata : application context가 IoC를 적용하기 위해 사용하는 메타정보.
IoC container : 애플리케이션 컨텍스트나 빈 팩토리를 다르게 부르는 말.
스프링 프레임워크 : 애플리케이션 컨텍스트를 포함해 스프링이 제공하는 모든 기능을 의미.

application context.
빈의 생성, 관계설정 등의 제어 작업을 총괄한다.
직접 정보를 담고 있진 않고 별도의 설정정보를 담고 있는 파일을 읽어 활용한다.
설정정보를 xml에 저장하는 방식과 어노테이션으로 설정하는 방식이 있다.
bean factroy에 스프링이 제공하는 애플리케이션 지원 기능을 모두 포함.

Factory를 사용하는 애플리케이션 컨텍스트.
@Configuration : 애플리케이션 컨텍스트가 사용할 설정정보라는 표시.
@Bean : 오브젝트 생성을 담당하는 IoC용 메소드.

@Configuration 클래스 사용.
ApplicationContext context = new AnnotationConfigApplicationContext( 클래스이름.class )
클래스 dao = context.getBean( "빈이름" , 클래스..class ) ;

애플리케이션 컨텍스트의 동작방식.
@Configuration 클래스를 설정정보로 등록.
@Bean이 붙은 메소드의 이름을 가져와 빈 목록을 만든다.
getBean( ) 메소드를 호출하면 자신의 빈 목록에서 확인하고 있으면 오브젝트를 생성해서 리턴.

애플리케이션 컨텍스트 특징.
클라이언트는 구체적인 팩토리 클래스를 알 필요가 없다.
애플리케이션 컨텍스트는 종합 IoC 서비스를 제공해준다.
애플리케이션 컨텍스트는 빈을 검색하는 다양한 방법을 제공한다.



 # 싱글톤 레지스트리와오브젝트 스코프.

오브젝트의 동일성과 동등성.
동일성은 == 연산자로 같은지 확인. ( 같은 오브젝트 )
동등성은 equals( ) 메소드를 이용해 비교. ( 같은 정보의 오브젝트 )

서버 애플리케이션과 싱글톤.
스프링은 웹 서버환경을 기반으로 만들어졌기 때문에 싱글톤을 기본으로한다.

싱글톤 패턴 singleton pattern.
하나의 객체만 존재하도록 강제하는 패턴이다.
매우 조심해서 사용해야 하거나 피해야 할 패턴이라고 말하기도 한다.

싱글톤 패턴의 한계.
private 생성자 - 상속불가.
테스트하기 어렵거나 불가능하다.
서버환경에서는 싱글톤이 하나만 만들어지는 것을 보장하지 못한다.
싱글톤의 사용은 전역 상태이기 때문에 바람직하지 못하다.

싱글톤 레지스트리 singleton registry.
스프링에서 제공하는 싱글톤 오브젝트 생성, 관리, 공급 기능.
평범한 자바 클래스도 IoC 컨테이너를 활용해서 싱글톤 방식으로 관리가능.

스프링 싱글톤.
멀티스레드 환경에서 서비스 형태의 오브젝트로 사용되는 경우 상태정보가 없어야된다.
메소드의 파라미터나, 메소드 안에서 생성되는 로컬 변수를 사용한다.
인터페이스는 클래스의 인스턴스 변수로 사용해도 된다. ( 읽기 전용 정보이기 때문 )

스프링 빈의 스코프.
빈은 컨테이너 내에 한 개의 오브젝트만 만들어져 컨테이너가 존재하는 동안 유지.
필요에 따라 prototype 스코프로 생성가능하다.
prototype 스코프는 빈을 요청할 때마다 새로운 오브젝트를 만들어준다.



 # 의존관계 주입 DI.

UML Unified Modeling Language.
OMG Object Management Group에서 표준으로 채택한 통합모델링언어.

의존관계.
A가 B에 의존한다는 것은, B가 변경되면 A도 영향이 있다는 것을 의미.

의존관계의 제한.
클래스가 아닌 인터페이스를 사용함으로써 의존관계를 제한하여 결합도를 낮출 수 있다.

의존 오브젝트 dependent object.
런타임 시에 의존관계를 맺는 대상을 의미한다.

의존관계 주입.
코드에는 런타임 시점의 의존관계가 들어나지 않는다 - 인터페이스 의존.
런타임 시점의 의존관계는 컨테이너나 팩토리에서 결정한다.
의존관계는 사용할 오브젝트에 대한 레퍼런스를 외부에서 주입해줌으로써 만들어진다.
DI를 원하는 오브젝트는 먼저 자기 자신이 컨테이너가 관리하는 빈이 돼야 한다.

의존관계 검색 dependency lookup.
IoC 컨테이너에 저장된 bean중에 인터페이스에 맞는 클래스를 찾아서 입력해준다.

setter 메소드를 이용한 주입.
파라미터로 내부 인스턴스 변수를 저장 - DI 방식을 활용하기 적합.
XML을 사용하는 경우 자바빈 규약을 따르는 setter메소드를 DI하는 것이 편리.
set변수이름이 관례적으로 setter메소드이름이다.

일반 메소드를 이용한 주입.
파라미터로 여러개의 인스턴스 변수를 저장할 때 사용.
파라미터 개수가 많아지고 비슷한 타입이 여러 개라면 실수하기 쉽다.

컴포넌트와 빈의 차이.
component : 자신이 만든 클래스에 사용. 
bean : 다른 사람이 만든 클래스에 사용. 



 # XML을 이용한 설정.

bean 설정.
<beans>를 루트 엘리먼트로 사용한다.
빈의 이름 : 변수이름처럼 getBean( )에서 사용할 이름을 의미한다.
빈의 클래스 : 빈 오브젝트를 어떤 클래스를 이용해서 만들지 정의.
빈의 의존 오브젝트 : 빈의 생성자, setter 메소드를 통해 의존 오브젝트를 넣어준다.

DI 설정.
<bean>안에 <property>를 사용.
name : setter메소드의 이름을 의미.
ref : 의존주입할 빈의 이름을 의미.
value : 실제 값을 의미.

bean 예시.
<beans:bean id="bean이름" class="패키지이름.클래스이름">
	<property name="setter이름" ref="DI할 빈이름" />
</beans:bean>

DTD와 스키마.
DTD : 하나의 시스템 내에서 사용할 XML 데이터의 구조를 정의하여 유효성을 점거할 때 사용.
스키마 : 서로 다른 시스템 사이의 데이터를 주고 받아 사용할 수 있게데이터 표준화.

DTD Document Type Definition.
네임 스페이스를 제공하지 않는다.
하나의 문서에만 적용할 수 있다.
지원하는 데이터 타입의 종류가 한정되어 있다.
상속 개념을 제공하지 않는다.
XML문법과 달라서 DOM을 지원하지 않는다.

config 읽어오기.
ApplicationCOntext context = new GenericXmlApplicationContext( "/conf파일경로" ) ;
맨 앞에 "/"는 생략가능.

DataSource 인터페이스.
DB 커넥션을 가져오는 인터페이스.
DataSource 구현 클래스 - BasicDataSource, SimpleDriverDataSource.
getConnection( )을 통해 연결한다.

SimpleDriverDataSource.
setDriverClass, setUrl, setUsername, setPassword를 입력 후 연결할 수 있다.

property value 값의 자동 변환.
value="값"으로 String으로 입력하면 자동형변환에 의해 매개변수에 맞게 입력.






