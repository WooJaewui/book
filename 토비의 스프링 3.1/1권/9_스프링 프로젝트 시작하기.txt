
 스프링 프로젝트 시작하기.
 753 ~ 828page.



 # 자바 엔터프라이즈 플랫폼과 스프링 애플리케이션.

자바 엔터프라이즈 애플리케이션.
클라이언트의 요청을 받아서 그에 대한 작업을 수행하고 그 결과를 돌려주는 것이 기본방식.

클라이언트와 백엔드 시스템.
가장 기본적인 형식은 클라이언트가 웹 브라우저이고 백엔드가 DB인 형태이다. ( DB 웹 애플리케이션 )

EJB Enterprise JavaBeans.
기업환경의 시스템을 구현하기 위한 서버측 컴포넌트 모델. ( 주로 업무 로직을 처리 )

애플리케이션 서버.
1. 다양한 형태의 모듈로 배포가 가능한 완전한 웹 애플리케이션 서버.
2. 웹 모듈의 배포만 가능한 경량급 WAS 또는 서블릿 / JSP 컨테이너.

경량급 WAS / 서블릿 컨테이너.
스프링은 기본적으로 톰캣이나 제티같은 가벼운 서블릿 컨테이너만 있어도 충분하다.

WAS.
고가의 WAS 사용시 안정적인 리소스 관리, 레거시 시스템 연동을 가능하게 한다.
관리 기능이나 모니터링 기능이 뛰어나다.
tvServer - 유료 WAS ( 나중에 따로 공부해보기 )

스프링 애플리케이션의 배포 단위.
독립 웹 모듈 : war로 패키징된 독립 웹 모듈로 배포. ( 톰캣은 무조건 war )
엔터프라이즈 애플리케이션 : ear로 패키징 후 배포. 
백그라운드 서비스 모듈 : rar로 패키징 후 배포.
서버에 종속되지 않으면 언제든지 바꿔서 배포 할 수 있다.



 # 개발도구와 환경.

IDE.
대표적인 IDE로는 이클립스, IntelliJ IDEA 등이 있다.

STS Springsource Tool Suite.
이클립스의 확장판이다.
이클립스 기반으로 주요한 스프링 지원 플러그인과 관련 도구를 모아 만들어진 IDE.

SpringIDE 플러그인.
스프링 개발에 유용한 기능을 제공하는 플러그인의 모음.
빈 클래스 이름 자동완성 기능.
빈 설정 오류검증 기능.
프로젝트 생성, 설정파일 생성, 빈 등록 위저드 기능.
빈 의존관계 그래프.
AOP 적용 대상 표시.

STS 플러그인.
SpringIDE와 스프링 애플리케이션의 서버 배치와 같은 추가 기능을 제공한다.
M2Eclipse : Maven을 지원하는 이클립스 플러그인.
AJDT AspectJ Development Tool : AspectJ AOP를 이용.
VMCI Virtual Machine Core Integration : VMWare 서버 또는 워크스테이션과의 연동을 지원.
이클립스 표준 플러그인 : WTP Wep Toll Platform, EMP Eclipse Modeling Project, Mylyn, ... 등.

라이브러리 관리의 어려움.
A B C 라이브러리가 한 번에 사용될 때 버전에 따라 호환에 문제가 발생할 수 있다.
A1.0 버전과 A2.0 버전을 동시에 사용하면 둘 중에 하나는 비정상적으로 동작한다.

재패키징 repackaging.
한쪽 버전의 클래스를 다른 패키지로 옮겨서 서로 구별되는 클래스로 만들어주는 방법.
jarjar 같은 재패키징 툴도 존재한다.

빌드툴.
Maven, Gradle, ANT는 자바의 대표적인 빌드 툴이다.

Mavan의 장점.
전이적 transitive의존 라이브러리 추적 기능 : 하나의 라이브러리를 지정하면 하위 라이브러리 함께 다운.

라이브러리 명명 규칙.
Maven 명명 규칙 : 아티팩트 아이디와 버전을 조합해서 파일 이름으로 사용.
OSGi 명명 규칙 : 패키지이름-버전.jar로 파일 이름을 사용.



 # 애플리케이션 아키텍처.

아키텍처.
내부 구성요소들이 어떤 책임을 갖고, 어떤 방식으로 서로 관계를 맺고 동작하는지를 규정하는 것.

계층형 아키텍처 layered architecture.
책임과 성격이 다른 것을 크게 그룹으로 만들어 분리해두는 것.
멀티 티어 아키텍처라고도 부른다.
웹 기반의 엔터프라이즈 애플리케이션은 3계층 애플리케이션이라고도 한다.

3계층 아키텍처.
데이터 액세스 계층, 서비스 계층, 프레젠테이션 계층으로 구분한다.
데이터 액세스 계층 DAO : 사용 기술에 따라 수직 계층으로 세분화해서 나눌 수 있다.
서비스 계층 : POJO로 작성하고 비즈니스 로직의 핵심을 담는다.
프레젠테이션 계층 : 매우 다양한 기술과 프레임워크의 조합을 가질 수 있다.

계층형 아키텍처 설계의 원칙.
각 계층은 응집도가 높으면서 다른 계층과는 낮은 결합도를 유지할 수 있어야 한다.
각 계층은 자신의 계층의 책임에만 충실해야 한다.

애플리케이션 정보를 다루는 2가지 방법.
1. 단순히 데이터로 다루는 경우.
2. 오브젝트로 다루는 경우.

데이터 중심 아키텍처.
DB에 무게를 두는 구조와 서비스 계층의 코드에 무게를 두는 구조로 구분된다.
계층 사이의 결합도가 높은 편이고 응집도는 떨어진다.

DB / SQL 중심의 로직 구현 방식.
주요 비즈니스 로직이 SQL과 DB에 존재한다.
개발하기 쉽다는 장점이 있다.
자바 코드를 DB와 웹 화면을 연결해주는 단순한 인터페이스 도구로 사용.
각 계층의 코드가 긴밀하게 연결되어 있기 때문에 변화에 매우 취약하다.
SQL이나 저장 프로시저에 담긴 로직은 테스트하기 힘들다.

거대한 서비스 계층 방식.
주요 비즈니스 로직을 서비스 계층에서 처리한다.
서비스 계층에서 DAO가 돌려주는 값을 분석 가공해서 비즈니스 로직을 만든다.
초기 개발 속도가 빠르고, 개발자 사이에 간섭 없이 독립적인 개발이 가능하다.
개발자마다 코딩 습관이 달라서 이해하기 힘든 스파게티 코드가 될 가능성이 있다.

오브젝트 중심 아키텍처.
오브젝트 구조를 만들어두고 그것을 각 계층 사이에서 정보를 전송하는 데 사용한다.
비즈니스 로직의 구현이 간단하고 명확하고, 테스트 코드를 쉽게 작성할 수 있다.
최적화된 SQL을 매번 만들어 사용하는 경우에 비해 성능 면에서 조금은 떨어질 수 있다.

지연된 로딩 lazy loading.
RDB 기술을 사용하면 지연된 로딩을 통해 도메인 오브젝트의 생성을 최적화할 수 있다.

빈약한 도메인 오브젝트 anetic domain object.
도메인 정보만 담겨 있고, 활용하는 기능이 없는 오브젝트.

빈약한 도메인 오브젝트 방식.
서비스 계층에서 빈약한 오브젝트를 사용해서 비즈니스 로직을 처리한다.

풍성한 도메인 오브젝트 rich domain object. ( smart domain object )
도메인 정보와 활용하는 기능을 가지고 있는 오브젝트.

풍성한 도메인 오브젝트 방식.
비즈니스 로직을 도메인 오브젝트에서 작성하고, 서비스 계층에서 재사용하게 만드는 것.
빈약한 도메인 오브젝트 방식보다 훨씬 간결하고 객체지향적이다.
비즈니스 로직이 복잡해질수록 장점이 드러난다.

도메인 계층 방식.
기본의 3계층 방식들 중에 하나처럼 도메인 계층을 생성해서 활용하는 방식.
도메인에 종속적인 비즈니스 로직의 처리는 도메인 계층의 오브젝트 안에서 진행된다.
도메인 오브젝트가 기존 데이터 액세스 계층이나 기반 계층의 기능을 직접 활용할 수 있다.

도메인 계층 주의사항.
bean이 아닌 도메인 오브젝트에 DI를 적용하기 위해서는 AspectJ AOP가 필요하다.
AOP를 활용해서 부가기능에 setter메소드를 통해 DI하는 기능을 추가.

도메인 계층화 2가지 방식.
모든 계층에서 도메인 오브젝트를 사용한다. ( AspectJ의 정책/표준 강제화 기능을 사용 )
도메인 오브젝트를 도메인 계층에서만 사용한다. ( DTO를 통해서 데이터 전달 )

리포트 쿼리 report query.
자료를 분석하고 그에 따른 분석 / 통계 결과를 생성하는 쿼리.

DTO Data Transfer Object.
리포트 쿼리의 결과를 단순한 자바빈이나 Map과 같은 형식으로 담아서 전달해주는 오브젝트.

SOFEA Service Oriented Front End Architecture.
프레젠테이션 계층 코드가 서버에서 클라이언트로 다운로드돼서 클라이언트 장치 안에서 동작하면서
서버에 존재하는 서비스 계층 또는 부분 프레젠테이션 계층과 통신하는 구조.

상태 관리와 빈 스코프.
데이터를 일정기간 저장하고 있는 session과 같은 객체와, 그렇지 않은 bean들을 잘 활용해야된다.

스프링이 지원하는 기술 조건.
해당 기술을 빈으로 등록해서 스프링의 DI 패턴을 따라 사용할 수 있다.
스프링의 빈으로 등록되서 서비스 추상화가 적용된다.
스프링이 지지하는 프로그래밍 모델을 적용할 수 있다.
템플릿 / 콜백이 지원된다.

서드파티 프레임워크.
기존 프레임워크가 아닌 제3의 프레임워크를 의미한다.




