
 스프링 핵심 기술의 응용(2)
 616 ~ 712page.



 # 인터페이스 상속을 통한 안전한 기능확장.

DI를 의식하면서 설계하기.
최소한 두 개 이상의 의존관계를 가지고 서로 협력해서 일하는 오브젝트가 필요.
적절한 책임에 따라 오브젝트를 분리.
의존 오브젝트는 자요롭게 확장될 수 있음을 염두.
DI를 적용할 때는 가능한 한 인터페이스를 사용해야된다.

인터페이스를 통해 DI하는 이유.
하나의 인터페이스를 통해 여러 개의 구현을 바꿔가면서 사용할 수 있다.
인터페이스 다중 상속을 통해 관심과 목적에 따라 구현 오브젝트가 여러 인터페이스를 구현할 수 있다.
기존 클라이언트에 영향을 주지 않은 채로 오브젝트의 기능을 확장하거나 수정할 수 있다.

인터페이스 분리 원칙 Interface Segregation Principle.
오브젝트가 충분히 작은 단위로 설계됐더라도, 목적과 관심에 따라 적절하게 분리해주는 방식.



 # DI를 이용해 다양한 구현 방법 적용하기.

ConcurrentHashMap.
동기화된 해시 데이터 조작에 최적화되도록 만들어진 클래스.
데이터 조작 시 전체 데이터에 대해 락을 걸지 않고 조회는 락을 아예 사용하지 않는다.
어느 정도 안전하면서 성능이 보장되는 동기화된 HashMap이다.
저장되는 데이터의 양이 많아지고 잦은 조회와 변경이 일어나면 한계가 있다.

내장형 DB embedded db.
애플리케이션에 내장돼서 애플리케이션과 함께 시작되고 종료되는 DB를 의미한다.
데이터가 메모리에 저장되기 때문에 IO로 인해 발생하는 부하가 적어 성능이 뛰어나다.
트랜잭션 처리가 편리하다.
자바에서 많이 사용되는 내장형 DB는 Derby, HSQL, H2가 있다.

스프링 내장형 DB.
내장형 DB를 손쉽게 이용할 수 있도록 내장형 DB를 위한 서비스 추상화 기능이있다.
내장형 DB를 초기화하는 작업을 지원하는 내장형 DB 빌더를 제공. ( EmbeddedDatabaseBuilder )
shutdown( ) 설정도 신경써야된다.

HSQL 내장형 DB 설정 예.
< jdbc:embedded-database id="embeddedDatabas" type="HSQL" >
	<jdbc:script location="파일이름.sql" />
</ jdbc:embedded-database >

트랜잭션 테스트.
트랜잭션이 적용되면 성공하고 아니면 실패하는 테스트를 만들자.



 # 스프링 3.1의 DI.

메타 정보 작성 프로그래밍 방식.
리플렉션 API 등을 이용해 자바코드 안에 메타정보를 작성하는 프로그래밍 방식. ( 어노테이션 )

어노테이션 활용 이유.
1. 애플리케이션 핵심 로직을 담은 자바 코드.
2. IoC 방식의 프레임워크.
3. 프레임워크가 참조하는 메타정보.

어노테이션의 단점.
어노테이션 수정시 매번 새로 컴파일 해줘야된다. ( 자바 코드이기 때문 )

정책과 관례를 이용한 프로그래밍. 
미리 정해진 규칙을 활용해서 간략하게 XML 또는 어노테이션을을 통해 메타정보를 작성.

스프링 3.1
어노테이션과 XML 설정정보를 동시에 사용할 수 있다.

어노테이션 정리.
@Configuration : 메타정보로 사용될 클래스를 표시하는 어노테이션. ( annotation-config 생략가능 )
@ImportResource( "파일경로/파일이름" ) : 파일을 읽어올 수 있다.
@Bean : 메소드에서 객체를 생성하고 setter메소드를 통해 <bean>, <property>역할을 한다.
@Autowired : 인터페이스 타입에 선언하면 <bean>에서 자동으로 구현객체를 DI해준다.
@Resource : Autowired와 비슷하지만 변수의 이름을 통해 <bean>에서 객체를 찾아 DI해준다.
@EnableTransactionManagement : 트랜잭션 관련 설정을 대신해준다. 
@Component : 클래스에 붙이면 자동으로 bean으로 등록해주는 어노테이션. ( @ComponentScan 필요 )
@ComponentScan( basePackages="패키지이름" ) : @Component를 확인해서 bean으로 만들어줌.
@Import : @Configuration으로 설정한 설정 파일을 두 개 이상 사용하는 경우 사용.

@Autowired 주의사항.
일반적인 setter 메소드가 아닌 내부적으로 다른 객체를 의존하는 경우 @Autowired 불가.
생성자에 @Autowired했어도 setter메소드는 왠만하면 만들어야함.

@Component.
@Component( "빈이름" )을 통해 빈이름을 지정할 수 있다.
빈이름을 따로 지정하지 않으면 클래스이름에서 첫글자를 소문자로 바꿔서 사용한다.
<property>할 수 있는 방법이 없어서 @Autowired해야함.

컨텍스트 분리.
text용 컨텍스트와 application 컨텍스트 클래스를 따로 분리해서 만든다. ( @Configuration )
SQL컨텍스트도 따로 만든다.

@Profile과 @ActiveProfiles.
@Profile( "이름" )을 통해 클래스 단위로 설정한다. 
@ActiveProfiles( "이름" )을 통해 사용할 클래스를 설정한다. 

DefaultListableBeanFactory 클래스.
getBeanDefinitionNames( )과 getBean( )을 통해 등록된 빈 내역을 조회할 수 있다.

JNDI Java Naming and Directory Interface.
디렉터리 서비스에서 제공하는 데이터 및 객체를 발견(discover)하고 참고(lookup) 하기 위한 자바 API다.
자바 애플리케이션을 외부 디렉터리 서비스에 연결할 때 사용. ( 예: 주소 데이터베이스 또는 LDAP 서버 )
자바 애플릿이 호스팅 웹 컨테이너가 제공하는 구성 정보를 참고할 때 사용.

@PropertySource( "파일이름" )
properties 파일의 내용을 사용할 수 있도록 import해준다.
Environment 타입의 환경 오브젝트에 저장된다.
.getProperty( "변수이름" )을 통해 값을 받을 수 있다.
dataSource url, username, password는 그대로 사용하고, driver는 Class.Name을 통해 사용.







