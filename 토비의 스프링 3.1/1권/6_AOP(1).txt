
 AOP(1)
 401 ~ 474page.



 # 트랜잭션 코드의 분리.

메소드 분리.
트랜잭션 경계설정의 코드와 비즈니스 로직 코드 간에는 서로 주고 받는 정보가 없다.
서로 완벽하게 독립적인 코드이기 때문에 메소드 분리가 쉽다.

AOP DI 원리.
A 인터페이스의 실제적인 로직을 구현하고 있는 AImpl 클래스와 트랜잭션을 구현한 ATx를 생성한다.
A 인터페이스에 ATx를 DI하고 ATx에 AImpl을 DI한다.

트랜잭션 경계설정 코드 분리의 장점.
메인 로직을 작성할 때 트랜잭션 같은 기술적인 내용에 대해 신경 쓰지 않아도 된다.
비즈니스 로직에 대한 테스트를 손쉽게 만들어낼 수 있다.



 # 고립된 단위 테스트.

작은 단위 테스트가 좋은 이유.
테스트가 실패했을 때 그 원인을 찾기 쉽다.
테스트의 의도나 내용이 분명해지고, 만들기 쉬워진다.

테스트 스텁, 목 오브젝트.
테스트를 의존 대상으로부터 분리해서 고립시키기 위해 테스트 스텁, 목 오브젝트를 사용한다.

단위 테스트.
단위 테스트의 단위는 정하기 나름이지만, 중요한 것은 하나의 단위에 초점을 맞춘 테스트이다.
책에서는 "의존 오브젝트나 외부의 리소스를 사용하지 않도록 고립시켜 테스트 하는 것" 이라 정의.

통합 테스트.
두 개 이상의 성격이나 계층이 다른 오브젝트가 연동하도록 만들어 태스트하거나,
외부의 DB나 파일 서비스 등의 리소스가 참여하는 테스트를 의미.

어떤 테스트를 사용할 것인가.
항상 단위 테스트를 먼저 고려한다.
외부 리소스를 사용해야만 가능한 테스트는 통합 테스트로 만든다.
DAO는 고립된 테스트를 작성하기 어려워서 단위 테스트로 만들기 어렵다.
단위 테스트를 만들기가 너무 복잡하다고 판단되는 코드는 통합 테스트를 고려해본다.
통합 테스트에 참여하는 코드 중 가능한 한 많은 부분을 미리 단위 테스트로 검증해두면 유리.

Mockito 프레임워크.
목 오브젝트를 편리하게 작성하도록 도와주는 프레임워크.

Mockito 목 오브젝트 사용법.
1. 인터페이스를 이용해 목 오브젝트를 만든다.
2. 목 오브젝트가 리턴할 값이 있으면 이를 지정해준다.
3. 테스트 대상 오브젝트에 DI 해서 목 오브젝트가 테스트 중에 사용되도록 만든다.
4. 테스트 대상 오브젝트를 사용한 후에 목 오브젝트를 통해 검증한다.

Mockito 사용예시.
UserDao mockUserDao = mock( UserDao.class ) ;
when( mockUserDao.getAll( ) ).thenReturn( this.users ) ;
verify( mockUserDao ).메소드( 매개변수 ) ;



 # 다이내믹 프록시와 팩토리 빈.

프록시 proxy.
클라이언트가 사용하려고 하는 실제 대상인 것처럼 위장해서 클라이언트의 요청을 대신 받아주는 것.
프록시를 통해 최종적으로 요청을 처리하는 실제 오브젝트를 target 또는 real subject라고 부른다.
클라이언트 -> 요청 -> 프록시 -> 요청 -> 타겟.

프록시의 특징.
타깃과 같은 인터페이스를 구현.
프록시가 타깃을 제어할 수 있는 위치에 있다.

프록시의 목적에 따른 분류.
1. 클라이언트가 타깃에 접근하는 방법을 제어.
2. 타깃에 부가적인 기능을 부여해주기 위해.

데코레이터 패턴.
타깃에 부가적인 기능을 런타임 시 다이내믹하게 부여해주기 위해 프록시를 사용하는 패턴.
프록시가 꼭 한 개로 제한되지 않는다.
프록시가 직접 타깃을 사용하도록 고정시킬 필요 없다.
프록시의 순서를 정해서 단계적으로 위임하는 구조를 만들면 된다.

데코레이터 대표적인 예시.
Input/OutputStream, BufferedInput/OutputStream.

데코레이터 패턴 특징.
인터페이스를 통해 위임하는 방식이기 때문에 어느 타깃으로 연결될지 코드에선 알 수 없다.
타깃의 코드를 손대지 않고, 클라이언트가 호출하는 방법도 변경하지 않은 채로 기능을 추가.

프록시 패턴.
프록시는 클라이언트와 사용 대상 사이에 대리 역할을 맡은 오브젝트.
프록시 패턴은 프록시를 사용하는 방법 중 타깃에 대한 접근 방법을 제어하려는 목적.

프록시 패턴 특징.
프록시 패턴의 프록시는 타깃의 기능을 확장하거나 추가하지 않는다.
타깃 오브젝트를 생성하기 어려우나 타깃 오브젝트에 대한 레퍼런스가필요한 경우 사용.
프록시를 통해 실체( real subject )를 사용하려고 할 경우 타깃 오브젝트를 생성해서 사용.
프록시는 코드에서 자신이 만들거나 타깃 클래스 정보를 알고 있는 경우가 많다.
프록시 패턴과 데코레이터 패턴을 합쳐서 사용할 수 있다.



 # 다이나믹 프록시.

프록시를 만들기 번거로운 이유.
타깃의 인터페이스를 구현하고 위임하는 코드를 작성하기 번거롭다.
타깃 인터페이스의 메소드가 추가되거나 변경될 때마다 함께 수정해줘야 한다.
부가기능 코드가 중복될 가능성이 많다.

다이나믹 프록시.
프록시 팩토리에 의해 런타임 시 다이나믹하게 만들어지는 오브젝트.
타깃의 인터페이스와 같은 타입으로 만들어진다.

리플렉션.
자바의 코드 자체를 추상화해서 접근하도록 만든 것.
구체적인 클래스 타입을 알지 못해도 그 클래스의 메소드, 타입, 변수들을 접근할 수 있다.

클래스 정보 관련 메소드.
클래스.class : 클래스에 대한 메타정보를 가진 오브젝트를 얻을 수 있다.
클래스.getClass( ) : 클래스에 대한 메타정보를 가진 오브젝트를 얻을 수 있다.
클래스.class.getMethod( "메소드이름" ) : 메소드에 대한 정보를 얻을 수 있다.

length( ) 메소드 실행 다른 방법.
Method lengthMethod = 클래스.class.getMethod( "length" ) ;
int lengh = ( int ) lengthMethod.invoke( 클래스 ) ;

다이나믹 프록시 동작방식.
프록시 팩토리에서 런타임 시 다이나믹 프록시 오브젝트를 생성.
클라이언트가 요청을 하면 다이나믹 프록시에서 InvocationHandler에 요청한다.
InvocationHandler 구현 클래스는 요청을 타깃에 메소드를 전달해서 결과를 리턴해준다.
부가기능은 InvocationHandler를 구현한 오브젝트에 담는다.

InvocationHandler.
invoke라는 메소드만 가지고 있는 인터페이스.
public Object invoke( Object proxy, Method method, Object[] args ) 로 되어있다
proxy는 클래스 로더로써 다이나믹 프록시가 정의되는 클래스 로더이다.
method는 프록시가 구현해야 할 인터페이스로 배열로 저장해서 여러개를 구현할 수 있다.

다이나믹 프록시의 장점.
타겟 메소드가 많을 경우 한번에 처리하기 쉽다.

다이나믹 프록시의 주의사항.
method에는 타겟의 모든 메소드가 들어가기 때문에 리턴타입 형변환에 신경써야된다.
추가기능을 적용할 메소드와 적용하지 않을 메소드를 구분해줘야된다.

팩토리 빈.
스프링을 대신해서 오브젝트의 생성로직을 담당하도록 만들어진 특별한 빈.
FactoryBean 인터페이스를 구현하면 팩토리 빈을 생성할 수 있다.

빈 생성 주의사항.
private 생성자를 가진 클래스를 빈으로 등록하는 일은 권장되지 않는다.
등록하더라도 빈 오브젝트가 바르게 동작하지 않을 가능성이 있다.

Context 빈 생성.
생성자가 private인 오브젝트는 getInstance( )와 같은 객체 생성 메소드를 통해 빈을 생성.
getBean( "&팩토리빈이름" )하면 빈 오브젝트가 아닌 팩토리 빈 자체를 리턴한다.

프록시 팩토리 빈 방식의 장점.
프록시 팩토리 빈은 데코레이터 패턴 + 프록시 패턴의 문제점 2가지를 해결해준다.

프록시 팩토리 빈의 한계.
한 번의 여러 개의 클래스에 공통적인 부가기능을 제공하는 방법이 없다.
하나의 타겟에 여러 개의 부가기능을 적용할 수 없다.
InvocationHandler 구현객체가 프록시 팩토리 빈 개수만큼 생성된다.



 # 스프링의 프록시 팩토리 빈.

ProxyFactoryBean.
스프링에서 제공하는 추상화한 팩토리 빈.
프록시를 생성해서 빈 오브젝트로 등록하게 해주는 팩토리 빈이다.
순수하게 프록시를 생성하는 작업만을 담당하고 프록시를 통해 제공해줄 부가기능은 별도의 빈에 있다.
타겟 오브젝트에 대한 정보를 가지고 있다.

MethodInterceptor.
InvocationHandler와 비슷하다.
타겟 오브젝트에 대한 정보를 담고 있지 않기 때문에 오브젝트에 독립적으로 만들어질 수 있다.
메소드 정보와 타겟 오브젝트 정보는 MethodInvocation 오브젝트을 통해 MethodInterceptor에 전달된다.

MethodInvocation.
일종의 콜백 오브젝트로, proceed( ) 메소드를 실행하면 타깃 오브젝트의 메소드를 내부적으로 실행.
템플릿/콜백 패턴 구조로 MethodInvocation 구현 클래스는 공유 가능한 템플릿처럼 동작.

어드바이스.
스프링에서 타겟 오브젝트에 적용하는 부가기능을 담은 오브젝트를 어드바이스( advice )라고 부른다.
MethodInterceptor 인터페이스는 advice 인터페이스를 상속하고 있는 서브인터페이스.
ProxyFactoryBean에 addAdvice( )를 통해 추가기능을 담은 객체를 추가할 수 있다.

포인트컷.
메소드 선정 알고리즘을 담은 오브젝트.
ProxyFactoryBean으로 생성된 다이나믹 프록시는 포인트컷을 통해 어떤 메소드에 어드바이스를 적용할지 확인.

Proxy 실행 순서.
ProxyFactoryBean을 통해 다이나믹 프록시가 생성.
다이나믹 프록시는 포인트컷을 통해 어떤 메소드에 어드바이스를 적용할지 확인.
어드바이스를 통해 추가기능을 적용하고 MethodInvocation proceed( )를 통해 타겟 오브젝트 로직을 수행.

템플릿/콜백 패턴 활용.
어드바이스가 템플릿이 되고 MethodInvocation 오브젝트가 콜백 역할을 한다.

전략패턴 활용.
프록시로부터 어드바이스와 포인트컷을 독립시켜 DI를 사용.
부가기능과 메소드 선정 알고리즘을 ProxyFactoryBean의 변경없이 자유롭게 확장가능.

어드바이저.
어드바이저 오브젝트를 통해 어드바이스와 포인트컷을 함께 적용한다.

ProxyFactoryBean setter메소드.
target과 interceptorNames을 설정해서 다이나믹 프록시를 생성한다.
interceptorNames에는 하나 이상의 어드바이저가 설정된다.

@DirtiesContext.
컨텍스트 설정을 코드로 변경하기 위해 사용하는 어노테이션.






