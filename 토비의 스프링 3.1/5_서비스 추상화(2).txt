
 서비스 추상화(2)
 375 ~ 399page.



 # 서비스 추상화와 단일 책임 원칙.

단일 책임 원칙 Single Responsibility Principle.
하나의 모듈은 한 가지 책임을 가져야 한다.
하나의 모듈이 바뀌는 이유는 한 가지여야 한다.

단일 책임 원칙의 장점.
변경이 필요할 때 수정 대상이 명확해진다. ( 유지, 보수가 편해진다 )
자연스럽게 인터페이스 DI를 사용해서 객체지향 설계로 대부분 이루어진다.



 # 메일 서비스 추상화.

JavaMail 클래스.
자바에서 메일을 발송할 때 사용하는 표준 API.

메일 서비스 테스트 코드.
메일 서버가 존재하지 않는 경우 에러 발생.
메일 운영 서버가 존재해도 테스트마다 부하를 주는 것은 바람직하지 못하다.
테스트용 메일 서버를 운영하는 것도 한 가지 방법이다.
완벽한 메일 서비스 테스크 코드는 불가능하다. - 결과 확인이 힘들다.

SMTP Simple Mail Transfer Protocol.
인터넷에서 메일 전송에 사용되는 표준.
SMTP는 보안과 호환성의 문제로 그대로 사용하지 않는 경우가 많다. ( SMTP_AUTH, ESMTP, MIME 사용 )

JavaMail을 이용한 테스트 문제점.
JavaMail의 핵심 API에는 DataSource처럼 인터페이스로 만들어져서 구현을 바꿀 수 있는 게 없다.

MailSender 인터페이스.
메일 메시지를 전송하는 메소드로만 구성된 인터페이스.

메일 서비스 사용시 추가할 라이브러리.
org.springframework.context.support-버전.RELEASE.jar
com.springsource.javax.mail-1.4.7.jar

테스트용 MailSender 만들기.
DummyMailSender를 만들어서 MailSender를 상속받고 send에 아무내용도 적지 않는다.
테스트 코드에서 send할 때마다 아무것도 수행하지는 않지만 MailSender까지 로직이 수행됐다는 것을 확인가능.
트랜잭션 처리를 따로 해줘야된다.

메일 서비스 트랜잭션 처리.
1. 발송 대상을 별도의 목록에 저장해 두었다가 모든 작업이 성공적으로 끝나면 전송.
2. MailSender 인터페이스를 구현한 트랜잭션 기능이 있는 클래스를 만들어서 사용.

협력 오브젝트 collaborator.
오브젝트 안에 DI를 통해 주입받는 오브젝트.
함께 협력해서 일을 처리하기 때문에 협력 오브젝트라고 불린다.

협력 오브젝트의 테스트상 문제점.
간단한 코드를 테스트할 때 너무 많은 작업이 뒤따를 수 있다.
이런 경우 DI되는 오브젝트를 간단한 오브젝트로 생성 후 변경해서 테스트. ( 테스트 스텁 )

테스트 대역 test double.
테스트를 실행할 수 있도록 사용하는 오브젝트.
테스트 스텁 test stub : 대표적인 테스트 대역으로, 의존객체로 존재하면서 코드가 정상 수행하도록 돕는 것.

목 오브젝트 mock object.
테스트 대상 오브젝트와 의존 오브젝트 사이에서 일어나는 일을 검증할 수 있도록 설계한 오브젝트.
테스트 오브젝트가 정상적으로 실행하도록 도와주면서 테스트시 발생하는 내용을 저장해뒀다가 결과를 검증할 때 사용.





