
 이름과 스코프.
 86 ~ 105page.



 # 왜 이름이 필요할까 ?

어떻게 이름을 붙일까 ?
숫자로 기억하고 있는 컴퓨터 메모리에 대응하는 이름에 대응표를 저장하면 컴퓨터가 이해할 수 있다.

이름 충돌.
같은 이름의 변수를 사용하면 충돌 현상이 발생한다.

충돌 피하기 - 긴 변수명을 사용한다.
충돌을 피하기 위해 변수명을 길게 만든다.

충돌 피하기 - 스코프를 이용한다.
전역변수가 아닌 스코프 범위안에서만 사용하는 지역변수를 만든다.



 # 스코프의 진화.

동적 스코프.
동작형태 : 함수 입구에 원래의 값을 기록해두고 출구에서 원래의 값으로 되돌리는 것.
문제점 : 함수 안에서 원래의 값을 사용할 수 없는 문제가 있다.

정적 스코프.
동적 스코프는 대응표를 코드 전체에서 읽을 수 있다. ( global )
정적 스코프는 함수별로 대응표를 나눈다. ( local )
함수를 빠져나갈 때 대응표를 제거한다.



 # 정적 스코프는 완성체인가 ?

내포 함수의 문제점.
Python 2.0 기준으로 함수 안에 변수를 선언하고 함수를 호출하여 변수를 사용하면 전역변수가 실행됐다.

외부 스코프에 재귀속되는 문제점.
해당 스코프에 이미 같은 이름의 변수가 있으면 해당 변수를 재귀속시키고, 없으면 새로운 지역변수를 작성.

Python에서의 해결 방법.
Python 3.0 기준 함수에서 선언한 변수가 지역변수가 아닌 경우 변수 앞에 nonlocal이라는 이름을 붙임.

Ruby에서의 해결 방법.
Ruby 1.9 기준 메소드를 내포한 경우에도 스코프는 내포하지 않는다.

정리.
동적 스코프 : 런타임 도중에 실행 콘텍스트나 호출 콘텍스트에 의해 결정.
정적 스코프 : 선언 시점에 스코프를 결정.
스코프 체인 : 내부 함수에서 변수를 찾기 위해 외부 함수로 접근할 때에 탐색을 하게 되는 관계.






