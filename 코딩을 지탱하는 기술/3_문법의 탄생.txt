
 문법의 탄생.
 16 ~ 28page.



 # 문법이란

연산자 우선순위.
언어에서 연산자의 우선순위는 사람이 편한 쪽으로 정하고 있다.
1 + 2 * 3 = 1 + ( 2 * 3 ) 일반적으로 사칙연산과 같이 연산된다.

문법은 언어 설계자가 정한 규칙.
언어 설계자가 정한 규칙이 문법이다.
문법은 언어에 따라 다르고, 연산자의 종류도 언어에 따라 다르다.



 # 스택 머신과 FORTH.

FORTH 계산 순서. ( 1 2 + ) 
스택에 1을 담는다 -> 스택에 2를 담는다 
-> +라는 워드를 만나면 스택에서 두 개를 꺼내서 더한 값을 스택에 담는다.

현재도 살아있는 스택 머신.
Java, Python, Ruby 등은 스택 머신형의 VM을 사용하고 있다.



 # 구문 트리와 LISP.

계산의 흐름. ( + 1 2 )
( + 1 2 ) = 1과 2를 더해라.
( * ( + 1 2 ) 3 ) = 1과 2를 더한 후 3을 곱한다.
트리형태의 계산 방식이다.

현재도 살아있는 구문 트리.
Python에 기본으로 장착되어 있는 ast 라이브러리를 사용하면 구문 트리를 확인할 수 있다.



 # 중위 표기법.

표기법 종류.
전위 표기법 : + 1 2와 같이 연산자를 앞에 표기하는 방법.
후위 표기법 : 1 2 +와 같이 연산자를 뒤에 표기하는 방법.
중위 표기법 : 1 + 2와 같이 연산자를 가운데 표기하는 방법.

구문해석기 Parser.
소스 코드를 문자열로 읽어 들여 해석하고, 구문 트리로 만드는 프로그램.

정리.
언어에 따라 표현 방법이 틀리다.
'어떤 문자열을 쓰면 어떤 구문 트리가 생기는가' 라는 규칙이 문법이다.
새로운 문법을 추가할 때 기존 문법과 마찰되지 않도록 생각해야된다.
이러한 문제 때문에 프로그래밍 언어에는 이해하기 어려운 작성법이 여전히 존재한다.



 # 칼럼.

이해력을 확인하기 위해서는 결과물을 확인한다.
이해한 것이 맞는지를 확인하기 위해서는 결과물( output )이 필요하다.
프로그래밍 언어의 결과물은 언어 처리계를 통해 수시로 확인할 수 있다.





