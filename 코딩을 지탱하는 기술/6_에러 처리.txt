
 에러 처리.
 60 ~ 84page.



 # 실패를 어떻게 전달할까 ?

에러처리를 구현.
1. 호출한 함수가 반환값으로 실패를 전달하면 호출처가 반환값을 체크해서 에러 처리를 하는 방법.
2. 함수 호출 전에 에러 처리 코드를 등록해두고, 실패 시 에러 처리 코드로 점프하는 방법이다.

반환값으로 실패를 전달한다.
예시 - 함수에서 성공했을 때 0을 반환, 실패했을 때 그 이외의 값을 반환한다.
문제점 - 실패를 놓친다, 에러 처리 때문에 코드를 해석하기 어렵다. ( C언어 방식 )

실패를 놓친다.
프로그래머가 반환값을 잊어버렸을 때 실패를 놓치게 된다.
이렇게 실패를 놓치는 경우 어디서 문제가 발생했는지 잘 파악하기 어렵다.

에러 처리 때문에 코드를 해석하기 어렵다.
모든 소스 코드에 에러 처리를 추가해야 되기 때문에 코드의 가독성이 떨어진다.

점프로 에러 처리를 정리한다.
어떠한 에러가 발생했을 때 점프( goto )를 통해 정리한다.

실패하면 점프한다.
에러가 발생했을 때 점프할 장소를 사전에 등록해두는 방법이 있다. ( 예외처리 )

UNIVAC I.
1950년에 만들어진 컴퓨터로 계산 시 오버플로우가 발생하면 사전에 등록한 코드를 실행한다.
이러한 기능을 interrupt라고 불렀다.

COBOL.
1954년 등장한 FORTRAN에는 예외 처리가 없었다.
1959년에 등장한 프로그래밍 언어 COBOL에는 2가지 에러 처리가 있었다.
AT END : READ로 파일을 읽을 때 더 이상 데이터가 없는 경우 실패를 표기.
ON SIZE ERROR : 수치 계산을 할 경우 오버플로우 등의 실패를 표기.

PL/I
1964년 프로그래밍 언어 PL/I 등장.
COBOL의 2가지 이외에 새로운 실패 종류가 추가되었다.



 # 실패할 것 같은 처리를 묶는 구문.

John Good enough의 주장.
1975년 John Goodenough는 논문에서 좋은 예외 처리 방법을 제안.
1. 명령이 어떤 예외를 던질 가능성이 있는지를 명시적으로 선언하는 것.
2. 실패할 것 같은 처리를 묶는 구문.

CLU에 도입.
begin 
	실패할 것 같은 코드 처리.
end except when 실패 종류 : 
	실패했을 때 처리.
end 

C++에 도입.
try { 
	실패할 것 같은 코드.
} catch { 
	에러 처리 코드 
}

Windows NT 3.1에 도입.
try {
	실패할 것 같은 코드
} finally {
	실패해도 성공해도 실행하고 싶은 코드
} except ( 에러 종류 ) { 
	에러 처리 코드 
}



 # 출구는 하나다.

짝이 되는 처리를 반드시 실행한다.
중간에 에러가 발생하면 Lock - Unlock, 파일을 열고 닫는 처리 등의 문제가 발생.

finally를 사용해서 해결.
중간에 에러가 발생해도 finally 코드를 통해 문제를 해결할 수 있따.

finally가 없는 C++에서의 해결.
클래스에 생성자, 소멸자를 설정하여 함수를 벗어날 때 자동적으로 실행되도록 설정.

D 언어의 scope( exit )를 사용한 해결.
스코프 가드를 도입하여 스코프( 함수 )를 벗어날 때 할 처리를 미리 등록할 수 있다.



 # 어떤 경우에 예외를 던질까 ?

틀리면 바로 예외를 던진다.
코드의 품질을 높이기 위해서는 버그가 존재하는 것을 빨리 알아채고 수정하는 것이 좋다 ( fail first )



 # 예외의 전파.

예외처리 과정.
a에서 b호출 -> b에서 c호출 -> c에서 예외발생 -> c에서 예외처리 확인 -> 없으면 b에서 확인 -> ...

예외 전파의 문제점.
여러 함수를 호출하고 있으면 어디서 예외가 발생했는지 확인하기 어렵다.

Java의 검사 예외.
Java는 검사 예외 throws를 통해 이 함수에서 예외를 던질수 있다는 것을 표기한다.

검사 예외가 잘 사용되지 않는 이유.
여러가지로 번거로운 일들이 많아지기 때문이다.
throws를 추가하면 호출하는 모든 메소드에 예외처리를 수정해야된다.

정리.
실패를 전달하는 방법은 크게 '반환값으로 알린다', '실패하면 점프한다'로 나뉜다.
반환값으로 알린다는 반환값을 잊을 경우 큰 문제가 발생한다.
실패하면 점프한다 -> 예외처리의 구조가 개발되었다.






