
 보안 HTTP.
 355 ~ 390page.



 # HTTP를 안전하게 만들기.

HTTP 보안 기술.
클라이언트, 서버인증 : 클라이언트와 서버는 서로 커넥션하고 있음을 알 수 있어야 한다.
무결성 : 클라이언트와 서버는 그들의 데이터가 위조되는 것으로부터 안전해야 한다.
암호화 : 클라이언트와 서버는 도청에 대한 걱정 없이 서로 대화할 수 있어야 한다.
효율 : 저렴한 클라이언트나 서버도 이용할 수 있도록 알고리즘은 충분히 빨라야 한다.
편재성 Ubiquity : 프로토콜은 거의 모든 클라이언트와 서버에서 지원되어야 한다.
관리상 확장성 : 누구든 어디서든 즉각적인 보안 통신을 할 수 있어야 한다.
적응성 : 현재 알려진 최선의 보안 방법을 지원해야 한다.
사회적 생존성 : 사회의 문화적, 정치적 요구를 만족시켜야 한다.

HTTPS.
HTTPS를 사용하면 모든 HTTP 요청과 응답 데이터는 네트워크로 보내지기 전에 암호화된다.
HTTP 애플리케이션 계층와 전송계층 사이에 SSL, TLS와 같은 보안 계층을 이용해서 구현한다.



 # 디지털 암호학.

암호 cipher.
암호란 메시지를 인코딩하는 어떤 특정한 방법과 메시지를 디코딩하는 방법이다.

암호문.
암호가 적용되어 코딩된 메시지.

암호 기계.
초기의 암호는 사람들이 직접 인코딩, 디코딩해야 했기 때문에 간단하게 규칙으로 작성되었다.
기술이 진보하면서, 복잡한 암호로 메시지를 빠르고 정확하게 하기 위해 암호 기계를 만들었다.

키가 있는 암호.
키( 암호 매개변수 )에 따라 인코딩, 디코딩이 다르게 동작하는 알고리즘.

디지털 암호.
기계 장치의 한계에서 벗어남으로써 복잡한 알고리즘이 가능해졌다.
C = E( P, e ) - C( 암호문 ) , E( 인코더 ) , P( 평문 ), e( 키 ).



 # 대칭키 암호법.

대칭키 암호법.
인코딩할 때 사용하는 키와 디코딩할 때 사용하는 키가 같은 암호법.

키 길이와 열거 공격 Enumeration Attack.
대부분의 경우, 인코딩 및 디코딩 알고리즘은 공개되어 있으므로 키만이 유일한 비밀이다.
무차별로 모든 키 값을 대입해보는 공격을 열거 공격이라고 한다.

대칭키 암호법 단점.
발송자와 수신자가 서로 대화하려면 공유키를 가져야 한다는 것이다.
비밀스럽게 키를 공유하는 것이 매우 중요하다.



 # 공개키 암호법.

공개키 암호법.
인코딩할 때 사용하는 키와 디코딩할 때 사용하는 키가 다른 암호법.
인코딩 키는 공개되어 있다. public key
디코딩 키는 공개되어 있지 않다. private key.

RSA.
MIT에서 발명한 공개키 암호 체계 중 하나이다.
공개키, 평문, 암호문을 획득해도 개인 키를 찾아낼 수 없는 방법이다.

혼성 암호 체계와 세션 키.
공개키 암호 방식의 알고리즘은 계산이 느린 경향이 있다.
노드들 사이의 안전한 의사소통 채널을 수립할 떄는 공개 키 암호를 사용한다.



 # 디지털 서명.

서명은 암호 체크섬이다.
서명은 메시지를 작성한 저자가 누군지 알려준다. ( 개인 서명처럼 사용 )
디지털 서명은 보통 비대칭 공개키에 의해 생성된다.

디지털 서명 작성 예시.
노드 A는 가변 길이 메시지를 정제하여 요약( digest )로 만든다.
노드 A는 요약에 서명함수를 사용해서 개인키로 서명하여 노드 B에 전송한다.
노드 B는 메시지가 노드 A가 작성한 것인지 확인하려면 공개키로 서명을 확인해본다.



 # 디지털 인증서.

인증서의 내부 정보.
대상의 이름. ( 사람, 서버, 조직 등 )
대상의 공개키.
유효 기간.
인증서 발급자. ( 누가 이 인증서를 보증하는가 )
인증서 발급자의 디지털 서명.
...

X.509 v3 인증서.
디지털 인증서에 대한 전 세계적인 단일 표준이 존재하지 않는다.
가장 많이 사용되는 인증서 서식은 X.509이다.

서버 인증을 위해 인증서 사용하기.
HTTPS를 통한 웹 트랜잭션을 시작하면 서버에서 디지털 인증서를 가져온다.
서버가 인증서를 갖고 있지 않다면, 보안 커넥션은 실패한다.



 # HTTPS 세부사항.

HTTPS 스킴.
보안 프로토콜 HTTPS는 선택적임으로 URL 스킴을 통해 HTTPS를 사용한다고 명시한다.

보안 전송 셋업.
클라이언트는 443 포트로 웹 서버에 연결한다.
클라이언트와 서버는 암호법 매개변수와 교환 키를 협상하여 SSL 계층을 초기화한다.
요청 메시지 응답메시지들은 인코딩, 디코딩을 통해 암호화해서 보내진다.

SSL 핸드쉐이크.
프로토콜 버전 번호 교환.
양쪽이 알고 있는 암호 선택.
양쪽의 신원을 인증.
채널을 암호화하기 위한 임시 세션 키 생성.

사이트 인증서 검사.
웹 브라우저들 대부분은 인증서에 대해 간단하게 기본적인 검사를 한다.
날짜 검사 : 인증서의 시작 및 종료일 검사.
서명자 신뢰도 검사 : CA Certificate AUthority 기관의 신뢰도 검사.
서명 검사 : 인증서의 무결성을 검사.
사이트 신원 검사 : 도메인 이름을 검사.

OpenSSL.
SSL과 TLS의 가장 인기 있는 오픈 소스 구현이다.






