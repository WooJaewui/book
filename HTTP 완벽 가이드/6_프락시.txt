
 프락시.
 147 ~ 184page.



 # 웹 중개자.

웹 프락시 서버.
웹 클라이언트 입장에서 웹 프락시 서버는 트랜잭션을 수행하는 중개인이다.
웹 프락시 서버는 웹 서버이기도 하고 웹 클라이언트이기도 하다.
클라이언트와 서버 규칙 모두를 주의 깊게 따라야 한다.

공유 프락시.
대부분의 프락시는 공용이며 공유된 프락시다.
여러 사용자들의 공통된 요청에서 이득을 취할 수 있다.

개인 프락시.
클라이언트 컴퓨터에서 직접 실행되는 형태로 많이 사용된다.

프락시와 게이트웨이 차이.
프락시는 같은 프로토콜을 사용하는 둘 이상의 애플리케이션을 연결.
게이트웨이는 서로 다른 프로토콜을 사용하는 둘 이상을 연결. ( 프로토콜 변환기처럼 사용 )



 # 왜 프락시를 사용하는가?

어린이 필터.
어린이들에게 교육 사이트를 제공하고 성인 컨텐츠를 차단하는 필터 역할을 할 수 있다.

문서 접근 제어자.
접근 제어 전략을 구현하고 감사 추적 하기 위해 사용될 수 있다.

보안 방화벽.
네트워크 보안을 강화하기 위해 사용될 수 있다.

웹 캐시.
인기 있는 문서의 로컬 사본을 관리하고 해당 무선에 대한 요청이 오면 빠르게 제공한다.

대리 프락시 Surrogate.
웹 서버인 것처럼 위장하는 프락시.
공용 컨텐츠에 대한 느린 웹 서버의 성능을 개선하기 위해 사용될 수 있다.
컨텐츠 라우팅 기능과 결합되어 주문형 복제 컨텐츠의 분산 네트워크를 만들기 위해 사용될 수 있다.

컨텐츠 라우터.
프락시 서버는 조건에 따라 요청을 특정 웹 서버로 유도하는 컨텐츠 라우터로 동작할 수 있다. 
사용자들에게 제공할 여러 서비스를 구현하는데 사용할 수 있다.

트랜스코더.
프락시 서버는 컨텐츠를 클라이언트에게 전달하기 전에 본문 포맷을 수정할 수 있다.
데이터의 표현 방식을 자연스럽게 변환하는 것을 트랜스코딩이라고 부른다.

익명화 프락시 Anonymizer.
HTTP 메시지에서 신원을 식별할 수 있는 특성들을 제거하여 개인 정보 보호와 익명성을 보장.
사용자 컴퓨터, OS 종류 제거, 이메일 주소 제거 등.



 # 프락시는 어디에 있는가 ?

출구 Egress 프락시.
로컬 네트워크 출구에 사용하는 방식이다.
회사 밖의 악의적인 해커들을 막기 위해, 인터넷 트랙픽의 성능을 개선하기 위해 사용할 수 있다.

접근( 입구 ) 프락시.
ISP 접근 지점에 위치하는 방식.
사용자들의 다운로드 속도를 개선하고 인터넷 대역폭 비용을 줄이기 위해 캐시 프락시로 많이 사용한다.

대리 프락시.
웹 서버 바로 앞에 위치하여 웹 서버로 향하는 모든 요청을 처리한다.

네트워크 교환 프락시.
캐시를 이용해 트래픽 처리 능력을 갖춘 프락시가 네트워크 교환 지점에 놓일 수 있다.

프락시 계층.
클라이언트와 서버사이에 있는 프락시 사이에 계층을 의미한다.
인바운드 프락시 : 서버에 가까운 프락시. ( 부모 )
아웃바운드 프락시 : 클라이언트에 가까운 프락시. ( 자식 )
클라이언트에 가까울수록 자식 프락시이다.

동적 부모 선택 - 부하 균형.
자식 프락시는 부하를 분산하기 위해 현재 부모들의 작업량 수준에 근거하여 부모 프락시를 고른다.

동적 부모 선택 - 지리적 인접성에 근거한 라우팅.
자식 프락시는 원 서버의 지역을 담당하는 부모를 선택할 수도 있다.

동적 부모 선택 - 프로토콜/타입 라우팅.
어떤 자식 프락시는 URI에 근거하여 다른 부모나 원 서버로 라우팅 할 수 잇다.

동적 부모 선택 - 유료 서비스 가입자를 위한 라우팅.
웹 서비스에 따라 추가금을 지불하면 대형 캐시에 라우팅될 수 있다.



 # 어떻게 프락시가 트래픽을 처리하는가 ?

클라이언트 수정.
웹 브라우저에서 프락시를 사용하도록 설정되어 있다면 요청을 프락시 서버로 보낸다.
웹 브라우저에 수동 혹은 자동 프락시 설정을 지원한다.

네트워크를 수정한다.
HTTP 트래픽을 지켜보고 가로채어 클라이언트 모르게 트래픽을 프락시로 보내는 스위칭, 라우팅 방법.
인터셉트 프락시라고 부른다.

DNS 이름공간을 수정한다.
대리 프락시를 통해 DNS와 IP 주소를 자신이 직접 사용한다.

웹 서버를 수정한다.
웹 서버에서 리다이렉션을 통해 클라이언트에게 프락시 서버를 거쳐서 웹 서버로 오게 설정할 수 있다.



 # 클라이언트 프락시 설정.

수동설정.
프락시를 사용하겠다고 명시적으로 설정한다.

프락시 자동 설정 PAC Proxy Auto-Configuration.
자바스크립트 PAC 파일에 대한 URI를 제공할 수 있다.

WPAD 프락시 발견.
대부분의 웹 브라우저는 웹 브락시 자동발견 프로토콜 Web Proxy AutoDiscovery protocol을 제공한다.

WPAD 실행 순서.
PAC URI를 찾기 위해  WPAD를 사용한다.
주어진 URI에서 PAC 파일을 가져온다.
프락시 서버를 알아내기 위해 PAC 파일을 실행한다.
알아낸 프락시 서버를 이용해서 요청을 처리한다.



 # 프락시 요청의 미묘한 특징들.

프락시 URI는 서버 URI와 다르다.
클라이언트가 웹 서버로 요청을 보낼 때 스킴, 호스트, 포트번호가 없는 부분 URI를 가진다.
클라이언트가 프락시로 요청을 보낼 때 완전한 URI를 갖는다. ( 서버를 알아낼 방법이 필요 )
인터셉트 프락시는 부분 URI를 받는다.



 # 메시지 추적.

Via 헤더.
메시지가 지나는 각 중간 노드( 프록시, 게이트웨이 )의 정보를 나열한다.
노드를 지날 때마다 via 목록의 끝에 추가된다.
Via waypoint는 프로토콜 이름, 프로토콜 버전, 노드 이름, 코멘트( 선택 )의 최대 4개로 구성되어있다.

Server 헤더.
Server 응답 헤더 필드는 원 서버에 의해 사용되는 소프트웨어를 알려준다. ( apache, Netscape )

TRACE 메소드.
프락시 서버는 메시지가 전달될 때 메시지를 바꿀 수 있다.
헤더를 추가/변경/삭제될 수 있으며, 본문이 다른 형식으로 변환될 수 있다.
TRACE 메소드는 요청 메시지를 프락시의 연쇄를 따라가면서 관찰/추적할 수 있도록 도와준다.
Max-Forwards 헤더는 메시지 전달 횟수를 제한한다. ( Max-Forwards 0이면 전달 되지 않는다 )



 # 프락시 상호운용성.

지원하지 않는 헤더와 메소드 다루기.
프락시는 이해할 수 없는 헤더 필드는 반드시 그대로 전달해야된다. 

Allow 헤더.
요청 URI에 의해 식별되는 자원에 대해 지원되는 메소드들이나 서버가 지원하는 메소드를 열거한다.
예 : Allow : GET, PUT, POST, ... 




