
 커넥션 관리.
 85 ~ 122page.



 # TCP 커넥션.

TCP Transmission Control Protocal.
서버와 클라이언트를 안정적으로 연결해준다.
TCP는 IP 패킷이라고 불리는 작은 조각을 통해 데이터를 전송한다.

TCP 커넥션 식별.
<발신지 IP , 발신지 포트, 수신지 IP, 수신지 포트>



 # TCP의 성능에 대한 고려.

TCP 커넥션 핸드쉐이크.
1. 클라이언트가 새로운 커넥션을 생성하기 위해 'SYN' 플래그를 가진 패킷을 전송한다.
2. 서버가 커넥션을 받으면 'SYN'과 'ACK' 플래그를 포함한 패킷을 전송한다.
3. 클라이언트는 커넥션 확인을 위해 'ACK'를 다시 전송한다.

확인응답.
TCP는 성공적인 데이터 전송을 보장하기 위해 자체적인 확인 체계를 가진다.
확인응답은 크기가 작아서, 같은 방향으로 송출되는 데이터 패킷에 편승( piggyback ) 시킨다.
다른 응답을 기다려야되기 때문에 지연이 발생한다.

TCP 느린 시작 slow start.
처음에는 최대 속도를 제한하고 데이터 성공적으로 전송됨에 따라 속도 제한을 높여나간다.

Nagle 알고리즘.
일정 저장공간을 채워야만 패킷을 전송하도록 설계하는 방식이다.

TIME_WAIT의 누적.
TCP 커넥션을 끊고, 바로 커넥션이 생성되는 것을 막는다.
이전 커넥션과 관련된 패킷이 같은 주소로 새 커넥션이 생성되어 전송되는 것을 막는다.



 # HTTP 커넥션 관리.

병렬 커넥션.
여러 개의 커넥션을 맺음으로써 여러 개의 HTTP 트랜잭션을 병렬로 처리할 수 있다.
병렬 커넥션은 페이지를 더 빠르게 내렵다는다.
병렬 커넥션이 항상 더 빠르지는 않다.
병렬 커넥션은 더 빠르게 느껴질 수 있다.

지속 커넥션.
요청에 대한 응답 후에 커넥션 연결을 끊지않고 유지하는 것.
병렬 커넥션과 함께 쓰면 효과적으로 사용할 수 있다.

파이프라인 커넥션.
지속 커넥션을 통해 파이프라이닝할 수 있다.

TCP 끊기.
전체 끊기 : 입력 채널과 출력 채널의 커넥션을 모두 끊는다. ( close( ) ) 
절반 끊기 : 입력 채널, 출력 채널중 하나의 커넥션을 끊는다. ( shutdown( ) )

우아하게 커넥션 끊기.
서버의 출력 채널을 먼저 끊고 다른 쪽 기기의 출력 채널이 끊기는 것을 기다리는 것.
출력 채널 끊기 이후에 입력 채널 상태 검사를 통해 상대 기기가 끊겼는지 확인해야된다.




