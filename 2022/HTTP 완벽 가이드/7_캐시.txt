
 캐시.
 185 ~ 226page.



 # 캐쉬의 필요성.

캐쉬의 필요성.
불필요한 데이터를 줄여준다.
네트워크 병목을 줄여준다. ( 속도 개선 )
갑작스런 요청 쇄도 Flash Crowds에 대응하기 좋다.
거리로 인한 지연을 줄여준다.



 # 적중과 부적중.

캐시 관련 용어.
캐시 적중 cache hit : 캐시에 요청이 도착했을 때 대응하는 사본이 존재하는 경우.
캐시 부적중 cache miss : 캐시에 요청이 도착했을 때 대응하는 사본이 존재하지 않는 경우.

재검사 Revalidation.
캐시는 그들이 갖고 있는 사본이 최신인지 서버를 통해 점검해야 한다.
서버 데이터가 사본과 일치한다면 403 Not Modified 응답을 보낸다. ( 최신 버전 )
서버 데이터가 사본과 다르다면 200 OK 응답을 보낸다. 
서버 데이터가 삭제되었다면 404 Not Found 응답을 보낸다.
재검사를 통해 최신화된 사본을 클라이언트에 제공하는 것을 재검사 적중, 느린 적중이라고 부른다.

적중률.
캐시가 요청을 처리하는 비율을 의미한다. 
0 ~ 1 또는 0 ~ 100%로 표현한다.

적중과 부적중의 구별.
HTTP는 클라이언트에게 응답이 캐시 적중이었는지 원 서버 접근인지 확인 방법을 제공하지 않는다.
응답 Date 헤더 값을 현재 시각과 비교하여 응답의 생성일이 더 오래되었다면 캐시된 것이다.



 # 캐시 토폴로지.

개인 전용 캐시 private cache.
한 명에게만 할당된 캐시를 의미한다.
많은 저장 공간을 필요로 하지 않으므로 작고 저렴할 수 있다.
웹 브라우저는 개인 전용 캐시를 내장하고 있다.
대부분의 브라우저는 자주 쓰이는 문서를 개인용 컴퓨터의 디스크와 메모리에 캐시해 놓는다.
브라우저를 통해 캐시를 설정하고 확인할 수 있다.

공용 프락시 캐시 public cache.
사용자 집단에게 자주 쓰이는 페이지를 담는다.
공유된 사본을 제공받음으로써 네트워크 트래픽을 줄일 수 있다.

프락시 캐시 계층들.
작은 캐시에서 캐시 부적중이 발생했을 때 더 큰 부모 캐시가 트래픽을 처리하도록 계층을 만든다.

캐시망 컨텐츠 라우팅.
URL에 근거하여, 부모 캐시와 원 서버 중 하나를 동적으로 선택한다.
URL에 근거하여 특정 부모 캐시를 동적으로 선택한다.
부모 캐시에게 가기 전에, 캐시된 사본을 로컬에서 찾아본다.
다른 캐시들이 캐시된 컨텐츠에 부분적으로 접근할 수 있도록 하되 인터넷 트랜짓은 허용하지 않는다.



 # 캐시 처리 단계.

1단계 요청 받기.
네트워크 커넥션에서의 활동을 감지하여 들어오는 데이터를 읽어들인다.

2단계 파싱.
요청 메시지를 여러 부분으로 파싱하여 헤더 부분을 조작하기 쉬운 자료 구조에 담는다.

3단계 검색.
URL을 알아내고 그에 해당하는 로컬 사본이 있는지 검사한다.

4단계 신선도 검사.
HTTP는 캐시가 일정 기간 동안 서버 문서의 사본을 보유할 수 있도록 해준다.

5단계 응답 생성.
캐시는 캐시된 서버 응답 헤더를 토대로 응답 헤더를 생성한다.
Date 헤더는 수정하지 말 것.

6단계 전송.
응답을 클라이언트에게 돌려준다.

7단계 로깅.
대부분의 캐시는 로그 파일과 캐시 사용에 대한 통계를 유지한다.
트랜잭션 완료된 후 적중과 부적중 횟수에 대한 통계를 갱신한다.



 # 사본을 신선하게 유지하기.

문서 만료.
Expires라는 헤더를 통해 유효기간을 붙일 수 있다.
유효기간이 만료되기 전에 요청이 들어오면 서버와 접촉 없이 사본을 제공한다.

유효기간과 나이.
Cache-Control:max-age : 문서의 최대 나이를 정의한다. ( 신선하지 않다고 간주되는 최대 시간 )
Expires : 절대 유효기간을 명시한다. ( 년/월/일 날짜를 명시 )

서버 재검사.
캐시된 문서가 만료되었다는 것은 검사할 시간이 되었음을 의미한다.
재검사 결과 컨텐츠가 변경되었다면 새로운 사본을 가져온다
재검사 결과 컨텐츠가 변경되지 않았다면 새 만료일을 포함한 새 헤더만 가져온다.

조건부 메소드.
서버가 갖고 있는 문서가 캐시가 갖고 있는 것과 다른 경우에만 본문을 보내달라고 하는 것.
If-Modified-Since : <data> 와 If-None-Match : <tags> 를 통해 조건부 검사를 할 수 있다.

IMS If-Modified-Since : 날짜 재검사.
만약 문서가 주어진 날짜 이후에 변경되었다면 조건이 참이고 평범하게 성공한다.
반대라면 조건은 거짓이고 갱신이 필요한 것들을 보내준다.

If-None-Match : 엔티티 태그 재검사.
문서의 엔티티 태그가 변경되었다면 새 문서의 사본을 얻기 위해 If-None-Match 헤더를 사용한다.



 # 캐시 제어.

Cache-Control 헤더.
Cache-Control : no-store - 캐시가 그 응답의 사본을 만드는 것을 금지한다.
Cache-Control : no-cache - 재검사를 하지 않고서는 클라이언트로 제공될 수 없다.
Cache-Control : max-age - 서버로부터 온 이후로 흐른 최대 시간을 확인.
Cache-Control : Expires - 실제 만료 날짜를 명시한다. ( 년/월/일 ) 
Cache-Control : must-revalidate - 신선하지 않은 사본은 재검사 후 제공.

휴리스틱 만료.
max-age, Expires 헤더 중 어느 거솓 포함하지 않고 있다면 경험( heuristic )으로 최대 나이를 계산한다.




