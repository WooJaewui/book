
 MVC 패턴 구현.



 # 모델 2 구조와 MVC 패턴.

MVC 모델 1, 모델 2.
모델1 : JSP에서 요청을 받아 모든 로직과 출력을 처리하는 것.
모델2 : Servlet( Java )에서 요청을 받아 로직을 처리하고, JSP에서 출력을 처리한다.

MVC 패턴.
Model-View-Controller를 의미한다.
모델 : 비즈니스 영역의 로직을 처리한다.
뷰 : 비즈니스 영역에 대한 프레젠테이션 뷰. 사용자가 보게 될 결과 화면을 담당.
컨트롤러 : 사용자의 입력 처리와 흐름 제어를 담당한다.

MVC 패턴 구조.
사용자 -> 요청 -> 컨트롤러 -> 요청에 맞는 로직 모델 선택 -> 모델 
-> 로직처리 -> 컨트롤러 -> 뷰선택 -> 뷰 -> 응답 -> 사용자.



 # MVC 패턴과 모델 2 구조의 매핑.

설명.
모델 : 로직 처리 클래스. 자바빈( Java Class )
뷰 : JSP
컨트롤러 : 서블릿.
사용자 : 웹 브라우저. ( 휴대폰 등 )

서블릿. ( Controller )
웹 브라우저가 전송한 HTTP 요청을 받는다. doGet( ), doPost( ) 호출.
웹 브라우저의 요청을 분석한다.
모델을 사용하여 요청한 기능을 수행한다.
모델로부터 전달받은 결과물을 알맞게 가공한 후, setAttribute( )메소드를 사용하여 결과값을 저장.
뷰로 사용할 JSP를 선택한 후, 포워딩한다. ( 경우에 따라 리다이렉트를 하기도 한다 )

JSP. ( View )
서블릿에서 보내온 데이터를 getAttribute( )메소드를 통해 결과를 브라우저에 응답한다.

자바 클래스. ( Model )
서블릿 ( 컨트롤러 )가 요청한 작업을 처리한 후 알맞은 결과를 컨트롤러에게 전달한다.
이때 처리한 결과값을 저장하는 객체로 보통 자바빈을 사용한다. 
서비스 클래스나 DAO 클래스를 이용해서 비즈니스 로직을 수행하게 된다.



 # 서블릿 포워딩.

사용방법.
request.getAttribute( "변수이름" , 값 ) 
request.getRequestDispatcher( "/파일이름.jsp" ).forward( request, response ) ;

추가설명.
forward( ) 매개변수 request, response는 Servlet에 들어온 request, response와 같다.
데이터를 JSP로 추가적으로 보내는 부분을 request.getAttribute( )를 통해 보낸다.
getAttribute( ) 값으로 사용되는 매개변수의 type은 Object이다. ( 모든 객체 사용 가능 )
setAttribute( "변수이름" ) 메소드를 사용하면 Object 값을 리턴한다.

데이터 처리 과정.
웹 브라우저 요청 -> Servlet 요청 처리 -> JSP 처리된 데이터를 받음 -> 처리 결과를 출력 -> 웹 브라우저.



 # Query String으로 Servlet 처리.

설명.
사용자가 어떤 기능을 요청했는지 QueryString으로 보내서 분석하는 방식.

사용.
String req = request.getParameter( "QueryString" ) ; 
if( req == null { 
	오류 발생 ; 
} else if( req.equals( "기능" ) { 
	기능실행 ;
} 
 
추가응용.
기능실행하는 부분을 별도의 클래스로 분리해서 만드는 것. ( Controller를 여러개 만든다 )
Command 패턴이라고 부른다.



 # MVC 모델 장단점.

장점.
모델 1 : 자바 언어를 몰라도 어느 정도 구현 가능. 기능과 JSP가 직관적으로 연결.
모델 2 : 유지보수가 쉽다. 서블릿에서 검사 인증이 가능. 확장이 용이.

단점.
모델 1 : JSP 코드가 복잡해진다. 유지보수가 어렵다.
모델 2 : 작업량이 많다.



