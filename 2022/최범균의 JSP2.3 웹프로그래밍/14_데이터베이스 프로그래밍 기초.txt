
 데이터베이스 프로그래밍 기초.



 # 데이터베이스 관련 용어.

데이터베이스 DataBase.
데이터를 저장하고 필요할 때 사용하는 공간이다.

DBMS DataBase Management System.
데이터베이스를 관리하는 시스템. ( Oracle, MySQL, MS SQL 등 )

테이블 Table.
관계형 데이터베이스에서 데이터를 저장하는 장소를 의미한다.
테이블을 생성할 때 칼럼이름, 칼럼 타입, 칼럼의 길이, 제약조건 등을 작성한다.

스키마 Schema.
테이블의 구조와 관련된 정보를 테이블 스키마라고 부른다.

레코드 record.
테이블에 칼럼들의 모임을 뜻하며, 행 row 등으도 불린다.

칼럼 column.
테이블의 가로를 의미하며, 열 등으로 불린다.

SID System Identifier.
시스템 아이디.



 # DBMS 사용순서.

순서.
클라이언트가 DBMS와 연결을 요청한다.
연결이 완료되면 클라이언트가 SQL 명령어를 요청한다.
DBMS는 SQL 명령어를 실행하고 해당 SQL 명령어를 실행한 후 결과를 클라이언트에게 전송한다.
추가 요청 사항이 없으면 연결을 종료한다.



 # SQL 타입.

타입.
char : 확정 길이의 문자열.
VARCHAR : 가변 길이의 문자열.
long varchar : 긴 가변 길이의 문자열.
numberic : 숫자.
decimal : 십진수.
integer : 정수.
timestamp : 날짜와 시간.
time : 시간.
date : 날짜.
clob : 대량의 문자열.
blob : 대량의 이진 데이터.



 # DDL Data Definition Language. 

생성하기.
create table 테이블이름 ( 콜롬명 콜롬타입( 갯수 ) ) 

삭제하기.
drop table 테이블이름 ;

변경하기.
alter table 테이블이름 변경할 내용 ;



 # DML Data Manipulation Language.

삽입.
insert into 테이블 ( 속성1, 속성2, ... ) values( 값1, 값2 , ... ) ;
insert into 테이블 values( 값1, 값2, ... ) ;

선택.
select * from 테이블.
select * from 테이블 where 조건 group by 조건 having 조건 order by 조건 ;

변경.
update 테이블이름 set 속성1 = 값1, 속성 2 = 값2 where 조건 ;

삭제.
delete 테이블이름 where 조건 ;

select 실행 순서.
from -> where -> group by -> having -> select -> order by.

select join.
select * from table1 join table2 on table1.a = table2.a ;



 # JSP로 DBMS 사용하기.

JDBC Driver 설정.
WEB-INF/lib 폴더에 JDBC.jar 파일을 넣는다.
JSP 파일에 연결 과정을 거친다. ( Class.forName, Connection, Statment, ResultSet )

연결과정.
String url = "jdbc:oracle:thin:@localhost:1521:jaewui" ;
try { 
	Class.forName( "oracle.jdbc.driver.OracleDriver" ) ;
	Connection con = DriverManager.getConnection( url, id, password ) ;
	Statement st = con.createStatement( ) ;
	ResultSet rs = st.executeQuery( sql ) ;
} catch ( Exception e ) { 
	예외 발생시 실행할 문장 ; 
}



 # ResultSet 사용하기.

사용.
while( rs.next( ) ) { 
	String 변수1 = rs.getString( "속성이름" ) ;
	String 변수2 = rs.getString( 인덱스 ) ; 
	out.println( 변수1 + " : " + 변수2 ) ;
}



 # JDBC 트랜잭션 구현.

설명.
JDBC Connection은 기본값으로 SQL문을 실행하면 AutoCommit하게 설정되어 있다.
여러 개의 쿼리를 트랜잭션으로 묶어서 처리하고 싶으면 AutoCommit을 false로 설정하고, 처리해야된다.

사용.
con.setAutoCommit( false ) ; 
con.commit( ) ; 
con.rollback( ) ;

추가설명.
setAutoCommit을 false로 설정한 후에는 수동으로 commit, rollback을 설정하여 트랜잭션을 처리해준다.



 # 커넥션 풀.

커넥션 풀 설정하기.
ConnectionFactory con = new DriverManagerConnectionFactory( url, "id", "password" ) ;
PoolableConnectionFactory pool = new PoolableConnectionFactory( con, null ) ;
GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig( ) ;
poolConfig.설정들( ) ;
GenericObjectPool conPool = new GenericObjectPool( pool, poolConfig ) ;

Drive 설정.
Class.forName( "pool 드라이버" ) ;
PoolingDriver driver = ( PoolingDriver ) DriverManager.getDriver( url ) ;
driver.registerPool( "주소이름" , conPool ) ;

커넥션 풀 사용하기.
connection con = DriverManager( 커넥션 풀 drvier ) ; 


