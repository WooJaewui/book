
 클라이언트와의 대화 - 세션.



 # 세션 사용하기.

세션.
서버 세션을 사용하면 클라이언트의 상태를 저장할 수 있다.
쿠키와의 차이점은 세션은 웹 브라우저가 아니라 서버에 값을 저장한다.
세션은 오직 서버에서만 생성된다.

세션 생성.
<%@ page session= "true" %> : "false"이면 session을 생성하지 않는다.

생성 추가설명.
session = true는 기본값이므로 따로 설정하지 않아도 session을 자동 생성한다.
웹 브라우저마다 세션이 따로 존재한다.



 # session 기본 객체.

설명.
session을 사용한다는 것은 session 기본 객체를 사용한다는 것을 말한다.

메소드.
getId( ) : 세션의 고유 ID를 구한다. ( 세션 ID라고 한다 )
getCreationTime( ) : 세션이 생성된 시간을 구한다. ( 1970년 1월 1일 이후 흘러간 시간 )
getLastAccessedTime( ) : 웹 브라우저가 가장 마지막에 세션에 접근한 시간을 구한다. ( 위와 동일 )

JSESSIONID.
웹 서버와 웹 브라우저가 세션 ID를 공유할 때 사용하는 쿠키 이름이다.

추가설명.
Date date = new Date( ) ;
date.setTime( sessionCreationTime( ) ) : Time.setTime( )을 통해 실제 날짜를 구한다.
SimpleDateFormat sdf = new SimpleDateFormat( "yyyy-MM-dd" ) : 시간 표시 방법 설정.



 # 세션의 특징.

특징.
한 번 생성된 세션은 지정한 유효 시간 동안 유지된다. ( 지속적으로 사용해야 하는 데이터의 저장소로 사용 )
request는 하나의 요청을 처리하는 데 사용되는 JSP 페이지 사이에서 공유.
session은 웹 브라우저의 여러 요청을 처리하는 JSP 페이지 사이에서 공유.

세션의 데이터 저장.
session.setAttribute( "변수이름", 값 ) ;

세션의 데이터 사용.
session.getAttribute( "변수이름" ) ;

쿠키와 세션의 차이.
세션이 쿠키에 비해 보완성이 뛰어나다. ( 쿠키는 중간에 누군가 쿠키의 값을 읽어올 수 있다 )
웹 브라우저가 쿠키를 지원하지 않을 경우 또는 사용을 막을 경우 쿠키를 사용할 수 없게 된다.
세션은 여러 서버에서 공유할 수 없고, 쿠키는 도메인을 통해 공유할 수 있다.



 # 세션 종료.

세션의 종료.
session.invalidate( ) : session 기본객체와 session 기본 객체에 저장했던 속성 모두 삭제한다.

추가설명.
세션을 종료하고 다음 요청에서 세션을 사용하면 새로운 세션 객체 session이 생성된다.
이미 세션이 존재하면 기존에 세션을 사용한다.



 # 세션 유효 시간.

세션 접근.
session=true로 설정해놓으면 웹 브라우저가 JSP 페이지를 실행할 때마다 session에 접근한다.

메소드.
session.getLastAccessedTime( ) : 웹 브라우저가 마지막으로 JSP페이지를 실행한 시간.

xml 설정방법.
<session-config>
	<session-timeout> 분 </session-timeout>
</session-config>

session 메소드 사용.
session.setMaxInactiveInterval( 초 ) : 초 단위 시간으로 유효시간 설정.

주의사항.
유효시간을 0이나 음수로 설정하면 세션은 유효시간을 갖지 않는다.
유효시간을 갖지 않을 경우 sesion.invalidate( )를 호출하지 않으면 계속 새로운 session이 생성된다.



 # request를 이용한 session 생성.

생성방법.
HttpSession session = request.getSession( ) ;
HttpSession session = request.getSession( false ) : 세션이 존재할때만 리턴, 존재하지 않으면 null.

추가설명.
session true로 설정되어 session이 이미 존재하면 기존 session을 리턴한다.
session false로 설정되어 session이 존재하지 않으면 새로운 session을 리턴한다.



 # session을 이용한 로그인. ( 간단 원리 )

로그인.
입력된 데이터가 로그인 조건에 맞으면 session.setAttribute( "변수이름" , id ) ; 저장.

로그인 상태 확인.
session에 저장된 id가 존재하면 로그인 상태로 간주한다. 
if( session.getAttribute == null ) { session.invalidate( ) } else { 로그인상태; } 

로그아웃 상태.
로그아웃 버튼을 클릭하거나, 세션 유효시간이 만료되었을 경우 session.invalidate( ) ;



 # session 활용법.

데이터 활용법.
session에 저장해야되는 데이터가 너무 많아질 경우, 연관된 데이터는 클래스로 묶어서 저장한다.

세션 경로.
같은 서버에서 경로가 서로 다른 웹 어플리케이션은 JSESSIONID 쿠키가 다르다. 
JSESSIONID는 세션 ID를 보관할 때 웹 어플리케이션의 컨텍스트 경로를 사용한다.



