
 필수 이해 요소.



 # JSP 처리 과정.

처리 과정.
클라이언트 요청 -> JSP -> JSP를 자바소스로 변환 -> 컴파일 -> 서블릿 클래스.
톰캣은 JSP를 변환한 자바 소스 코드와 서블릿 클래스를 실행한다.

실제 컴파일 된 데이터 저장 장소.
eclipse workspace -> .metadata -> plugins -> org.eclipse.wst.server.core
-> tmp0 -> work -> Catalina -> localhost -> Project폴더.



 # 출력 버퍼와 응답.

JSP 응답.
응답 결과를 웹 브라우저에 바로 전송하지 않고, 버퍼를 통해 전송한다.

JSP 버퍼 사용 장점.
데이터 전송 성능 향상 ( 큰 단위로 묶어서 보내서 성능 향상 )
JSP 실행 도중에 버퍼를 비우고 새로운 내용 전송 가능 ( 에러 발생시 에러 화면 출력 가능 )
버퍼가 다 차기 전까지 헤더 변경 가능. ( 버퍼 내용이 전송되기 전까지 변경 가능 )

버퍼 설정.
<%@ page buffer="4kb" %> : 버퍼 사이즈를 4kb로 설정.

버퍼 설정시 유의사항.
buffer 속성값에 kb를 붙이지 않으면 자바코드로 변환하는 과정에서 에러 발생.
설정을 하지 않으면 8kb 이상의 크기를 갖는 버퍼를 사용.
사용하고 싶지 않을때는 buffer="none" 으로 설정. ( 거의 설정하지 않는다 )

flush.
버퍼에 쌓인 데이터를 전송하고 버퍼를 비우는 것을 의미한다.

autoFlush 설정.
<%@ page autoFlush="true" %>

autoFlush 속성 종류.
true : 버퍼가 다 차면 버퍼를 플러시하고 계속해서 작업을 진행한다.
false : 버퍼가 다 차면 Exception을 발생시키고 작업을 중지한다.



 # 웹 어플리케이션 폴더 구성.

tomcat 폴더.
WEB-INF : 웹 어플리케이션 설정 정보를 담고 있는 web.xml 파일이 존재한다.
WEB-INF/classes : 웹 어플리케이션에서 사용하는 클래스 파일이 위치한다.
WEB-INF/lib : 웹 어플리케이션에서 사용하는 jar 파일이 위치한다.

web.xml
웹 어플리케이션의 설정 정보를 담고 있다.
서블릿 2.5 / JSP 2.1 부터는 web.xml이 없어도 문제 없이 작동한다.

web.xml을 작성해야 하는 경우.
서블릿을 직접 설정하는 경우.
리스너( Listener )를 직접 설정하는 경우.
특정 URL에 속하는 JSP들에 대해 공통 속성값을 설정하는 경우.

웹 어플리케이션 폴더와 URL의 관계.
webapps 폴더에 생성한 각 하위 폴더 구조는 웹 어플리케이션 폴더 구조를 따른다.
webapps/view 라고 실행시 view 폴더가 없으면 ROOT기준으로 ROOT\view를 찾는다.
하위 폴더를 만들어서 소스 파일을 정리할 수 있다.
request.getContextPath( )를 통해 확인 가능.



 # 웹 어플리케이션 배포.

웹 어플리케이션을 WAS에 배포.
대상 폴더에 파일을 직접 복사.
war 파일로 묶어서 배포.

대상 폴더에 파일을 직접 복사.
직접 폴더에 내가 원하는 소스 파일을 복사 붙여넣기해서 배포한다.

war 파일로 묶어서 배포.
war Web Application Archive : 웹 어플리케이션 구성 요소를 하나로 묶어 놓은 파일이다.
JDK의 jar 명령어를 통해 war파일로 묶어줄 수 있다.

war 파일 만들기.
console> cd 파일경로 ;
console 파일경로> jar cvf 파일이름.war * ;
 '*' 는 현재 폴더와 하위 폴더를 모두 묶어서 파일이름.war를 만든다는 뜻이다.

cvf 옵션.
c : 새로운 파일을 생성함.
v : 세부 정보를 콘솔에 표시함.
f : 생성할 파일의 이름을 지정함.



