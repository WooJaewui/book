
 페이지 모듈화와 요청 흐름 제어.



 # <jsp:include> 액션 태그.

설명.
웹 페이지마다 공통으로 들어가는 요소( 중복 코드 )들을 파일로 저장해서 불러온다.

<jsp:include> 실행 순서.
1. jsp가 웹 브라우저의 요청을 받는다.
2. 출력내용을 출력 버퍼에 저장한다.
3. <jsp:include>가 실행되어 요청 흐름을 외부 파일로 이동시킨다.
4. 외부 파일의 내용이 출력 버퍼에 저장된다.
5. 외부 파일의 실행이 끝나면 요청 흐름이 다시 jsp로 돌아온다.
6. <jsp:include> 이후 부분이 출력 버퍼에 저장된다.
7. 출력 버퍼의 내용을 응답 데이터로 전송한다.

액션 태그 사용법.
<jsp:include page="포함할페이지경로" flush="true" />

<jsp:include> 속성.
page : 포함할 JSP 페이지의 경로를 지정한다.
flush : 지정한 JSP 페이지를 실행하기 전에 출력 버퍼를 플러시할지 여부를 지정한다.

추가설명.
flush를 true로 설정하면 출력버퍼에 저장된 데이터를 플러시한 후에 page경로로 이동한다.
flush를 true로 설정하면 이후에 header 설정을 변경해도 반영되지 않는다. ( 최초 flush에 결정 )



 # <jsp:param> 액션 태그.

설명.
<jsp:include>를 통해 포함할페이지에 param을 설정하여 데이터를 보낼 수 있다.

액션 태그 사용법.
<jsp:include page="포함할페이지경로" flush="true" >
	<jsp:param name="변수이름" value="값" />
</jsp:include>

추가설명.
동일한 이름의 파라미터가 존재하면 기존 파라미터 값을 유지하면서 새로운 값을 추가한다.
request.getParameterValues( "name" )을 통해 같은 이름의 여러 데이터를 사용할 수 있다.
새롭게 추가한 데이터인 <jsp:param>이 배열의 우선순위를 가진다.
<jsp:param>은 request.setCharacterEncoding( ) 메소드의 캐릭터 셋을 사용한다.



 # include 디렉티브.

설명.
<jsp:include>처럼 파일을 불러와서 사용할 수 있다.

디렉티브 실행 순서.
1. 디렉티브 include한 파일을 불러온다.
2. 현재 파일 + 디렉티브 include한 파일을 함께 컴파일한다.

사용.
<%@ include file="포함할파일경로" %>

추가설명.
include 디렉티브를 통해 포함되는 파일은 확장자를 .jspf( fragment )로 많이 사용한다. ( jsp와 구분 )



 # include 디렉티브와 <jsp:include> 액션태그 차이.

차이점.
include 디렉티브 : 소스 코드 그대로 main파일에 불러와서 같이 컴파일한다. 
<jsp:include> 액션태그 : 서브 파일을 컴파일한 뒤 main파일로 불러와서 출력버퍼로 이동시킨다.

사용방식의 차이.
include 디렉티브 : 모든 JSP 페이지에서 사용하는 변수 지정, 모든 페이지에서 사용되는 간단한 문장.
<jsp:include> 액션태그 : 레이아웃의 한 구성 요소를 모듈화.

데이터 전달 방법의 차이.
include 디렉티브 : 페이지 내의 변수를 선언한 후, 변수에 값을 저장하여 전달.
<jsp:include> 액션태그 : request 기본 객체나 <jsp:param>을 이용하여 파라미터 전달.



 # web.xml로 include하기.

설명.
web.xml을 통해 프로젝트 내의 모든 jsp 페이지에 파일을 include할 수 있다.

web.xml 파일에서 설정.
<jsp-property-group>
	<url-pattern> 경로 </url-pattern>
	<include-prelude> 경로 </include-prelude>
	<include-coda> 경로 </include-coda>
</jsp-property-group>

속성 설명.
<jsp-property-group> : JSP의 프로퍼티를 포함한다.
<url-pattern> : 프로퍼티를 적용할 JSP 파일의 패턴을 지정한다.
<include-prelude> : url-pattern에서 지정한 패턴에 해당하는 JSP 파일의 앞에 삽입할 파일 지정.
<include-coda> : url-pattern에서 지정한 패턴에 해당하는 JSP 파일의 뒤에 삽입할 파일 지정.
prelude, coda는 필요한 태그만 설정하면 된다.



 # <jsp:forward> 액션 태그.

설명.
jsp 페이지에서 다른 jsp페이지로 요청 처리를 전달할 때 사용된다.

<jsp:forward> 실행 순서.
1. 웹 브라우저 요청을 1.jsp 파일로 전달한다.
2. 1.jsp 파일에 <jsp:forward>를 실행한다.
3. <jsp:forward>에 의해 요청흐름이 2.jsp로 이동한다.
4. request와 response 기본객체가 2.jsp로 이동한다.
5. 2.jsp가 응답 결과를 생성한다.
6. 2.jsp의 응답 결과가 웹 브라우저로 전달된다.

사용방법.
<jsp:forward page="이동할 페이지" />

장점.
상황에 따라 조건을 처리하는 JSP를 붑ㄴ리하여 기능별로 모듈화할 수 있게 된다.

추가설명.
웹 브라우저의 주소는 포워딩 하기 전에 jsp주소이다. ( 리다이렉트처럼 url이 변경되지 않는다 )
웹 컨테이너 내부에서 요청 흐름을 이동시키기 때문에 웹 브라우저는 forward된 것을 알지 못한다.
실제 응답 데이터는 포워딩된 새로운 jsp에 소스코드 내용이다.



 # 출력버퍼와 <jsp:forward> 액션 태그.

설명.
기존 jsp에서 출력버퍼에 데이터를 저장하다가 <jsp:forward>를 실행하면 출력버퍼의 데이터를 비운다.
즉, 기존 jsp에서 실행된 모든 소스코드가 삭제되고, 포워딩 된 jsp파일의 내용이 출력버퍼의 저장된다.
그리고 기존 jsp에서 <jsp:forward> 뒤에 작성된 코드는 실행조차 되지 않는다.

주의사항.
<jsp:forward>가 실행되기 전에 출력버퍼를 flush하면 <jsp:forward>가 실행되지 않는다.
출력버퍼를 none으로 설정해도 <jsp:forward>가 실행되지 않는다.



 # <jsp:forward> 액션 태그 활용.

설명.
입력되는 데이터에 따라 다른 처리를 실행하도록 페이지를 구분하여 줄 수 있다.

활용1.
String forwardPage = null ;
if( option == value1 ) { 
	forwardPage = "page1";
} else if( option == value2 ) {
	forwardPage = "page2" ;
} ....
<jsp:forward page="<%=forwardPage%>" />

활용2.
<jsp:forward page="이동할 페이지">
	<jsp:param name="변수이름" value="값" />
</jsp:forward>



 # page 설정 시 절대 경로와 상대 경로.

절대경로.
웹 어플리케이션 폴더를 기준으로 한 절대 경로.

상대경로.
현재 JSP 페이지를 기준으로 한 상대 경로.
 ./ : 현재 경로를 의미한다.
 ../  : 현재 경로에 부모경로( 상위폴더 )를 의미한다.

설명.
상황에 따라 두가지 방법을 다 사용하기 때문에 두 방법 모두 알고 있어야된다.



 # request 데이터 전송.

설명.
param을 통해 데이터를 전송하는 것은 String 타입만 가능하기 때문에 문제점이 있다.
request 기본 객체를 통해 데이터를 전송하면 문제를 해결할 수 있다.

사용.
reqeust.setAttribute( "name" , value ) ; 

추가설명.
request의 value는 object타입으로 모든 객체가 사용이 가능하다.



