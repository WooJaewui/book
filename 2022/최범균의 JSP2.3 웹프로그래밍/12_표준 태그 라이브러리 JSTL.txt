
 표준 태그 라이브러리 JSTL.



 # JSTL.

JSTL JSP Standard Tag Library.
많이 사용되는 기능들을 태그로 만들어서 사용함으로써 코드의 가독성을 높여주는 방식이다.

JSTL의 필요성.
JSP의 스크립트 코드와 HTML코드가 뒤섞여서 복잡한 코드를 발생시키는데, 
이러한 문제점을 해결하기 위해 스크립트 코드를 태그형식으로 표현하는 방식을 제공한다.

JSTL의 커스텀 태그.
JSTL로 이미 만들어진 태그들 이외에 내가 원하는 특수한 기능을 수행하는 태그를 생성할 수 있다.



 # JSTL 라이브러리 받기.

설명.
JSTL을 사용하려면 JSTL을 구현한 jar 파일을 다운로드해야된다.
JSTL 1.2 : JSP 2.1 이상을 지원하는 웹 컨테이너사용.

사용.
WEB-INF/lib 디렉토리에 jar파일 복사.
<$@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> : 코어태그 설정.


 # JSTL이 제공하는 태그 종류.

종류.
코어 c : 변수지원, 흐름 제어, URL 처리. ( java.sun.com/jsp/jstl/core )
XML x : XML 코어, 흐름 제어, XML 변환. ( java.sun.com/jsp/jstl/xml )
국제화 fmt : 지역, 메시지 형식, 숫자 및 날짜 형식. ( java.sun.com/jsp/jstl/fmt )
데이터베이스 sql : SQL. ( java.sun.com/jsp/jstl/sql )
함수 fn : 컬렉션 처리, String 처리. ( java.sun.com/jsp/jstl/functions ) 



 # 코어 태그 c .

변수 지원 태그
<c:set var="변수명" value="값" scope="page" /> : JSP에서 사용할 변수를 설정한다.
<c:set target="<%=클래스이름 %>" property="속성이름" value="값" /> : 클래스에 속성을 추가.
<c:remove var="변수명" scope="request" /> : 설정한 변수를 제거한다.

변수 지원 태그 속성.
var : 변수이름.
value : 변수의 값.
scope : page/request/session/application 중 하나가 들어간다. 지정하지 않으면 page.
target : 대상 객체를 지정한다. 표현식이나 EL 변수를 사용할 수 있다. ( 자바빈 또는 Map 이어야 한다 )
property : 속성의 이름을 설정한다. ( class.setName( ) 또는 Map.put( 속성이름, 값 )으로 생성 )
value : 속성의 값을 지정한다.

변수 지원 태그 설명.
삭제할 때 scope를 지정하지 않으면 모든 저장장소에 "변수명"으로 된 변수가 제거된다.
PageContext.removeAttribute( 변수명, scope )를 통해 변수를 제거할 수 있다.

흐름제어 태그 - 조건문.
<c:if test="조건" var="변수이름" scopr="context"> 실행할 문장 </c:if>
<c:choose> : 여러 조건 중 하나를 선택. ( switch )
	<c:when test="조건"> 실행할문장 </c:when> : 조건에 만족하면 실행.
	<c:otherwise> 실행할문장 </c:otherwise> : when 조건이 false일때 실행.
</c:choose>

흐름제어 태그 - 반복문.
<c:forEach var="변수이름" items="Map, 배열, Collections">
	${ 변수이름 }
</c:forEach>
<c:forEach var="i" begin="1" end="10" step="1" varStatus="status">
	${ i }
</c:forEach>

varStatus 반복문 속성.
${status.index} : 루프 실행에서 현재 인덱스.
${status.count} : 루프 실행 횟수.
${status.begin} : begin 속성값.
${status.end} : end 속성값.
${status.step} : step 속성값.
${status.first} : 현재 실행이 첫 번째 실행인 경우 true.
${status.last} : 현재 실행이 마지막 실행인 경우 true.
${status.current} : 컬렉션 중 현재 루프에서 사용할 객체.

문자열 나누기 태그.
<c:forTokens var="변수이름" items="문자열" delims="구분자">
	${ 변수이름 }
</c:forTokens>

URL 처리 태그.
<c:url value="URL주소" var="변수이름" scope="session">
</c:url> 
value : 읽어올 URL 설정.
var : 읽어온 URL 변수에 저장.

Redirect 태그.
<c:redirect value="URL주소" context="콘텍스트경로" />
value : 이동할 URL 설정.
context : 콘텍스트 경로 설정.

출력 태그.
<c:out value="값" escapeXml="true/false" default="값이 존재하지 않을때 출력할 값 " />.
escapeXml : true로 설정하면 < 를 &lt으로 변경해준다. ( 기호를 문자형태로 변경 )

예외 처리 태그.
<c:catch var="익셉션이 발생할 수 있는 변수" >
	<% 실행할문장 %>
</c:catch>



 # 국제화 태그 fmt.

태그 설정.
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

로케일 지정 태그.
<fmt:setLocale value="ko" scope="request" />
value : ko_kr와 같이 언어코드_국가코드로 형식을 지정한다.
<fmt:requestEncoding value="utf-8" /> = request.setCharacterEncoding( "UTF-8" ) ;
value : requestEncoding 방식을 지정한다. 

리소스 번들 사용 태그.
<fmt:bundle basename="리소스 번들의 이름" prefix="message key앞에 붙을 문장">
	<fmt:message key="읽어올 메시지의 키 이름" var="변수이름" />
</fmt:bundle>

<fmt:bundle> 태그 설명.
WEB-INF/classes 폴더에 위치한 .properties 파일을 리소스 번들 파일로 사용한다.
( java.util.Properties 클래스를 사용해서 읽어오기 때문에 확장자가 .properties이다 )

<fmt:message> 태그 리소스 번들 검색 순서.
bundle 속성에 지정한 리소스 번들을 사용한다.
<fmt:bundle> 태그에 중첩된 경우 <fmt:bundle>태그에서 설정한 리소스 번들 사용.
위 두 가지 모두 아닌 경우 기본 리소스 번들 사용.

리소스 번들 설정 태그.
<fmt:setBundle var="변수이름" basename="파일이름.message" />
<fmt:message bundle="${변수이름}" key="키이름" />

리소스 번들 설정 태그 설명.
리소스 번들을 변수에 저장한 후, 어디서나 사용할 수 있도록 해준다. ( message를 통해 사용 )

번들 파일 이름 설명.
번들이름_언어_국가.properties 로 만들어 진다.
국가는 생략가능하다. ( 번들이름_ko.properties )
언어, 국가를 생략하면 기본 번들 파일이 된다. ( 번들이름.properties ) 

숫자 포맷 태그.
<fmt:formatNumber value="숫자 또는 문자" type="number/percent" pattern="출력양식" var="변수" />
<fmt:parseNumber value="파싱할 문자열" type="number/percentage" pattern="출력양식" var="변수" />

날짜 포맷 태그.
<fmt:formatDate value="날짜 값" type="time/date/both" pattern="출력양식" var="변수" />
<fmt:parseDate value="파싱할 문자" type="time/date/both" pattern="출력양식" var="변수 />

시간대 설정 태그.
<fmt:timeZone value="지역이름( Hongkong )" >
	new Date( );
</fmt:timeZone>



 # 함수 태그 fn.

설명.
JSTL에서 함수를 사용할 수 있는 태그를 제공하지만, 
EL에서 Java 메소드를 사용할 수 있게 되면서 효용성이 떨어지게 되었다. ( 자세히 공부 X )



