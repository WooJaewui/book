
 트랜잭션 처리.



 # 트랜잭션 네임스페이스 등록.

등록.
AOP Namespace 등록.
tx 네임스페이스 등록.



 # 트랜잭션 관리자 클래스 등록.

설명.
스프링은 다양한 트랜잭션 관리자를 지원한다. 
어떤 기술을 이용하여 데이터베이스 연동을 처리했냐에 따라 트랜잭션 관리자가 달라진다.
모든 트랜잭션 관리자는 PlatformTransactionManager 인터페이스를 구현한 클래스이다.
따라서 모든 트랜잭션 관리자는 commit( )과 rollback( ) 메소드를 가진다.

관리자 등록.
<bean id="datasource ~~~~ >
	<property ~~~>
	....
</bean>
<bean id="tx변수이름" class="패키지이름.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>

트랜잭션 어드바이스 등록.
<tx:advice id="tx어드바이스변수이름" transaction-manager="tx변수이름">
	<tx:attributes>
		<tx:method name="get*" read-only="true"/>
		<tx:method name="*"/>
	</tx:attributes>
</tx:advice>

트랜잭션 어드바이스 설명.
트랜잭션 어드바이스는 직접 구현하지 않고 스프링 컨테이너가 자동으로 생성한다.
따라서 메소드를 확인할 수 없기 때문에 tx변수이름을 통해서 트랜잭션어드바이스를 생성한다.
<tx:method>를 트랜잭션을 적용할 메소드를 설정할 수 있다.
read-only="true"는 트랜잭션 관리대상에서 제외한다는 뜻이다.

<tx method> 속성.
name : 트랜잭션이 적용될 메소드 이름 지정.
read-only : 읽기 전용 여부 지정 ( 기본값 false )
no-rollback-for : 트랜잭션을 롤백하지 않을 예외 지정.
rollback-for : 트랜잭션을 롤백할 예외 지정.



 # AOP 설정을 통한 트랜잭션 설정.

설명.
위에 트랜잭션 설정들을 모두 마치면 AOP 설정만 해주면 작동 가능하다.

xml 설정.
<aop:config>
	<aop:pointcut id="tx포인트컷" expression="execution( ~ )"/>
	<aop:advice pointcut-ref="tx포인트컷" advice-ref="tx변수이름"/>
</aop:config>



 # 트랜잭션 실행과정.

실행과정.
포인트컷 메소드가 실행된다.
포인트컷 메소드 실행도중에 문제가 발생하면 txAdvice의 rollback( )이 실행된다.
포인트컷 메소드 문제없이 실행되면 txAdvice의 commit( )이 실행된다.




