
 의존성 주입.



 # 스프링의 의존성 관리 방법.

의존성 Dependency.
객체와 객체 사이의 결합 관계를 의미한다.
하나의 객체에서 다른 객체의 변수나 메소드를 사용하는 경우를 의미.

스프링 컨테이너.
객체의 생성과 의존관계를 컨테이너가 자동으로 관리해준다.

제어의 역행 Inversion of Control IoC.
Dependency Lookup 기능과 Dependency Injection 기능을 지원한다.

Dependency Lookup.
컨테이너가 객체를 생성하고 클라이언트는 검색하여 컨테이너 객체를 사용하는 방식.
실제 애플리케이션 개발과정에서는 잘 사용하지 않는다.

Dependency Injection.
객체 사이의 의존관계를 컨테이너가 자동으로 처리해 준다.

Dependency Injection 종류.
Setter Injection : Setter 메소드를 기반으로 하는 Injection 방식.
Constructor Injection : 생성자를 기반으로 하는 Injection 방식.

Constructor Injection - xml 방식.
<bean id="변수이름1" class="패키지이름.injecion 받을 클래스이름">
	<contructor-arg ref="변수이름2" />
	<contructor-arg ref="변수이름3" />
</bean>
<bean id="변수이름2" index="0" class="패키지이름.injection할 클래스2" />
<bean id="변수이름3" index="1" class="패키지이름.injection할 클래스3 />

XML 실행 순서.
xml에 작성한 bean들은 순서대로 컨테이너에 생성된다.
Injection하는 bean은 Injection받는 bean보다 작성 순서와 상관없이 먼저 생성된다.
다중 매개변수를 가지는 생성자 방식은 index="값" 을 통해 Argument를 명확하게 할 수 있다.

Setter Injection  - xml 방식.
<bean id="변수이름1" class="패키지이름.injection 받을 클래스이름" >
	<property name="세터메소드이름" ref="변수이름2" />
</bean>
<bean id="변수이름2" class="패키지이름.injection할 클래스2" />

Setter Injection & Constructor Injection.
대부분 Setter Injection을 사용하고, Setter메소드를 제공하지 않는 클래스에서 Constructor Injection을 사용.



 # Collection 주입하기.

설명.
변수로 Collection을 갖는 클래스에 값을 Injection하기.

Collection의 속성이름.
<list> : List 계열을 주입할 때 사용.
<set> : Set 계열을 주입할 때 사용.
<map> : Map 계열을 주입할 때 사용.
<Props> : Properties 계열을 주입할 때 사용.

Collections 변수에 Injection하기.
<bean id="collectionBean" class="패키지이름.콜렉션주입 클래스 이름" >
	<property name="세터메소드이름">
		<list>
			<value>List계열 Collections에 넣을 데이터1</value>
			<value>List계열 Collections에 넣을 데이터2</value>
		</list>
	</property>
</bean>





