
 스프링 AOP & AOP 용어 및 기본 설정.



 # AOP 이해하기.

비즈니스 컴포넌트 개발의 원칙.
낮은 결합도 : DI, IoC.
높은 응집도 : AOP.

AOP Aspect Oriented Programming.
메소드마다 주요기능 이외에 반복되는 코드들이 너무 많이 작성된다. ( 예외처리, 트랜잭션 등 )
공통되는 코드들을 효율적으로 분리하는 관심 분리( Separation of Concerns )이다.

Concerns 종류.
Crosscutting Concerns : 메소드마다 공통으로 등장하는 코드들.
Core Concerns : 메소드의 핵심 로직 코드.

AOP이 필요성.
일반적인 OOP에서는 Crosscutting Concerns와 Core Concerns를 완벽히 분리해서 사용하기 힘들다.
의존성을 갖게 되고, 의존성이 클수록 수정 사항이 생기면 코드 수정을 많이 해야된다.



 # AOP 시작하기.

설정.
Maven에 AOP 라이브러리 추가.
spring.xml에 AOP namespace 추가.



 # AOP 용어 정리.

조인포인트 Joinpoint.
클라이언트가 호출하는 모든 비즈니스 메소드이다.
조인포인트 중에 포인트컷이 선택된다.

포인트컷 Pointcut.
필터링된 조인포인트를 의미한다.
필요한 기능은 사용하고, 필요하지 않는 기능은 사용하지 않도록 처리한다.

포인트컷 선언.
<aop:config>
	<aop:pintcut id="포인트컷-변수이름" expression=" execution( 리턴타입 "적용할 패키지이름 ) ">
</aop:config>

포인트컷 사용.
<bean id="변수이름1" class="공통로직을 구현한 클래스" />
<aop:aspect ref="변수이름1" >
	<aop:before pointcut-ref="포인트컷-변수이름" method="공통로직 메소드이름" />
</aop:aspect>

어드바이스 Advice.
CrossCutting Concern에 해당하는 공통 기능의 코드를 의미한다.
독립된 클래스의 메소드로 작성된다.
어드바이스로 구현된 메소드가 언제 동작할지 스프링 설정 파일을 통해서 지정할 수 있다.
동작 시점을 before, after, after-returning, after-throwing, around 등 다섯 가지로 지정할 수 있다.

위빙 Weaving.
포인트컷으로 지정한 핵심 관심 메소드가 호출될 때

애스펙트 Aspect
포인트컷과 어드바이스의 결합을 의미한다.
어떤 포인트컷 메소드에 대해 어떤 어드바이스 메소드를 실행할지 결정한다.

어드바이저 Advisor.
애스펙트와 같은 의미에 용어이다.
트랜잭션을 어드바이스할 때 어드바이저를 사용한다.



 # AOP 엘리먼트.

<aop:config> 엘리먼트.
AOP 설정의 루트 엘리먼트이다.
스프링 설정 파일 내에 여러번 사용할 수 있다.
하위에는 <aop:pointcut>, <aop:aspect> 엘리먼트가 있다.

<aop:pointcut> 엘리먼트.
포인트컷을 지정하기 위해 사용한다.
<aop:aspect>의 자식 엘리먼트로 사용할 수 있다.
<aop:aspect> 하위에 설정된 포인트컷은 해당 <aop:aspect>에서만 사용할 수 있다.
여러 aspect에서 사용하기위해 포인트컷을 정의해놓고 id로 참조해서 사용한다.

<aop:aspect> 엘리먼트.
Core Concern인 포인트컷 메소드와 CrossCutting Concern 어드바이스 메소드를 결합시킨다.
어떻게 설정하느냐에 따라 위빙 결과가 달라지므로 AOP에서 가장 중요한 설정이다.
어드바이스의 id와 메소드이름을 알아야 적용할 수 있다.

<aop:advisor> 엘리먼트.
<aop:aspect>와 똑같은 기능을 한다.
메소드를 확인할 수 없는 경우에 사용한다. ( 예 : spring.xml에서 트랜잭션을 처리한 경우 )



 # 포인트컷 표현식.

설명.
조인포인트들 중에 포인트컷을 필터링하기 위한 방법이다.

사용방법.
<aop:pointcut expression="execution( 리턴타입 패키지경로.클래스.메소드명 매개변수 )" />

리턴타입.
* : 모든 리턴타입 허용.
void : 리턴타입 void.
!void : 리턴타입이 void가 아닌 메소드.

패키지 지정.
 * : 모든 패키지.
A패키지.. : A패키지로 시작하는 모든 패키지 선택.
A패키지..B : A패키지로 시작하면서 마지막 패키지가 B로 끝나는 패키지 선택.

클래스 지정.
* : 모든 패키지.
+ : 클래스 이름 뒤에 붙으면 해당 클래스로부터 파생된 모든 자식 클래스.

메소드 지정.
* ( .. ) : 모든 메소드 선택.
get * ( .. ) : 메소드 이름이 get으로 시작하는 모든 메소드 선택.

매개변수 지정.
( .. ) : 매개변수의 개수와 타입에 제약이 없다.
( * ) : 1개의 매개변수를 가지는 메소드.
( 패키지.클래스A ) : 매개변수로 클래스A를 가지는 메소드.
( !패키지.클래스A ) : 매개변수로 클래스A를 가지지 않는 메소드.
( A , .. ) : 한 개 이상의 매개변수를 가지되, 첫 번째 매개변수의 타입이 A인 메소드.
( A , * ) : 두 개의 매개변수를 가지되, 첫 번째 매개변수의 타입이 A인 메소드.





