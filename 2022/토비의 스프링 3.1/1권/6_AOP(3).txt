
 AOP(3)
 512 ~ 555page.



 # 트랜잭션 속성.

TransactionDefinition 인터페이스.
트랜잭션의 동작방식에 영향을 줄 수 있는 네 가지 속성을 정의한다.
DefualtTransactionDefinition는 구현객체이다.

트랜잭션 전파 transaction propagation.
진행 중인 트랜잭션이 있을 때 또는 없을 때 어떻게 동작할 것인가를 결정하는 방식이다.
PROPAGATION_REQUIRED : 진행 중인 트랜잭션이 없으면 새로 만들고, 있으면 참여한다.
PROPAGATION_REQUIRESS_NEW : 항상 새로운 트랜잭션을 시작한다.
PROPAGATION_NOT_SUPPORTED : 트랜잭션 없이 동작한다 - 특정 메소드만 제외할 때 사용.

격리수준 isolation level.
서버환경에서는 여러 개의 트랜잭션이 동시에 진행될 수 있다.
기본적으로 DB에 설정되어 있지만 JDBC 드라이버나 DataSource 등에서 재설정 가능.
ISOLATION_DEFAULT : DataSource에 설정되어 있는 디폴트 격리수준을 따른다. ( 기본설정 )

제한시간 timeout.
트랜잭션을 수행하는 제한시간을 설정할 수 있다.
트랜잭션을 직접 시작할 수 있는 PROPAGATION_REQUIRED 등과 같이 사용해야 의미가 있다.
기본설정은 '제한시간 없다' 이다.

읽기전용 read only.
트랜잭션 내에서 데이터를 조작하는 시도를 막아줄 수 있다.

TransactionInterceptor.
PlatformTransactionManager와 Properties 2가지 타입의 프로퍼티를 갖고 있다.

Properties.
Properties에 하나의 변수로 transactionAttributes를 가진다.
transactionAttributes는 메소드 패턴과 트랜잭션 속성을 키와 값으로 갖는 콜렉션이다.

transactionAttributes.
PROPAGATION_NAME, ISOLATION_NAME, readOnly, timeout_NNNN, -Exception, +Exception
트랜잭션 전파 항목만 필수이고 나머지는 생략가능하다 - 생략하면 디폴트 속성이 부여.
-Exception은 체크 예외중 롤백 대상으로 추가할 것을 의미.
+Exception은 런타임 예외중에 롤백시키지 않을 것을 의미.

트랜잭션 주의사항.
트랜잭션 속성 중 readOnly나 timeout 등은 트랜잭션이 처음 시작될 때가 아니라면 적용되지 않는다.
PROPAGATION_REQUIRED를 통해 다른 메소드에서 호출 시 readOnly도 수정/삭제 가능.

tx 네임스페이스.
TransactionIntercaptor 타입의 어드바이스 빈과 트랜잭션 관련 속성 정보를 따로 분리할 수 있다.

트랜잭션 설정 팁.
트랜잭션 포인트컷 표현식은 타입 패턴이나 빈 이름을 이용한다.
공통된 메소드 이름 규칙을 통해 최소한의 트랜잭션 어드바이스와 속성을 정의한다.
프록시 방식 AOP는 같은 타깃 오브젝트 내의 메소드를 호출할 때 트랜잭션 적용이 되지 않는다.

TransientDataAccessResourceException.
readOnly로 설정한 트랜잭션에 읽기 외에 다른 실행을 하면 발생하는 Exception.
DataAccessException의 한 종류로 일시적인 예외를 만났을 발생.



 # 애노테이션 트랜잭션 속성과 포인트컷.

@Transactional.
@Transactional은 트랜잭션 속성을 정의하고, 포인트컷의 자동등록에도 사용.
@Transactional이 부여된 모든 오브젝트를 자동으로 타겟 오브젝트로 인식한다.
이때 사용되는 포인트컷은 TransactionAttributeSourcePointcut이다.
TransactionAttributeSourcePointcut은 스스로 표현식과 같은 선정기준을 갖고 있진 않다.

@Transactional 대체 정책.
타겟 클래스의 메소드에 @Transactional이 있는지 확인.
타겟 클래스에 @Transactional이 있는지 확인.
타겟 인터페이스의 메소드에 @Transactional이 있는지 확인.
타겟 인터페이스에 @Transactional이 있는지 확인.

대체 정책 주의사항.
프록시 AOP 방식에서는 인터페이스에 @Transactional을 많이 사용한다.
프록시 AOP 방식이 아닌 경우 인터페이스에 @Transactional을 사용하면 적용이 되지 않는다.

트랜잭션 어노테이션 사용 설정.
<tx:annotation-driven />



 # 트랜잭션 지원 테스트.

선언적 트랜잭션 declarative transaction.
AOP를 이용해 코드 외부에서 트랜잭션의 기능을 부여해주고 속성을 지정하는 방법.

프로그램에 의한 트랜잭션 programmatic transaction.
개별 데이터 기술의 트랜잭션 API를 사용해 직접 코드 안에서 사용하는 방법.

PlatformTransactionManager.
PlatformTransactionManager를 구현한 클래스를 통해 트랜잭션 기술의 상관없이 제어가 가능.

트랜잭션 동기화.
시작된 트랜잭션 정보를 저장소에 보관해뒀다가 DAO에서 공유.
트랜잭션 전파를 가능하게 만든 기술이다.

롤백 테스트.
DB 작업이 포함된 테스트가 수행돼도 DB에 영향을 주지 않기 때문에 장점이 많다.
테스트를 할 때마다 테스트 데이터를 초기화하는 번거로움을 없애준다.

테스트에서 @Transactional.
테스트 클래스 또는 메소드에 @Transactional을 부여하면 테스트 메소드에 자동 설정된다.
테스트에 적용된 @Transactional은 트랜잭션을 강제 롤백시키도록 설정되어 있다.
@Rollback( false )를 통해 commit을 할 수 있게 바꿀 수 있다. ( 메소드에만 적용 가능 )

@TransactionConfiguration.
Transaction에 관련된 설정을 바꿀 수 있다.
클래스에 붙여서 defaultRollback=flase를 통해 모든 메소드를 commit할 수 있게 바꿀 수 있다.

@NotTransactional.
트랜잭션을 사용하지 않을 메소드에 붙여준다.
스프링 3.0에서 제거 대상이 되었다. ( 트랜잭션 테스트와 비트랜잭션 테스트를 클래스로 구분 )

테스트 주의사항.
테스트는 어떤 경우에도 서로 의존하면 안 된다.




