
 상속을 통한 재사용.
 214 ~ 237page.



 # 상속이란 ? 

상속에 대한 접근법 - 일반화 / 특수화.
부모 클래스로 일반적인 기능을 구현하고, 자식 클래스로 목적에 특화된 기능을 구현.
이런 경우 자식 클래스는 부모 클래스의 일종이다.

상속에 대한 접근법 - 공통 부분을 추출.
복수 클래스의 공통 부분을 부모 클래스로서 추출하면 좋다.
이런 경우 자식 클래스는 부모 클래스의 일종이 아니다.

상속에 대한 접근법 - 차분 구현.
상속 후 변경된 부분만을 구현하면 효율이 좋다.
이런 경우 자식 클래스는 부모 클래스의 일종이 아니다.

상속은 양날의 칼.
상속이라는 시스템은 높은 자유도가 있다.
상속을 불필요하게 많이 사용하면 코드가 복잡해진다.
상속을 통해 트리구조로 된 클래스가 있으면 변수나 메소드를 확인하기 위해 많은 코드를 확인해야된다.

리스코프의 치환 원칙.
부모 클래스의 항상 성립하는 조건이 있으면, 자식 클래스도 항상 성립해야된다.



 # 다중 상속.

하나의 사물을 복수로 분류.
현실 세계에서도 하나의 객체는 여러가지 분류로 나눌 수 있다.
프로그래밍 언어에서도 하나의 클래스는 복수의 클래스를 상속할 수 있어야 한다.

코드 재사용에 편리한 다중 상속.
여러 가지 기능을 모두 사용하는 클래스를 쉽게 만들기 위해서 두 가지 이상의 상속을 사용.



 # 다중 상속의 문제점 - 거듭되는 충돌.

문제점.
상속받은 부모 클래스에 똑같은 이름의 메소드가 있을 경우 충돌 문제가 발생.

해결책 1 : 다중 상속을 금지한다.
Java - 다중 상속을 금지했다.
위임 delegation - 클래스 안에 상속하지 않고, 클래스를 만들어버렸다. ( 포함 )
인터페이스 - 인터페이스는 다중 상속이 가능. ( 이름이 같아도 구현은 클래스에서 하기 때문 )

해결책 2 : 메소드 해결 순서를 고민한다.
상속한 부모 클래스 탐색 순서를 정해준다.

깊이 우선 탐색의 문제점.
마름모 형태의 상속관계에서 메소드 오버라이딩하면 문제가 발생한다.

C3 선형화로 순서를 정한다.
부모 클래스는 자식 클래스보다 먼저 탐색되지 않는다.
어떤 클래스가 복수의 부모 클래스를 상속하고 있으면 먼저 만들어진 것이 우선된다.

해결책 3 : 처리를 섞는다.
재사용하고 싶은 기능만을 모은 작은 클래스를 만들어서 상속한다. ( Mix - in )

해결책 4 : 트레이트.
트레이트는 메소드의 묶음을 의미한다.
재사용 단위라는 역할에 특화된 보다 작은 구조 트레이트를 만드는 것이 좋다.

정리.
클래스는 재사용 단위, 인스턴스 생성기 크게 2가지 역할을 가지고 있다.
상속에는 여러가지 문제점들이 있고 다양한 해결 방식을 가진다.






