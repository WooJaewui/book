
 처리 흐름 제어.
 30 ~ 40page.



 # if가 탄생하기 전.

if는 왜 있는 걸까 ?
어셈블리어는 if문이 없다.
어떠한 조건이 맞으면 jump라는 방식으로 어셈블리어는 if문을 대신한다.

if-else는 왜 있는 걸까 ?
어셈블리어 기준으로 조건1이 맞으면( if true ) a로 jump하고 
조건2가 맞으면( if else true ) b로 jump하고 틀리면( else ) c로 jump.

if-else 장점.
어셈블리어의 jump보다 훨씬 가독성이 좋은 방식으로 표현하기 위해 if-else 문법이 만들어졌다.



 # while, 반복되는 if를 읽기 쉽게 표현.

while문을 사용하지 않는 방법.
조건을 만족하지 않으면 조건문 직전으로 점프하고, 만족하면 END_LOOP( break )로 점프한다.

for문을 사용하지 않는 방법.
for문을 while문으로 변형해서 while문과 같은 방식으로 점프하여 조건에 따라 END_LOOP한다.

foreach, 처리 대상으로 반복 제어.
예 - Collections의 각 요소의 숫자만큼 반복한다.

정리.
if문, 반복문 사용없이도 똑같은 프로그램을 짤 수 있지만, 코드의 가독성을 위해 문법이 탄생했다.






