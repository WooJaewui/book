
 함수.
 42 ~ 57page.



 # 함수의 역할.

이해.
코드가 함수로 나눠져 있는 것은 큰 조직이 부서로 나눠져 있는 것과 닮았다.
소스 코드가 많아지면 전체를 파악하기 어렵기 때문에, 하나의 그룹으로 묶어서 이름을 붙인 것이 함수이다.

재사용.
함수를 만드는 것은 작은 부품을 조립해서 큰 부품을 만드는 것과 비슷하다.
함수에 내부적으로 어떠한 코드가 작성되어있는지 이해하지 못해도 이름을 통해 기능을 이해할 수 있다.

프로그램 재사용의 특징.
소스 코드의 양을 줄일 수 있다.
소스 코드의 수정에 유리하다.
소스 코드를 읽는 사람이 중복된 내용을 읽을 필요가 없어진다.



 # 돌아가는 명령.

함수의 탄생.
함수를 호출하면 함수를 작성한 위치로 점프한 후 실행하고, 실행이 끝나면 다시 원래 위치로 돌아온다.

스택.
스택의 머리는 마지막에 넣은 데이터가 어딘지 기록해두는 메모리 위치를 정한다.
스택에 데이터를 저장할 때는 스택 머리 주소 + 1씩 하면서 위치 기록한다.
스택에 데이터를 꺼낼 때는 스택 머리 주소 - 1씩 하면서 위치 기록을 찾아간다.



 # 재귀 호출.

내포 구조 데이터의 효율적 처리.
어떤 처리를 하고 있는 도중에 동일한 처리를 다른 대상에 대해 실행한다. ( nesting 처리 )

내포 구조를 다루는 방법.
배열안에 배열이 있는 형태 [ 1,2, [ 3, 4 ], 5 ] 와 같은 형태는 이중 for문 등을 통해 결과값을 더할 수 있다.

재귀 호출의 처리 흐름.
[ 1, 2 [ 3, 4 ], 5 ]를 모두 더하기 위해서는 배열의 합을 구하는 for문의 재귀 호출을 통해 구할 수 있다.
1. 배열의 숫자가 int일 때 더하는 for문의 함수를 실행하여 1,2를 더한다.
2. [ 3, 4 ]를 만나면 int가 아니기 때문에 for문을 또 실행한다.
3. [ 3, 4 ]를 더한 값 7과 [ 1, 2, 5 ] 를 더한 8을 더해서 15가 된다.

정리.
비슷한 처리를 반복해서 사용하는 소스 코드의 반복을 줄이기 위해 만들어졌다.
함수의 이름을 명확하게 지으면 함수내부에 작성한 코드의 기능을 이해하기 쉽다.
재귀함수는 내포 구조로 된 데이터를 다루기에 적합한 기법이다.





