
 기본적인 리팩터링(1).



 # 함수 추출하기 Extract Function.

코드를 언제 함수로 묶어야 할지에 대한 견해.
길이 : 로직이 일정한 길이를 넘으면 하나의 함수로 독립시킨다. 
재사용성 : 두 번 이상 사용될 코드는 함수로 만든다.
목적과 구현을 분리 : 코드를 보고 무슨 일을 하는지 파악하는데 오래걸린다면 함수로 묶고 이름으로 표현.

함수 추출하기 절차.
함수를 새로 만들고 목적을 잘 드러내는 이름을 붙인다. ( 무엇을!! )
추출할 코드를 원본 함수에서 복사하여 새 함수에 붙여넣는다.
추출한 코드 중 원본 함수의 의존하고 있는 변수가 있는지 확인한다. 있다면 매개변수로 전달한다.
변수를 다 처리했다면 컴파일한다.
원본 함수에서 새로 만든 함수를 호출하는 코드로 바꾼다.
테스트한다.
다른 코드에서 방금 추출한 것과 비슷한 코드가 없는지 살핀다. 있다면 바꿀수 있는지 검토한다.



 # 함수 인라인하기 Inline Function.

설명.
함수 본문이 이름만큼 명확한 경우 함수를 제거하고, 함수 본문을 그대로 사용한다.

함수 인라인 절차.
다형 메소드인지 확인한다. ( 오버라이드하는 메소드는 인라인할 수 없다 )
인라인할 함수를 호출하는 곳을 모두 찾는다.
각 호출문을 함수 본문으로 교체한다.
하나씩 교체할 때마다 테스트한다.
함수를 삭제한다.



 # 변수 추출하기 Extract Variable.

설명.
표현식( 연산 )이 너무 길고 복잡할 때, 지역변수를 통해 표현식( 연산 )을 나누어서 표현해준다.
변수이름을 잘 지어야된다.

변수 추출하기 절차.
추출하려는 표현식에 부작용은 없는지 확인한다.
불변 변수를 하나 선언하고 이름을 붙일 표현식의 복제본을 대입한다.
원본 표현식을 새로 만든 변수로 교체한다.
테스트한다.
표현식을 여러 곳에서 사용한다면 각각을 새로 만든 변수로 교체한다. 변수로 교체할 때마다 테스트한다.



 # 함수 선언 바꾸기 Change Function Declaration.

함수에 대한 이해.
함수는 프로그램을 작은 부분으로 나누는 주된 수단이다.
함수 선언은 각 부분이 서로 맞물리는 방식을 표현하며, 시스템의 구성 요소를 조립하는 연결부 역할을 한다. 
함수 매개변수는 외부 세계와 어우러지는 방식을 정의한다.
함수 매개변수는 딱 필요한 만큼의 데이터만 입력 받는다.

함수 선언 바꾸기 간단한 절차.
먼저 함수 본문에서 제거 대상 매개변수를 참조하는 곳은 없는지 확인한다.
메서드 선언을 원하는 형태로 바꾼다.
기존 메서드 선언을 참조하는 부분을 모두 찾아서 바뀐 형태로 수정한다.
테스트한다.

함수 선언 바꾸기 마이그레이션 절차.
이어지는 추출 단계를 수월하게 만들어야 한다면 함수의 본문을 적절히 리팩터링한다.
함수 본문을 새로운 함수로 추출한다.
추출한 함수에 매개변수를 추가해야 한다면 '간단한 절차'를 따라 추가한다.
테스트한다.
기존 함수를 인라인한다.
이름을 임시로 붙여뒀다면 함수 선언 바꾸기를 한 번 더 적용해서 원래 이름으로 되돌린다.
테스트한다.




