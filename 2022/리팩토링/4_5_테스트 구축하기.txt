
 테스트 구축하기.



 # 자가 테스트 코드의 가치.

자가 테스트.
모든 테스트를 완전히 자동화하고 그 결과까지 스스로 감사하게 만들자.

테스트 주도 개발 TDD Test-Driven Development.
테스트부터 작성하는 습관을 바탕으로 만든 기법이다.



 # 첫 번째 테스트.

테스트 설계.
테스트에 필요한 데이터와 객체를 뜻하는 픽스처 fixture를 설정한다.
픽스처의 속성들을 검증한다.

테스트 진행.
실패해야 할 상황에서는 반드시 실패하게 만들자.
작성 중인 코드는 몇 분 간격으로 테스트하고, 하루에 한 번은 전체 테스트를 하자.



 # 테스트 추가하기.

테스트 추가.
테스트는 위험 요인을 중심으로 작성해야 한다.
완벽하게 만드느라 테스트를 수행하지 못하느니, 불완전한 테스트라도 작성해 실행하는 게 낫다.
테스트의 기능을 확인하기 위해 작성 후에는 일부러 틀린 값을 넣어보자.

경계 조건 검사하기.
문제가 생길 가능성이 있는 경계 조건을 생각해보고 그 부분을 집중적으로 테스트하자.
내가 만든 테스트 프로그램에 오류를 발생하도록 노력해보자.

테스트 작성 마음가짐.
어차피 모든 버그를 잡아낼 수는 없다고 생각하여 테스트를 작성하지 않는다면
대다수의 버그를 잡을 수 있는 기회를 날리는 셈이다.
아무리 많은 테스트를 수행해도 완벽한 프로그램을 만들 수는 없다.
너무 많은 테스트를 작성하기보다는 위험한 부분에 집중해서 테스트를 만든다.
버그 리포트를 받으면 가장 먼저 그 버그를 드러내는 단위 테스트부터 작성하자.



 # 리팩터링 카탈로그 보는 법.

개요.
리팩터링 전후로 코드가 어떻게 달라지는지 보여준다.
나중에 다시 찾아볼 때 이 기법이 어느 것인지 쉽게 떠올리기 위한 것.

절차.
리팩터링의 구체적인 단계를 잊지 않도록 기록해둔 것.
해당 리팩터링을 알고 있지만 구체적인 진행순서가 기억나지 않을 때 참고.

예시.
간단한 사례.







