
 기본적인 리팩터링(2)



 # 변수 캡슐화하기 Encapsulate Variable.

절차.
변수로의 접근과 갱신을 전담하는 캡슐화 함수들을 만든다.
정적 검사를 수행한다.
변수를 직접 참조하던 부분을 모두 적절한 캡슐화 함수 호출로 바꾼다. 바꿀 때마다 테스트.
변수의 접근 범위를 제한한다.
테스트한다.
변수 값이 레코드라면 레코드 캡슐화하기를 적용할지 고려해본다.



 # 변수 이름 바꾸기 Rename Variable.

설명.
명확한 프로그래밍의 핵심은 이름짓기이다.

절차.
폭넓게 쓰이는 변수라면 변수 캡슐화하기를 고려한다.
이름을 바꿀 변수를 참조하는 곳을 모두 찾아서, 하나씩 변경한다.
테스트한다.



 # 매개변수 객체 만들기 Introduce Parameter Object.

설명.
데이터 뭉치를 데이터 구조로 묶으면 데이터 사이의 관계가 명확해진다.

절차.
적당한 데이터 구조가 아직 마련되어 있지 않다면 새로 만든다. ( Vo 클래스 등 )
테스트한다.
함수 선언 바꾸기로 새 데이터 구조를 매개변수로 추가한다.
테스트한다.
함수 호출 시 새로운 데이터 구조 인스턴스를 넘기도록 수정한다. 수정할때마다 테스트.
기존 매개변수를 사용하던 코드를 새 데이터 구조의 원소를 사용하도록 바꾼다.
다 바꿨다면 기존 매개변수를 제거하고 테스트한다.



 # 여러 함수를 클래스로 묶기 Combine Functions into Class.

설명.
공통 데이터를 중심으로 작동하는 함수 무리는 클래스로 묶어주어 공통 환경을 더 명확하게 표현.

절차.
함수들이 공유하는 공통 데이터 레코드를 캡슐화한다.
공통 레코드를 사용하는 함수 각각을 새 클래스로 옮긴다.
데이터를 조작하는 로직들은 함수로 추출해서 새 클래스로 옮긴다.



 # 단계 쪼개기 Split Phase.

설명.
서로 다른 두 대상을 한꺼번에 다루는 코드를 발견하면 각각 별개 모듈로 나눈다.

절차.
두 번째 단계에 해당하는 코드를 독립 함수로 추출한다.
테스트한다.
중간 데이터 구조를 만들어서 앞에서 추출한 함수의 인수로 추가한다.
테스트한다.
추출한 두 번째 단계 함수의 매개변수를 하나씩 검토한다. 
그 중 첫 번째 단계에서 사용되는 것은 중간 데이터 구조로 옮긴다. 옮길 때마다 테스트.
첫 번째 단계 코드를 함수로 추출하면서 중간 데이터 구조를 반환하도록 만든다.




