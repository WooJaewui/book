
 리팩터링 : 첫번째 예시.



 # 리팩터링 원칙.

원칙.
프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면,
먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서 원하는 기능을 추가한다.

리팩터링의 첫 단계.
리팩터링하기 전에 제대로 된 테스트부터 마련한다.
테스트는 반드시 자가진단하도록 만든다. ( 시간이 너무 오래 걸린다 )



 # statement( ) 함수 쪼개기.

설명.
statement( )처럼 긴 함수를 리팩터링할 때는 먼저 전체 동작을 각각의 부분으로 나눌 수 있는 지점을 찾는다.
나눌 수 있는 지점을 찾았으면, 새로운 함수를 만들어준다. ( 함수 이름은 동작에 대한 설명을 적는다 )
새로운 함수로 빼냈을 때 새 함수에서 곧바로 사용할 수 없는 변수가 있는지 확인한다.

팁.
리팩토링은 프로그램 수정을 작은 단계로 나눠서 중간에 테스트하면서 진행한다.
아무리 간단한 수정이라도 리팩터링 후에는 항상 테스트하는 습관을 들이자.

하나의 리팩터링이 문제없이 끝낼 때마다 커밋한다.
롤백할 구간을 계속 생성해서 리팩터링 오류가 발생했을 때 쉽게 롤백해서 다시 작성한다.

다른 사람이 이해하도록 소스코드를 작성해라.
이름에 일관성을 해치지 않는 선에서 최대한 많은 정보를 표시해라.

불필요한 변수 제거하기.
여러번 사용하지 않는 함수의 결과값은 변수로 담지 말고 직접 사용한다.



 # 반복문 쪼개기.

과정.
반복문 쪼개기로 변수 값을 누적시키는 부분을 분리한다.
문장 슬라이드하기로 변수 초기화 문장을 변수 값 누적 코드 바로 앞으로 옮긴다.
함수 추출하기로 반복문 부분을 별도 함수로 추출한다.
기존 함수에 반복문 함수를 대입한다.
변수 인라인하기로 변수를 제거한다.






















