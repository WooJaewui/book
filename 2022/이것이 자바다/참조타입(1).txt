
참조타입


# 데이터 타입의 분류.

1. 기본타입 Primitive type

 1-1. 정수타입.
   - byte.
   - char.
   - short.
   - int.
   - long.

 1-2. 실수타입.
   - float. 
   - double.

 1-3. 논리타입.
   - boolean.

2. 참조타입 reference type.

 class 전체를 의미한다. ( 이미 만들어진 것 + 내가 만든 것 )


 # 메모리 사용 영역.

1. Method 영역.

클래스별로 상수풀( runtime constant pool ), field 데이터, method 데이터, method 코드, constructor 코드 등을 분류해서 저장한다.
Method 영역은 JVM이 시작할 때 생성되고, 모든 스레드가 공유하는 영역이다.

2. Heap 영역.

객체와 배열이 생성되는 영역이다. 힙 영역에서 생성된 객체와 배열은 JVM 스택 영역의 변수나 다른 객체의 필드에서 참조한다.
참조하는 변수나 필드가 없다면 의미없이 메모리를 사용하기 때문에 Garbage Collector를 실행시켜 힙 영역에서 자동으로 제거한다.

3. JVM Thread.

하나의 스택을 가지고 있는 영역.

4. JVM Stack 영역.

스레드마다 하나씩 존재하며 스레드가 시작될 때 할당된다. 추가적인 스레드를 생성하지 않았다면 main 스레드만 존재한다. ( Stack 1 )
메소드를 호출할때마다 Frame을 push하고 메소드가 종료되면 pop하는 동작을 수행한다. 


 # 참조 변수의 ==, !=연산

기본타입의 ==, !=연산 : 변수의 값이 같은지, 아닌지를 조사한다.
참조변수의 ==, !=연산 : 객체 주소 값이 같은지 비교한다.


 # null, nullPointerException.

null : 참조변수타입은 객체를 참조하지 않는다는 뜻으로 null을 가질 수 있고, null 값도 초기값으로 사용할 수 있기 떄문에 스택영역에 생성된다.

NullPointerExcetpion : 아무 객체도 참조하지 않는 참조변수(null)의 메소드나, 변수를 호출할 때 발생하는 Exception이다.


 # String.

1개 이상의 문자를 " "를 통해 String type으로 대입 가능하다.
heap 영역에 Array로 data를 생성한다.
문자열 리터럴이 동일하다면 String 객체를 공유하도록 되어 있다. ( 주소 값이 같다 )
new String("문자열")로 생성한다면 문자열 리터럴값이 같아도 다른 객체주소값을 가진다.


 # String class의 equals( ) 메소드와 == 연산.

String.equals( ) : 주소와 상관없이 문자열의 값을 비교한다. ( class마다 값을 비교하는 variable이 다르다 - 확인 후 사용 )
== : 객체의 주소값 or literal 그 자체의 값을 비교한다.


 # 배열 array.

변수는 하나의 data ( literal )만을 담을 수 있는데, 이러한 단점을 보완하여 여러 개의 data를 담을 수 있는 것이 배열이다.
인덱스 : 배열에 있는 data를 처음부터 끝까지 번호를 붙여 부르는 것이다. 0 ~ n까지 있다. ( 0부터 시작해서 n = 총 갯수-1이다 )


 # 배열 선언.

1. 기본형.
int [ ] arr = new int [ ] { } ;                   

2. 축약형.
int[ ] arr = { data1, data2, data3, ... dataN } 

3. 배열의 길이 지정.
int [ ] arr = new int [ arr.length ] ;                array의 길이를 미리 지정해 놓을 수 있다. ( 모든 data 값이 초기값으로 초기화된다 )

배열도 객체이므로 heap영역에서 생성된다. 
배열도 null로 초기화 가능하다. ( NullPointerException이 발생할 수 있다 )
이미 선언한 배열을, { }를 통해 다시 대입 할 수 없다. ( arr = new int[ ] { new1, new2, ... }로 대입해야 된다 )
메소드의 매개변수가 배열일 경우도 new int[ ] { }를 통해 값을 대입해야 된다.


 # 배열 사용하기.

arr[0] = data1;		index n-1에 저장된 값은 dataN이다.
arr[1] = data2;
......
arr[n-1] = dataN;

arr[2] = newData		지정한 index값에 새로운 data를 대입할 수 있다.


 # type별 초기값.

기본타입(정수) : 0.
기본타입(char) : '\u0000'
기본타입(실수) : 0.0F / 0.0.
기본타입(논리) : flase ( 0 ).
참조타입 (클래스 / 인터페이스) : null.


 # 배열의 길이.

arr.length;        		배열의 길이를 알려준다. ( 인덱스의 수 )
arr.length = 10; ( X ) 	배열의 길이는 읽기 전용 필드이기 때문에 값을 대입할 수 없다.


 # arr.length 활용.

for ( int i=0; i<arr.length; i++){ arr[i] }

for문에서 i < arr.length를 통해 배열의 모든 값을 활용할 수 있다.
index를 초과해서 사용하면 ArrayIndexOutOfBoundsException이 발생한다.


 # String[ ] args 사용.

cmd로 문자를 입력하는 방법이다.
java class 문자1, 문자2, 문자3 ... 문자n.        문자들이 배열로 args에 들어간다.

eclips에서 args배열 이용하는 방법.
Run Configurations -> Arguments -> Program arguments 를 통해서도 문자들을 입력할 수 있다.

문자열로 값을 받기 때문에 정수로 연산하려면 형변환이 필요하다.


 # 다차원 배열.

1. 기본형.
int [ ] [ ] arr = new int [2][3] ;		2행 3열의 2차원 배열.

2. 축약형.
int [ ] [ ] arr = { { 10,20,30 }, {100,200,300} };	2행 2열의 2차원 배열.

arr[0][0] ~ arr[0][2];		ex) 10 ~ 	30	1행의 모든값.
arr[1][0] ~ arr[1][2];		ex) 100 ~300	2행의 모든값.
	
arr[0].length 		1행의 data의 갯수.
arr[1].length		2행의 data의 갯수.
arr[0][0].length		ArrayIndexOutofBoundsException발생. ( 2차원 배열일 경우 값이 무조건 1이기 때문에 )


 # 객체를 참조하는 배열.

String[ ] arr = new String[3];
arr.[0] = "Hello";
arr.[1] = "World";
arr.[2] = new String("Hello");

객체(인스턴스)를 비교할때 주의해서 사용해야된다.

== : 주소값을 비교하는 것. 
equals( ) : class마다 다른 variable을 비교한다. ( 직접 들어가서 확인해보고 필요에 따라 overriding하기 )


 # 배열의 중요한 특징.

한 번 생성하면 크기를 변경할 수 없기 때문에 더 많은 공간이 필요하다면 배열을 새로 만들어야된다. 
원래 배열을 새로운 배열에 복사 후에 나머지 빈 공간은 따로 대입하지 않으면 초기값으로 채워진다. 









