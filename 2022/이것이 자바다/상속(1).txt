
상속.


 # 상속.

정의.
부모클래스의 멤버( 변수 + 클래스 )들을 자식클래스에게 물려주어 코드의 중복을 줄여준다.
( 접근제어자에 따라 멤버들 중에 안 받는 것들도 있고, 생성자, 초기화블럭은 제외된다. )
부모클래스의 멤버를 상속받고 추가적으로 멤버를 구성하기 때문에 
항상 자식클래스가 부모클래스 이상의 멤버를 갖는다. ( 자식클래스가 더 작을 수 없다 )

주의사항.
자식클래스에서 부모클래스를 상속한다.
다중 상속을 허용하지 않는다. ( 여러 개의 부모 클래스를 상속할 수 없다 )
자식 인스턴스를 생성하면, 부모 인스턴스도 생성된다. ( 기본 생성자에 super( )가 있다 )
자식클래스의 변경은 부모클래스의 영향을 미치지 않고 부모클래스의 변경은 자식클래스에 영향을 미칠 수 있다.


 # 메소드 Override.

정의.
부모에게 물려받은 메소드가 자식에게 맞지 않을때, 
자식클래스에서 동일한 메소드를 수정(재정의)하는 것을 의미한다.

주의사항.
구현부가 똑같아야 한다. ( 메소드이름 + 매개변수 )
접근제어자를 더 강하게 오버라이딩 할 수 없다. 
새로운 예외를 throws할 수 없다. 
자식클래스가 부모클래스보다 더 작을 수 없다. ( Override 규칙에 원리 )


 # super( ).

정의.
생성자안에서 사용하며, 부모의 생성자를 통해 부모의 멤버를 초기화할때 사용한다.

사용.
자식클래스 생성자에서 사용시, 맨 윗줄에 사용해야 된다.
자식클래스 생성자에 this( )또는 super( )가 없으면 자동으로 super( )가 들어간다.

주의사항.
this.variable을 통해 부모에게 물려받은 변수를 제어할 순 있지만, 
실제 변수가 부모에게 있어서 가독성이 떨어지는 문제가 있다. ( super를 통해 초기화하자 )
자식인스턴스를 생성하면 super( )가 하나이상 생기기 때문에 부모인스턴스도 생성된다.


 # super.

정의.
super( )를 통해 하나 이상의 인스턴스가 생성되면 그 멤버를 super를 통해 참조해서 사용할 수 있다.

주의사항.
접근제어자에 제한이 걸린 멤버는 super를 통해 사용할 수 없다. ( private은 super로 사용 X )










