클래스


 # 객체 지향 프로그래밍 ( OOP : Object Oriented Programming )

부품에 해당되는 객체들을 먼저 만들고, 이걸들을 하나씩 조립해서 프로그래밍을 만드는 것이다.


 # 객체 Object.

물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성을 가지고 있고 다른 것과 식별 가능한 것.

field : 이 책에서 표현하는 variable의 다른 말.
method : 객체지향프로그래밍에서 class의 function이다.
객체모델링 : 현실 세계의 객체를 소프트웨어 객체로 설계하는 것을 말한다.


 # 객체의 상호작용.

각각 독립적으로 존재하는 객체들의 메소드호출과 data 반환(리턴)을 통해 서로 상호작용( 응답과 반응 )을 한다.


 # 클래스의 중요한 특성.

1. 캡슐화 Encapsulation.
 
캡슐화 : 외부 class에서 다른 class를 객체생성했을때, 중요한 내부정보를 외부 class가 컨트롤 할 수 없도록 하는 것이다.
변수(필드)와 메소드를 외부의 잘못된 사용으로 인해 중요 data가 손상되지 않도록 보호하기 위해서 사용한다.
접근 제어자 ( 접근 제한자 )Access Modifier를 이용해서 변수와 메소드의 접근을 구별해준다.

2. 상속 Inheritance.

상위클래스(부모클래스)의 변수, 메소드를 하위클래스(자식클래스)가 사용할 수 있도록 하는 것이다.
자식클래스를 쉽게 설계하도록 도와주고, 반복된 코드의 중복을 줄여준다.

3. 다형성 Polymorphism.

하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.
다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다. 
부모타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.


 # 인스턴스.

class를 통해 만든 object를 인스턴스(instance)라고 부른다.


 # 객체 지향 프로그래밍 개발의 3단계

1. 클래스 설계 
2. 클래스를 통해 인스턴스 객체 생성.
3. 인스턴스 객체를 활용.


 # 클래스의 이름.

작성규칙.
1. 하나 이상의 문자로 이루어져야 한다.
2. 첫 번째 글자는 숫자가 올 수 없다.
3. '$', '_' 외의 특수 문자는 사용할 수 없다.
4. 자바 키워드는 사용할 수 없다. (예약어)

추가사항.
ClassName은 관례적으로 단어의 첫 글자들을 대문자로 표시한다. ( 꼭 지키지는 않아도 된다 )


 # class생성 유의사항.

클래스이름은 파일이름과 같아야한다. ( 두 개 이상일 경우 하나만 같으면 된다 )
파일이름과 같은 클래스에서만 public 제어자를 붙일 수 있다.
main method는 하나의 class에서만 사용가능하다. ( public class에서만 사용가능 ) 
두 개 이상의 클래스가 선언된 소스 파일을 컴파일하면 class파일은 클래스를 선언한 개수만큼 생긴다.


 # class의 구성멤버.

1. Field ( Variable )
 - 초기값이 존재하는데, 지역변수는 초기값이 존재하지 않는다.
 - 클래스 내부에서는 그냥 사용하면 되고, 외부 클래스에서 사용할 경우 Class.variable로 사용한다.

2. 생성자 ( Constructor )
 - 반드시 하나 이상의 생성자를 가지고 있다. 생성자를 따로 만들지 않으면 기본생성자가 존재한다.
 - 기본생성자 : 매개변수로 아무것도 받지 않는 생성자. ( 다른 생성자를 만들면 기본생성자도 같이 만들어주자 )
 - 선언부 + 구현부(실행블록). 
 - 오버로딩(OverLoading) : 생성자명은 클래스이름으로 같지만, 매개변수의 숫자 또는 타입이 다르고, 구현부가 다를 수 있다.
 - this.variable : 클래스 내부의 변수를 의미하는 것으로, 매개변수의 이름과 클래스의 전역변수의 이름이 같을 때 사용한다.
 - this( ) : 클래스의 다른 생성자를 호출하는 것이다. ( 항상 생성자의 첫번째 줄에 위치한다 )

3. 메소드 ( method )
 - 선언부 + 구현부(실행블록).
 - return type : 메소드가 실행 후 리턴하는 값의 타입을 말한다. ( 리턴값이 없을 수도 있다 )
 - 리턴값이 없으면 method( ), 리턴값이 있으면 type a = method( ). ( 리턴값을 변수의 담아야된다 )
 - return문이 실행되면 method는 즉시 종료된다.
 - void method에도 return을 사용할 수 있다 ( return; )
 - 매개변수 : 메소드가 필요한 데이터를 외부로부터 받아들일때 사용한다.
 - 매개변수의 갯수를 모를 경우는 method(type ... values){ } 를 하면 된다. ( 배열 타입으로 저장된다 )
 
4. 생각정리.
 - double a = 10;  큰 타입에 변수에는 작은타입의 값이 자동형변환되서 들어간다. 
 - 반대로 작은 타입에 변수에는 큰 타입의 값을 넣으려면 강제형변환을 해줘야된다.
 - class는 static이 없고, static method를 사용할때는 인스턴스 생성없이, Class.method( )한다. ( 관례적 )


229page. 







