
 중첩 - 


 # 중첩클래스 Nested Class.

용어설명.

클래스 내부에 다른 클래스를 선언하는 것을 말하며, 이 때 내부에 선언한 클래스를 '중첩클래스' 라한다.

장점.

1. 두 클래스의 멤버를 쉽게 접근할 수 있다.
2. 내부에 클래스를 선엄함으로 코드의 가독성을 높일 수 있다.

사용.
class ClassName {  
       class NestedClassName { 
	 포함클래스 멤버.
       }
       클래스 멤버.
} 

종류.

1. 멤버클래스.
 1-1. 인스턴스 클래스 : 외부객체를 생성하고 내부객체를 생성해야 사용할 수 있는 중첩 클래스.
 1-2. 스태틱 클래스 : 외부객체 생성없이 바로 사용할 수 있는 중첩 클래스. 
                          ( 스태틱 클래스 안에 모든 멤버는 스태틱이다 )

2. 로컬클래스 : { } 안에 생성된 class.
                   method( )가 실행할 때만 사용할 수 있는 중첩클래스.



 # 중첩 로컬클래스.

외부 클래스의 메소드 안에서 선언된 중첩클래스를 로컬클래스라고 한다.
접속제어자와 static을 붙일 수 없다. ( 메소드 내부에서만 사용되기 때문에 접근 제어자 X )


 # 중첩 클래스의 사용 제한.

static, instance 여부에 따라 사용 제한이 생긴다.

예시.
스태틱 메소드 안에 로컬클래스는 외부에 스태틱 멤버만 불러서 사용할 수 있다.
중첩 인스턴스 클래스는 스태틱 멤버 객체 생성할 수 없다.
중첩 스태틱 클래스는 아무대서나 객체 생성할 수 있다.



 # 로컬클래스 사용 제한.

원리.
참조변수는 지역 변수라 사라지지만, 생성한 객체는 사라지지 않는다. ( 문제 )
이 문제를 해결하기 위해 컴파일러는 로컬클래스의 변수를 클래스 내부에 final로 저장한다.

설명.
메소드 안에 있는 지역변수들을 내부클래스에서 사용할때 로컬클래스 안에 저장되는 방식.
1. final이 있는 변수 : 사용된 메소드 안에 저장.
2. final이 없는 변수 : 로컬클래스의 전역변수로 저장.

추가적인 설명.
자바 7이전에는 final을 꼭 붙여줘야지만 내부 class에 변수로 저장되었지만,
자바 8이후부터는 그냥 변수를 사용해도 내부 class에서 final 변수로 저장된다.


 # 중첩클래스 this.

중첩클래스에서 this.변수, this.메소드는 중첩클래스의 멤버이다.
중첩클래스에서 외부클래스의 멤버를 사용하려면 OuterClass.this.변수 또는 OuterClass.this.메소드이다.


 # 중첩 인터페이스.

클래스 내부에서 선언해서 클래스와 밀접한 관계를 가지는 구현 클래스를 만들기 위해서이다.

중첩 인터페이스 상속.
OtherClass implement OuterClass.Interface. 



 # 익명 자식 객체 생성.

선언.
ParentClass var = new ParentClass(매개값,...) { 멤버 };

사용.
ParentClass.var 또는 ParentClass.method( )

설명.
재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용할 경우 사용한다.
일반적인 익명 객체와 성질은 거의 똑같다.
{ }에는 부모의 멤버를 오버라이딩하거나 새로운 멤버를 적는다.
생성자는 작성하지 않는다.

주의사항.
새롭게 선언된 변수들은 { } 안에서만 사용된다. ( 참조변수가 부모타입이라 사용 X )
부모클래스에 있는 변수들은 오버라이딩 해서 사용할 수 있다.
{ }; 붙이기.



 # 익명 구현 객체 생성.

선언.
ParentInterface var = new ParentInterface( ) { 멤버 };

사용.
ParentInterface.var 또는 ParentInterface.method( )

설명.
재사용되지 않고, 오로지 해당 필드와 변수의 초기값으로만 사용할 경우 사용한다.
일반적인 익명 구현 객체와 성질은 거의 똑같다.
모든 추상 메소드를 구현해야된다.



 # 익명 객체의 로컬 변수 사용.

로컬 변수를 사용한 익명 객체는 final이 붙어 있으면 사용한 method의 지역변수로 선언되고,
final이 아닌 변수는 익명 객체의 final 변수가 된다.
( 자바 8 이후부터 컴파일이 알아서 붙여준다 )


 






















