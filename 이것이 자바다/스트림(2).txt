

  스트림(2) - 


 # 중간 처리 단계.

설명.
Stream에 중간에 data를 가공하는 역할을 한다. ( 최종 처리 단계가 있어야 실행한다 )
중간 처리 단계는 모두 Stream을 반환한다.

메소드.
distinct( ) : 중복을 제거한다.
filter( Predicate ) : Predicate가 true인 것만 선별한다.
filterMap( Function ) : Function에 조건에 맞게 data를 선별한다.
map( Function ) : Function에 조건에 맞게 data를 변경한다.
sorted( ) : Comparable 구현 방법에 따라 정렬.
sorted( Comparator<T> ) : Comparator에 따라 정렬.
peek( Function ) : 요소 전체를 반복하는 역할을 한다. 




 # 최종 처리 단계

설명.
Stream에서 중간단계를 통해 가공된 data를 출력/평균 등의 결과를 나타내는 역할을 한다.

메소드.
forEach( Cumsumer ) : 요소 전체를 반복하는 역할을 한다.
XXX Match( Predicate ) : Stream에 요소가 Predicate에 적합한지 확인한다. 
sum( ) : 모든 요소의 합.
count( ) : 모든 요소의 갯수.

Optional<T>를 반환하는 메소드.
average( ) : 모든 요소의 평균.
max( ) : 요소의 최대값.
min( ) : 요소의 최솟값.

Collection을 반환하는 메소드.
collect( Collection<T,A,R> ) : T = 어떤 요소타입을 선택할 것인지, A = 누적기, R = 반환타입.



 # Optional Class.

설명.
스트림을 저장할 수 있는 클래스 중 하나로써, 스트림의 결과값을 저장하고 가공할 수 있다.

기능.
1. 집계 값을 저장
2. 집계 값이 존재하지 않을 경우 default 값을 설정
3. 집계 값을 Consumer로 처리. ( 재가공 )

메소드.
isPresent( ) : 값 저장 여부 확인.
orElse( T ) : 값이 저장되어 있지 않을 경우 디폴트 값 지정.
ifPresent( Consumer ) : 값이 저장되어 있을 경우 Consumer에서 처리한다.



 # 병렬처리.

용어.
동시성 Concurrency : 멀티 작업을 위해 작업을 번갈아가면서 실행하는 경우.
병렬성 Parallelism : 멀티 작업을 위해 멀티 코어를 이용해서 동시에 실행하는 경우.

데이터의 병렬성.
전체 데이터를 쪼개서 서브 데이터들로 만들어서 데이터를 병렬 처리해서 빠르게 작업하는 것.

작업 병렬성.
서로 다른 작업을 병렬 처리하는 것을 의미한다. ( 대표적인 예 - Web Server ) 



 # 포크조인 프레임워크.

원리.
1. 포크 단계에서 전체 데이터를 서브 데이터로 분리한다.
2. 서브 데이터를 멀티 쓰레드, 멀티 코어에서 병렬 처리한다.
3. 조인 단계에서 처리된 작업 결과를 결합한다.

추가설명.
포크 조인 기능 이외에 ForkJoinPool - 쓰레드풀을 제공한다. ( 관리는 따로 해야 된다 )



 # 병렬 처리 성능.

병렬 처리에 영향을 미치는 요인.
1. 요소의 수와 요소당 처리 시간 : 적고 짧으면 순차 처리가 더 좋을 수 있다.
2. 스트림 소스의 종류 : LinkedList, HashSet, TreeSet 등은 분리가 어려워서 병렬 처리가 어려움.
3. 코어의 수 : 코어의 수가 많을 수록 병렬 작업 처리에 유리하다.



 % 823부터 나오는 그룹화 등은 추후에 공부해보기. ( 완벽하게 이해 X ) % 












