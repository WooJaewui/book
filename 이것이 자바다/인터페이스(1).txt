
 인터페이스


 # 인터페이스 원리.

개발코드에서 인터페이스에 메소드를 호출하면 인터페이스 메소드를 오버라이딩한 인스턴스의 메소드가 호출된다.
-> 개발코드는 인스턴스의 내부 구조를 알 필요가 없고 인터페이스의 메소드 이름만 알면 사용가능하다.

사용이유.
개발코드는 그대로 두고, 인터페이스의 자식 인스턴스들만 교체해가면서 사용할 수 있다.



 # 인터페이스 특성.

인스턴스를 생성할 수 없다. ( 생성자를 가지지 않는다 )
변수를 선언할 수 없다.
다중상속이 가능하다. ( 부모가 여러명일 수 있다 )
인터페이스 메소드는 기본적으로 public임으로 클래스에서 메소드를 구현할때 public으로 해야된다.
( 접근제어자를 잘 설정해야된다 )
인터페이스의 추상메소드를 하나라도 구현하지 않으면 상속받은 클래스도 추상클래스가 된다.

1. abstract메소드 : 어떤 매개값이 필요하고, 리턴 타입이 무엇인지만 알려준다. 
                        실제 실행부는 구현객체가 가지고 있다. 
                        public (abstract) type MethodName ( 매개변수 ); => abstract 생략가능.

2. default메소드 : 인터페이스에 선언되지만 호출할 수 없고, 구현객체가 상속받아서 사용한다.

3. static메소드 : '인터페이스.static메소드'로 인터페이스만으로 호출이 가능하다.

4. 일반변수 : 인터페이스 안에 선언은 할 수 있지만, 인스턴스를 생성을 할 수 없고, 
                 super도 사용 할 수 없어서 무의미하다.

5. 상수변수 : 인터페이스 안에 유일하게 선언하고 사용할 수 있는 변수이다.
                 public static final type VARIABLE_NAME = value; ( 대문자로 변수 선언한다 ) 



 # 인터페이스 사용하기.

선언.
public interface InterfaceName { ... } - 인터페이스 선언. ( 클래스 작성과 거의 동일 )

상속.
public class ClassName implements InterfaceName { ... } - 클래스에 인터페이스 상속. ( 다중상속 가능 )

사용.
InterfaceName in = new ClassName  ( 다형성 )
인터페이스의 메소드를 호출하면 인터페이스의 메소드를 오버라이딩한 클래스 메소드를 호출한다.



 # 익명 구현 객체.

원리.
한 번만 사용할 구현 객체를 만들기 위해 class를 작성하는 것의 비효율 때문에 생기게 되었다.

선언.
InterfaceName in = new InterfaceName( ) { method( ) { 구현할 내용 }; } ;

사용.
in.method( );

주의사항.
하나의 실행문이므로 끝에는 ' ; '을 반드시 붙여야한다.
인터페이스에 선언된 모든 추상 메소드들을 구현 해야 된다. 그렇지 않으면 컴파일 에러 발생.
추상 메소드를 구현하지 않으면 추상 객체가 되어 객체 생성이 되지 않는다.
익명 객체의 class파일은 filename$1.class가 된다.



 # 다중 인터페이스.

여러개의 인터페이스를 상속받으면 상속받은 모든 인터페이스의 추상 메소드를 구현해야된다.


 # 인터페이스의 용도.

1. 클래스의 변수.
2. 생성자 또는 메소드의 매개변수.
3. 생성자 또는 메소드의 로컬 변수.



 # 인터페이스의 default method.

원리.
디폴트 메소드는 인터페이스에 선언되지만, 구현 객체를 있어야 사용할 수 있다.

사용.
InterfaceName in = new ClassName( );
in.defaultMethod( );

주의사항.
인터페이스에 선언한 것과 다르게 자식클래스에서 오버라이딩 해서 사용할 수 있다.


 # 인터페이스의 static method.

원리.
static method는 따로 인스턴스 객체 생성없이 바로 사용할 수 있다.

사용.
InterfaceName.staticMethod( );



 # 자동 타입 변환 promotion.

인터페이스 참조변수에 상속받은 객체를 대입하는 것도 결국 promotion이다.
변수의 type과 객체(값)의 type이 일치하지 않은데 대입이 가능하다면 모두 promotion이다.



 # 인터페이스 다형성 매개변수로 활용.

사용.
Interface InterfaceName { public void run( ); }
class implements InterfaceName { public void add( InterfaceName in ) { in.run( ) } }

매개변수로 interface 참조변수를 받아서 메소드를 사용한다.

팁.
구현클래스 타입의 참조변수도 인스턴스 참조변수에 대입이 가능하다. 

























