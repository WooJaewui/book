
참조타입(2) - 169page.


 # 향상된 for문.

for ( type variableName : array ){
	실행할 문장.
}

실행과정.
1. 배열에서 첫번째 값이 있는지 확인하고 값이 있으면 변수에 저장한다.
2. 실행할 문장을 실행한다. 
3. 실행문이 모두 실행되면 배열에서 두번째 값이 있는지 확인하고 값이 있으면 변수에 넣고 다시 반복.

array 있는 모든 값을 앞에 variableName에 저장한다.
array는 배열도 되고, Collections 된다.
for문에 반복 횟수는 배열의 항목 수가 된다. ( array.length )


 # 열거타입

몇 가지로 한정된 값만을 갖는 경우에 사용한다. ex ) 요일 ( 월 ~ 일 )
class처럼 생성해야된다.

열거생성.
public enum EnumName{
	VALUE 1,
	VALUE 2,
	...,
	VALUE n 
}

관례적으로 상수는 모든 글자를 대문자로 사용한다.
EnumName은 Class처럼 FileName과 같아야된다. ( Error가 발생 할 수 있다 )
method로도 생성이 가능하다.

사용하기.
EnumName variable = EnumName.VALUE ;      

EnumName안에 있는 VALUE의 값을 variable이라는 변수에 담는다. 

실행.
System.out.println(variable);

EnumName에 VALUE 값을 출력.
enum는 heap영역에 data를 저장하고 사용하기 때문에,
EnumName.VALUE를 대입하는 모든 참조변수는 하나의 enum data 주소를 가르키고 있는 것이다.
enum은 enum VALUE의 문자열을 내부 데이터로 가지고 있다.
Enum class를 상속받고 있다. ( method를 확인해 볼 것 )
enum 객체도 0~n-1 번까지 VALUE의 값에 번호가 있다. ( ordinal( )를 통해 확인가능 )

메소드 사용.
EnumName[ ] arr = EnumName.VALUE.values( );

values( )는 EnumName에 있는 모든 VALUE들을 배열로 반환한다. ( arr[n]을 통해 사용 )
name( ), ordinal( ), compareTo( ), valueOf( String name ), values( ) 등이 있다. ( 공부하기 )














