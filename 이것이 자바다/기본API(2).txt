
 기본 API(2)

 # System - exit( ).

현재 실행하고 있는 프로세스를 강제 종료시키는 역할을 한다.
exit( int x ) : x는 종료 상태값이다.
x = 0 : 정상 종료.
x != 0 : 비정상 종료.

설명.
exit( )를 실행하면 checkExit( )를 호출해서 종료가 진행되는데,  
checkExit( )를 오버라이딩해서 exit( int x ) x값에 따라 종료를 할지 말지 결정할 수 있다.


 # System - gc( )

쓰레기 코드를 자동으로 소멸시켜주는 메소드이다.
실행하자마자 바로 소멸시키지 않고, 메모리 상태에 따라 일부만 소멸시킨다.
너무 자주 실행시키면 수행되야 할 프로그램의 속도가 떨어질 수 있다.


 # System - currentTimeMillis( ), nanoTime( )

컴퓨터의 시계로부터 현재 시간을 읽어서 밀리세컨드와 나노세컨드 단위로 long값을 리턴한다.
주로 프로그램 시작할때 시간에 사용하고, 끝날때 사용해서 프로그램 실행시간을 확인할때 사용한다.


 # System - getProperty( )

key를 입력하면 Key에 맞는 시스템의 속성값을 반환한다.
System.getProperty( "java.version" );


 # System - getenv( )

환경변수의 이름을 적어주면 그 값을 반환한다.
System.getenv( "JAVA_HOME" );


 # Class - getClass( ), forName( ).

설명.
Class 클래스는 클래스의 이름, 생성자 정보 등의 메타 데이터를 관리하는 클래스이다.

Class객체를 얻기 위한 방법 2가지이다.
Class cla = Object.getClass( ) ;
Class cla = Class.forName( String ClassName );

주의사항.
forName( )은 클래스를 찾지 못하면 ClassNotFoundException 예외를 발생시켜서 예외처리가 필요하다.


 # Class - 리플렉션( 생성자, 필드, 메소드 정보 얻기 )

Constructor[ ] con = Class.getDeclaredConstructors( );
Fields[ ] var = Class.getDeclaredFields( );
Method[ ] meth = Class.getDeclaredMethods( );

생성자, 변수, 메소드를 배열로 반환한다.


 # String의 생성자.

다양한 생성자가 존재한다. ( 배열을 매개변수로 받을 수 있다 )
String str = new String( byte[ ] i );



 # String - charAt( )

char c = str.charAt( int i );
문자열에 특정위치 int값에 있는 문자를 반환한다.



 # String - equals( )

str1.equals( str2 )
String에서 equals( )는 문자열의 값을 비교해서 boolean 값을 반환한다. ( 주소값 X ) 
오버라이딩 해서 원하는 data를 비교할 수 있다.


 # String - getBytes( )

byte[ ] bytes = "문자열".getBytes( "UTF-8" );
문자열을 전송하거나, 문자열을 암호화할 때 문자열을 바이트 배열로 변환한다.
getBytes( )의 매개변수로 Charset을 받는다.


 # String - indexOf( )

int index = str.indexOf( "str" );
String에서 str이 있는 위치에 index값을 반환한다.
-1이 반환되면 문자열이 포함되어 있지 않다는 뜻이다. ( if문에서 활용 가능 )


 # String - length( )

str.length( ) 
문자열의 길이를 반환한다.

 
 # String - replace( )

str.replace( "old_str", "new_str" );
문자열에서 old_str를 new_str로 바꿔준다.


 # String - substring( )

str.substring( start_int, end_int );
문자열에서 시작부분부터 끝부분-1까지 반환한다.


 # String - toLowerCase( ) , toUpperCase( ).

str.toLowerCase( );
str.toUpperCase( );
문자열을 소문자, 대문자로 바꿔준다.
주로 대소문자 상관없이 값을 비교할때 많이 사용한다.


 # String - trim( )

str.trim( )
문자열에 앞뒤로 공백을 제거하고 문자열을 반환한다.
문자열 사이에 띄어쓰기는 제거되지 않는다.


 # String - valueOf( )

String.valueOf( 기본타입 );
기본타입을 매개변수로 받아 String으로 반환한다.


 # String - split( )

String[ ] s = str.split( "정규표현식" );
문자열을 정규표현식으로 잘라서 문자열 배열로 반환한다.


 # StringTokenizer 클래스.

StringTokenizer st = new StringTokenizer( "문자열", "구분자" );
st.countTokens : 남아 있는 토큰의 수.
st.hasMoreTokens : 남아 있는 토큰이 있는지 확인 - boolean값 반환.
st.nextToken( ) : 다음 token을 반환.

문자열을 구분자를 통해 분할해서 token단위로 저장한다.
반복문을 통해 한 번에 토큰을 출력할 수 있다.


 # String / StringBuffer / StringBuilder 클래스.

String : 내부의 문자열을 수정할 수 없다. ( 대입 시 새로운 String 객체가 생성된 것이다 )
StringBuffer : 문자열을 수정할 수 있고, 동기화가 되어 있다. ( 멀티 쓰레드에서 활용 O )
StringBuilder : 문자열을 수정할 수 있고, 동기화가 되지 않는다. ( 단일 쓰레드에서 효율적 ) 


 # StringBuffer의 메소드.

StringBuffer.append( "문자열" ) : 문자열 끝에 매개값을 추가. 
StringBuffer.insert( int i, "문자열" ) : i 부분에 문자열을 추가.
StringBuffer.delete( start_int, end_int ) : 문자열에 start부터 end-1까지 제거.
StringBuffer.deleteCharAt( int i ) : 문자열에 i부분을 제거.
StringBuffer.replace( start_int, ent_int, "문자열" ) : 문자열에 int부분을 "문자열"로 대체한다.
StringBuffer.reverse( ) : 문자열의 순서를 뒤바꾼다.
StringBuffer.setCharAt( int i, "char" ) : 문자열에 i 부분 문자를 "char"로 바꾼다.


 # 정규 표현식.

[ ] : 한개의 문자.
\d : decimal 0~9까지 한개의 숫자.
\s : 공백.
\w : 한 개의 알파벳 또는 한 개의 숫자. [a-zA-Z_0-9]와 동일.
? : 0 또는 1.
* : 없음 또는 한개 이상.
+ : 한개 이상.
{n} : 정확히 n개.
{n,} : n개 이상.
[n, m} : n개에서부터 m개까지.
( ) : 그룹.

API 도큐먼트 java.util.regex.Patten 클래스를 찾아 Summary of regular-expression constructs를 참조.


 # Pattern 클래스 - matches( )

boolean result = Pattern.matches( "정규식", "검증할 문자열" );
검증할 문자열이 정규식에 맞는지 확인하고 boolean값을 반환한다.


 # Arrays 클래스.

Arrays.copyOf( 원본배열, 복사할길이 ) : 복사 배열을 반환한다.
Arrays.copyOfRange( 원본배열, 시작인덱스, 끝 인덱스 ) : 복사 배열을 반환한다. ( 끝 인덱스 -1까지 )
배열1.equals( 배열2 ) : 두 개 배열의 번지 비교.
Arrays.equals( 배열1, 배열2 ) : 두 개 배열의 항목값 비교. 
Arrays.deepEquals( 배열1, 배열2 ) : 두 개의 번지가 다를 경우 값을 비교. ( 값이 같으면 true )
Arrays.sort( ) : Comparable 인터페이스가 구현되어있으면 비교 후 정렬해준다.
Arrays.binarySearch( 배열, 값 ) : 배열에 값이 어디에 들어있는지 index값을 반환한다.


 # Wrapper 클래스.

박싱( Boxing ) : 기본 타입 -> 래퍼클래스.
언박싱 ( Unboxing ) : 래퍼클래스 -> 기본타입.

형변환.
Integer in = Integer.valueOf( int ) : 박싱.
int i = Integer.intValue( ) : 언박싱.

자동박싱 언박싱.
기본형을 래퍼클래스에 대입하거나 반대로 실행하면 컴파일러가 자동으로 promotion해준다.

문자열을 기본 타입값으로 변환.
int i = Integer.parseInt( "1000" );


 # Math 클래스.

Math.abs( int a ) : 절대값 반환.
Math.ceil( double d ) : 올림값 반환.
Math.floor( double d ) : 버림값 반환.
Math.max( int a, int b ) : 둘 중 최대값 반환.
Math.min( int a, int b) : 둘 중 최소값 반환.
Math.round( ) : 반올림값 반환.
Math.random( ) : 0.0 <= x < 1.0 의 값 중 랜덤으로 반환.

Math 클래스의 모든 멤버는 static이다. ( 객체 생성없이 사용가능 )


 # Date클래스.

Deprecated ( 비권장 ) 되어 있어서 생성자만 거의 사용하고, Calendar를 사용.


 # Calendar 추상 클래스.

날짜 시간을 설정해줘야 되는 추상클래스이다.
특별한 날짜 시간을 설정해줘야 하는 상황이 아니면 getInstance( )를 통해 객체를 생성해서 사용.
( 현재 운영체제에 설정되어 있는 시간대를 기준으로 객체 생성 )

Calendar now = Calendar.getInstance( );
now.get( Calendar.YEAR ) : 년도를 int로 리턴.
now.get( Calendar.MONTH ) + 1 : 월을 int로 리턴.
now.get( Calendar.DAY_OF_MONTH ) : 일을 int로 리턴.
now.get( Calendar.DAY_OF_WEEK ) : 요일을 int로 리턴.
now.get( Calendar.AM_PM ) : 오전 오후를 int로 리턴. ( 오후 = 1 )


 # Format 클래스.

Desimal Format - 숫자형식클래스.

0, # : 10진수.
. : 소수점.
- : 음수기호.
, : 단위구분.
E : 지수문자.
% : 기존 값에 100을 곱한 값.
\u00A4 : 통화 기호.

SimpleDateFormat - 날짜형식클래스.

y : 년
M : 월
d : 일
D : 월 구분이 없는 일.
E : 요일.
a : 오전/오후.
K : 시 ( 0 ~ 11 )
k : 시 ( 1 ~ 24 )
m : 분
s : 초
S : 밀리세컨드.
















































