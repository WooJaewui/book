
 컬렉션프레임워크 - 780page.


 # 용어설명.

Collection : 객체를 수집해서 저장하는 역할.
Framework : 사용 방법을 미리 정해 놓은 라이브러리.
Collection Framework : java.util 패키지에 컬렉션과 관련된 인터페이스와 클래스를 포함.



 # 상속관계도.

Iterable -> Collection -> List -> ArrayList
                                     -> Vector.
                                     -> LinkedList.
                            -> Set -> HashSet.
                                     -> TreeSet.
                         
Collection을 상속받지 않음.
                            -> Map -> HashMap
                                      -> TreeMap

설명.
List와 Set은 공통된 부분이 많아서 Collection이라는 interface로 묶어줬다.


 # List, Set, Map 인터페이스의 특징.

List : 순서 O, 중복 O.
Set : 순서 X, 중복 X.
Map : 키와 값을 쌍으로 저장, 키는 중복 X, 값은 중복 O.


 
 # Iterator 인터페이스.

설명.
반복해서 컬렉션프레임워크에 객체들을 꺼낼때 사용한다.

사용.
Iterator iter = Collection.iterator( );
while( iter.hasNext( ))
	iter.next( );

메소드.
hasNext( ) : 다음 객체가 있는지 확인한다.
next( ) : 다음 객체를 반환한다.
remove( ) : 이번 객체를 제거한다.


주의사항.
iter는 한 번 사용하면 다시 생성해서 사용해야 된다. 



 # List<T> interface.

설명.
객체를 일렬로 늘어놓은 구조를 가지고 있으며, 객체 저장시 자동으로 인덱스를 부여하여 컨트롤한다.

구현클래스 종류.
ArrayList<T>, Vector<T>, LinkedList<T>.

메소드
add( T t ) : 매개변수의 객체를 인덱스 맨 끝에 추가.
get( index ) : 인덱스 값에 있는 객체를 반환.
remove( index ) : 인덱스 값에 있는 객체를 삭제.
size( ) : 저장된 객체의 수를 반환. ( length 같은 역할 )
clear( ) : 저장된 객체 모두 삭제.



 # ArrayList Class.

설명.
List 인터페이스의 구현클래스로, 
배열과 같이 인덱스로 data를 관리하지만 배열과 다르게 capacity(저장공간)을 초과하면 자동으로 늘려준다.

사용.
ArrayList<String> list = new ArrayList<>( );
list.add( "Hello" );
list.get( 0 );

생성자.
ArrayList( ) : 기본생성자.
ArrayList( capacity ) : 저장공간을 미리 정할 수 있다. ( 넘어가면 자동으로 늘어남 )
ArrayList( Collection ) : 콜렉션에 있는 객체들을 저장할 수 있다.

추가적인 객체 생성 방법.
List<T> list = Arrays.asList( 객체1, 객체2, ... );

주의사항.
다양한 종류의 type을 저장할 수 있지만, 
형변환을 모두 처리 해야되는 번거로움 때문에 거의 단일 종류의 객체들만 저장한다.
인덱스 중간에 객체를 추가하거나 삭제하면 다른 인덱스의 shift가 필요하다. ( LinkedList가 효율적 )
인덱스 끝에 객체를 추가할때는 ArrayList가 훨씬 효율적이다.



 # Vector.

설명.
ArrayList와 같은 특징을 가지고, synchronized되 있어서 멀티쓰레드에서 안정적으로 사용가능하다.

사용.
Vector<T> list = new Vector( );


 # LinkedList.

설명.
저장할때 인접한 객체들만 서로 연결되어 있다. ( 중간에 객체 변경 / 삭제에 유리 )
맨마지막 인덱스에 갈려면 처음부터 끝까지 모든 객체를 거쳐서 가야된다. 
( 맨마지막 추가는 ArrayList 사용 )

사용.
LinkedList<T> list = new LinkedList( );



 # Set<T> interface.

설명.
순서가 유지되지 않고, 중복이 허용되지 않는다. null도 하나만 허용.

구현클래스 종류.
HashSet<T>, TreeSet<T>.

메소드.
List와 같다.



 # HashSet<T> Class.

설명.
Set interface를 구현한 클래스이다. 순서 X, 중복 X.

중복확인.
hashCode( )의 값을 비교하고, equals( )의 값을 비교한다.

주의사항.
hashCode( ), equals( ) 각각의 메소드가 어떤 값을 비교하고 있는지 확인해야된다.
필요에 따라 override한다.



 # TreeSet Class.

설명.
검색기능을 강화하기 위해 이진 트리 구조라는 형식을 대입하였다.

이진트리구조.
하나의 노드에 최대 2개의 노드가 연결될 수 있는 방식을 의미한다.

사용.
TreeSet<T> ts = new TreeSet<>( );

메소드.
first( ) : 제일 낮은 객체를 반환.
last( ) : 제일 높은 객체를 반환.
lower( T t ) : 매개변수보다 바로 아래 객체를 반환.
higher( T t ) : 매개변수보다 바로 위의 객체를 반환.
descendingIterator( ) : 내림차순으로 정렬된 iterator를 반환.
descendingSet( ) : 내림차순으로 정렬된 NavigableSet을 반환.



 # Map interface.

설명.
키와 값으로 구성된 Entry 포함객체를 저장하는 구조를 가진다.
키와 값도 모두 각각의 객체이다.

메소드.
put( K key, V value ) : 키와 값을 저장.
entrySet( ) : Map.Entry 객체를 Set에 담아서 리턴.
get( key ) : 키와 같이 저장된 값을 리턴.
keySet( ) : 모든 키를 Set 객체에 담아서 리턴.
values( ) : 모든 값을 Collection에 담아서 리턴.

Map에 모든 값을 얻는 방법.

1. keySet( )메소드로 모든 키를 Set으로 반환받아서 iterator( )한다.
2. Entry( )를 통해 키와 값을 모두 Set으로 반환받아서 iterator( ) 후 getKey( ), getValue( )한다.

주의사항.
기존에 키와 같은 키에 다른값을 저장하면 나중에 저장한 값이 저장된다.



 # HashMap Class.

설명.
Map 인터페이스를 구현한 클래스로, key와 value를 함께 저장한다.
key의 값이 중복이 불가능한데, hashCode( )와 equals( )를 통해 중복을 확인한다.

주의사항.
key가 중복인 경우는 hashCode( )의 값이 같고, equals( )가 true여야 된다.


 # Hashtable Class.

설명.
HashMap과 같은 특징을 가지며, synchronized된 메소드를 가진다. ( 멀티쓰레드에 사용 )



 # Properties Class.

설명.
Hashtable Class의 하위클래스이다. 키와 값을 String으로 제한하는 특징을 가진다.
( 추후에 따로 공부해보자 ) 



 # TreeMap Class.

설명.
이진 트리를 기반으로 한 Map 구현클래스이다.
TreeSet과 다른점은 키와 값을 Map.Entry에 저장한다.

사용.
TreeMap<K, V> map = new TreeMap<>( );
NavigableMap<K, V> descendingMap = map.descendingMap( );

메소드.
firstEntry( ) : 제일 낮은 Map.Entry를 반환.
lastEntry( ) : 제일 높은 Map.Entry를 반환.
descendingKeySet( ) : 내림차순으로 정렬된 키의 NavigableSet을 반환.
descendingMap( ) : 내림차순으로 정렬된 Map.Entry의 NavigableMap을 반환.



 # Comparable interface.

설명.
TreeSet과 TreeMap에서 값을 비교하면서 저장할때 사용된다.
숫자타입은 값으로 정렬, 문자열은 유니코드의 값으로 정렬한다.

자세한설명.
TreeSet과 TreeMap은 정렬을 위해 Comparable을 구현한 객체를 요구한다.
내가 만든 객체를 TreeSet/Map에서 사용하려면 Comparable을 implements 해야된다.
Comparable<T> 인터페이스에서 compareTo( )메소드를 오버라이딩해서 사용.

메소드.
compareTo( T t ) : 객체의 값과, T의 값을 비교한다. ( 객체가 크면 1, 같으면 0, T가 크면 -1 )



 # Comparator interface.

설명.
TreeSet과 TreeMap에서 Comparable을 구현하지 않은 객체를 사용할때 사용한다.
Comparator를 구현한 Class를 생성자에 넣어준다.

사용.
TreeSet<T> ts = new TreeSet( new ComparatorA( ) );

자세한설명.
Comparator를 구현한 Class에서 compare( )메소드를 override한다.



 # TreeSet, TreeMap 주의사항.

TreeSet, TreeMap에 객체를 저장할때 주의사항.
이진트리구조는 검색을 쉽게 하기 위해 값을 비교해가면서 저장하기 때문에,
값을 비교할 수 있는 메소드가 필요하다. 메소드가 없으면 객체를 저장할 수 없다.

해결방법.
1. 객체에 Comparable 인터페이스를 implements해서 comparaTo( )를 오버라이딩한다.
2. 객체에 Comparator 인터페이스를 implements해서 compara( )를 오버라이딩 후 생성자에 넣는다.



 # Stack Class.

설명.
LIFO : 나중에 들어온 data가 먼저 출력된다.

사용.
Stack<T> stack = new Stack<>( );

메소드.
push( T t ) : 주어진 객체를 스택에 넣는다.
pop( ) : 맨 위에 객체를 반환하면서 스택에서 제거한다.
peek( ) : 맨 위에 객체를 반환하고 스택에서 제거하지 않는다.



 # Queue interface.

설명.
FIFO : 먼저 들어온 data가 먼저 출력된다.
LinkedList가 대표적인 Queue를 구현한 클래스이다.

사용.
Queue<T> que = new LinkedList<>( );

메소드.
offer( T t ) : 주어진 객체를 Queue에 넣는다.
poll( ) : 객체 하나를 반환하고 Queue에서 제거한다.
peek( ) : 객체 하나를 반환하고 Queue에서 제거하지 않는다.



 # Synchronized Collection.

설명.
대부분의 Collection들은 동기화가 되어 있지 않아서 동기화 시키기 위한 메소드를 제공한다.

사용.
Collection.synchronizedLIst( List<T> list ) : List를 동기화된 List로 리턴.
Collection.synchronizedSet( Set<T> set ) : Set을 동기화된 Set으로 리턴.
Collection.synchronizedMap( Map<K,V> m ) : Map을 동기화된 Map으로 리턴.



 # 컬렉션 병렬처리.

설명.
멀티쓰레드에서 컬렉션의 요소를 병렬적으로 처리할 수 있도록 제공하는 컬렉션이다.

사용.
Map<K,V> map = new ConcurrentHashMap<>( );
Queue<T> que = new ConcurrentLinkedQueue<>( );












