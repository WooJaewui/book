
멀티쓰레드(2)


 # 동기화 메소드.

설명.
멀티쓰레드에서는 객체가 쓰레드에 의해 동시에 사용되어 내가 원하는 값이 나오지 않을 수 있다.

사용.
public synchronized void method( ) { 하나의 쓰레드만 실행할 문장; }

주의사항.
너무 많은 부분에서 synchronized를 사용하면 멀티쓰레드의 의미가 사라진다. ( 단일 쓰레드와 같아진다 )


 # 동기화 블럭.

사용.
synchronized ( obj j ) { 하나의 쓰레드만 실행할 문장; };

주의사항.
메소드 안에서 부분만을 동기화 시킬 때 사용한다.
매개변수 obj에는 공유객체가 들어가고, 자기자신의 객체라면 this를 사용한다.
매개변수에 this 이외에 다른 객체를 넣을시 잘 생각해야된다.



 # 쓰레드의 상태.

설명.
쓰레드는 스케쥴러에 의해 실행, 실행대기, 일시 정지 등의 상태를 가지게 된다.

쓰레드의 상태 6가지.
1. NEW : 쓰레드 객체가 생성되고 start( )가 호출되지 않은 상태.
2. RUNNABLE : 실행 상태로 갈 수 있는 상태. ( start( ) 호출 )
3. WAITING : 다른 쓰레드가 통지할 때 까지 기다리는 상태.
4. TIMED_WAITING : 주어진 시간 동안 기다리는 상태.
5. BLOCKED : 사용하고자 하는 객체의 락이 풀릴 때까지 기다리는 상태.
6. TERMINATED : 실행을 마친 상태.

사용.
Thread.State ts = Thread.getState( );
if ( ts == Thread.State.New ) { 실행할 문장; }



 # 쓰레드의 상태제어.

설명.
멀티쓰레드에서 상태제어가 잘못되면 프로그램이 불안정해짐으로, 정교한 상태제어가 필요하다.

상태제어 메소드.
Thread.sleep( millisecond ) : 밀리세컨드를 매개변수로 넣어주면, 그 시간만큼 일시정지 상태가 된다.
Thread.yield( ) : 무의미한 반복을 할 경우 사용한다. 다른 쓰레드에게 실행 기회를 넘겨준다.
ThreadB.join( ) : ThreadA가 ThreadB의 연산결과값을 사용해야 되는 경우 사용한다. 쓰레드B의 종료를 기다림.
wait( ) : Thread를 일시정지 상태로 만든다.  ( Object 클래스에 있다 )
wait( timeout ) : 일정시간을 지정하면 일정시간 후 알아서 실행대기상태로 바뀐다.

notify( ) : wait된 thread중에 한 개를 실행대기 상태로 바꿔준다.
notifyAll( ) : wait된 Thread 모두 실행대기 상태로 바꿔준다.

Thread.stop( ) : 쓰레드를 바로 종료시키는 메소드지만, 사용하던 자원에 불안정하게 만들어서 deprecated되었다.
                   -> boolean stop변수를 만들어서 대체할 수 있다.
Thread.interrupt( ) : 쓰레드가 일시 정지 상태에 있을 때 InterruptedException을 발생시킨다.
                         -> 일시 정지가 일어나지 않으면 아무 소용이 없다. interruped( )로 확인가능.




















