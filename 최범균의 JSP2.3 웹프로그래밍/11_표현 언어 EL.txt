
 표현언어 Expression Language.



 # 표현 언어 EL Expression Language.

표현언어.
다른 형태의 스크립트 언어로서 스크립트 요소 중 하나이다. 표현식보다 간결하고 편리하여 사용한다.

표현언어 기능.
JSP의 네 가지 기본 객체가 제공하는 영역의 속성 사용.
수치 연산, 관계 연산, 논리 연산자 제공.
자바 클래스 메소드 호출 기능 제공.
쿠키, 기본 객체의 속성 등 JSP를 위한 표현 언어의 기본 객체 제공.
람다식을 이용한 함수 정의와 실행.
스트림 API를 통한 컬렉션 처리.
정적 메소드 실행.



 # EL의 형식.

EL의 기본형식.
${ expr } : ${ } 안에 실행할 EL 스크립트 형식을 넣는다.
#{ expre } : ${ } 안에 실행할 EL 스크립트 형식을 넣는다. 

${ }와 #{ }의 차이.
${ expr }은 코드가 적힌 시점에 바로 실행되고, #{ expr }은 이 코드가 사용될 때 실행된다.

추가설명.
#{ expr }는 값이 필요할 때 실행되기 때문에 Deferred Expression이라고 부른다.
JSP에서 #{ expr }은 허용하는 태그의 속성에만 사용할 수 있다. ( 많이 사용되지 않음 )



 # EL의 데이터 타입과 리터럴.

데이터 타입.
boolean : true, false.
정수타입 : 0~9로 이루어진 값을 정수로 사용. 음수는 '-'가 붙는다. java.lang.Long 클래스 사용.
실수타입 : 0~9로 이루어져 있으며, 소수점 '.'를 사용. java.lang.double 클래스 사용.
문자열 타입 : " "또는 ' '로 둘러싼 문자열. java.lang.String 클래스 사용.
널 타입 : null.

사용예시.
${ true }, ${ 10 }, ${ 10.5 }, ${ Hello }, ${ null } 



 # EL의 기본객체.

기본객체.
pageContext : JSP의 page 기본 객체와 동일.
pageScope : pageContext 기본 객체에 저장된 속성의 이름,값을 저장한 Map 객체.
requestScope : request 기본 객체에 저장된 속성의 이름, 값을 저장한 Map 객체.
sessionScope : session 기본 객체에 저장된 속성의 이름, 값을 저장한 Map 객체.
applicationScope : application 기본 객체에 저장된 속성의 이름, 값을 저장한 Map 객체.
param : 요청 파라미터의 이름, 값을 저장한 Map 객체.
paramValues : 요청 파라미터의 이름, 값의 배열을 저장한 Map 객체. ( 이름 1개, 값 여러개 일 때 사용 )
header : 요청 정보의 헤더 이름, 값을 저장한 Map 객체.
headerValues : 요청 정보의 헤더 이름, 값의 배열을 저장한 Map 객체. ( 헤더 1개, 값 여러개 일 때 사용 )
cookie : 쿠키이름, 값을 저장한 Map 객체.
initParam : 초기화 파라미터 이름, 값을 저장한 Map 객체.

사용예시.
${ pageContext.request.requestURI } 
${ requestScope.name }
${ param.id } 
${ cookie.AB.value } : 쿠키이름이 "AB"인 값을 출력.

주의사항.
EL은 값이 존재하지 않는 경우 아무것도 출력하지 않는다. ( JSP에서는 null을 출력 )



 # EL의 객체 접근 방식.

설명.
EL 언어는 객체에 저장된 값에 접근할 때 ' . '이나  '[ ]'를 사용한다. 
예 - cookie.name , cookie['name']

<표현1>.<표현2> 접근방식.
1. <표현1>을 <값1>로 변환한다.
2. <값1>이 null이면 nuill을 리턴.
3. <값1>이 null이 아니면 <표현2>를 <값2>로 변환한다.
4. <값1>이 Map이면, <값2>가 <값1>의 key가 아니면 null을 리턴. key면 value를 리턴.
5. <값1>이 List이면나 배열이면, <값2>가 정수값이면 <값1>[값2]을 리턴, 정수가 아니면 에러발생.
6. <값1>이 객체면 <값2>를 문자열로 변환, <값1> 객체에 <값2> 속성이 있다면 속성값을 리턴.



 # page, request, session, application.

설명.
scope가 붙은 4가지 기본 객체는 데이터를 출력할때 앞에 기본객체를 생략할 수 있다.

사용.
${ requestScope.name } = ${ name } 

추가설명.
page,request,session, application 영역을 차례대로 검사해서 name 속성이 존재하는지 확인한다.
( 같은 이름의 변수 사용에 유의해고, 영역 검사 순서를 외워두자 )



 # EL 수치 연산자.

수치연산자.
+ , -, * , / , %.

주의사항.
숫자로 변환할 수 없는 객체와 수치 연산자를 사용하면 에러가 발생. ( ${ "한글" + 1 } - 에러 ) 
null와 어떤 연산을 수행하면 null을 Long 타입 0으로 연산한다. ( ${ null + 1 } = 1 } 
A와 B 중 하나가 BigInteger면 모두 BigDecimal로 변환한 뒤 연산을 수행.
A와 B 중 하나가 BigInteger가 아니면 모두 Double로 변환한 뒤 연산을 수행. ( ${ 3/2 } = 1.5 ) 
특수한 경우가 아니면 모두 Long으로 변환한 뒤 연산을 수행한다.
변환이나 연산에 실패하면 Exception을 발생한다.

BigInteger, BigDecimal.
BigInteger : Intger로 표현할 수 있는 수의 범위를 넘는 정수를 사용하는 클래스.
BigDeciam : Double보다 좀 더 정확한 실수를 표현할 때 사용하는 클래스.



 # EL 나머지 연산자.

비교연산자.
==( eq ) , != ( ne ) , <( lt ) , >( gt ) , <=( le ) , >=( ge )

논리연산자.
&& ( and ), || ( or ) , ! ( not )

empty 연산자.
${ empty 값 } 

empty 연산자 설명.
값이 null이면 true를 리턴한다.
값이 빈 문자열이면 true를 리턴한다.
값이 길이가 0인 배열이면 true를 리턴한다.
값이 빈 Map이면 true를 리턴한다.
값이 빈 Collection이면 true를 리턴한다.
이외에 경우에는 false를 리턴한다.

비교 선택 연산자.
수식 ? 값1 : 값2

문자열 연결.
${ "hello" += "world" } = "helloworld"
${ "hello" += name } = "hello" + name변수의 값 



 # 컬렉션 사용하기.

List 사용하기.
<c:set var="val" value="${ [1,2,5,10] }" />
${ myfunc:sum( val ) } , ${ val[2] } 

Map 사용하기.
<c:set var="val" value="${ { 'name' : '이름' , 'age' : 10 } } " />
${ val.name } , ${ val.age } 

Set 사용하기.
<c:set var="val" value="${ { '가', '나', '다' } }" />
${ val }  



 # 세미콜론 연산자.

사용.
${ 1 + 1 ; 10 + 10 ; } : 앞에 1+1 연산은 출력되지 않고 10+10만 출력된다.



 # 할당 연산자.

사용.
${ val = 10 } : 할당 연산자를 사용해도 값을 출력한다. 10을 리턴.



 # 연산자의 우선순위.

우선순위.
1순위 : += 
2순위 : <, >, <=, >= 
3순위 : == , !=
4순위 : && 
5순위 : || 
6순위 : ? , : 
7순위 : ->
8순위 : = 
9순위 : ; 



 # EL 메소드 호출.

설명.
JSP 2.2 , EL 2.2 버전부터 객체의 메소드를 직접 호출 할 수 있다.

사용.
request.setAttribute( "t" , 객체 ) ;
${ t.setValue( 값 ) } 
${ t.getValue( ) } 



 # EL 클래스 없이 정적 메소드 호출.

순서 설명. ( 기존방식 )
1. 클래스 생성해서 정적 메소드 만들기.
2. tld파일 생성해서 정적 메소드 설정.
3. web.xml에 tld 내용 추가하기.
4. 함수 사용하기.

새로운 방식.
<%@ page import="패키지이름.클래스" %>
${ 클래스.메소드 } 



 # 람다식 사용하기.

사용1.
${ sum = ( a -> a+10 ) ; "" } 
${ sum( 10 ) } 

사용2.
${ sum = ( (a + b) -> a+b ) ; "" } 
${ sum( 10, 20 ) } 



 # 스트림 API 사용하기.

설명.
EL은 for나 while 같은 반복문이 없다. 그래서 stream을 통해 배열의 합 등을 구할 수 있다.

사용.
collection.stream( ).중간연산( ).최종연산( ) 

예시.
${ list = [ 1,2,3,4,5 ] ; list.stream( ).sum( ) ; } 

중간연산.
filter( x -> x % 2 == 0 ) : stream의 값들을 filter안에서 true인 값들만 리턴한다. ( booelan을 생성 )
map( x -> x * x ) : map안에서 새로운 스트림을 생성한다. ( 값을 생성 )
sorted( ) : Collection 클래스에서 Comparable을 구현해놓은 방식으로 값을 정렬한다.
sorted( (x1, x2) -> x1<x2 ? 1 : -1 ) : sorted안에 정렬 방식을 구현해서 사용할 수 있다.
limit( 숫자 ) : Collection 중에서 순서대로 지정한 개수만큼 값을 리턴한다. ( 보통 sorted( )와 같이 사용 )
anyMatch( x -> x > 4 ) : 조건에 맞는 값만 리턴.
allMatch( x -> x > 4 ) : 모든 값이 조건에 맞는지 확인. ( .get( )를 통해 boolean값을 리턴 )
nonMatch( x -> x > 4 ) : 모든 값이 조건에 틀린지 확인. ( .get( )를 통해 boolean값을 리턴 ) 

최종연산.
toList( ) : 값을 리스트 객체로 생성한다.
toArray( ) : 값을 배열 객체로 생성한다.
count( ) : 값의 갯수를 리턴한다.
sum( ) : 값들의 합을 리턴한다.
average( ) : 평균을 리턴한다.
min( ) : 최소값을 리턴한다.
max( ) : 최대값을 리턴한다.

Optional 최종연산.
get( ) : 값이 존재하면 값을 리턴한다. 존재하지 않으면 ELException을 리턴.
orElse( other ) : 값이 존재하면 값을 리턴한다. 존재하지 않으면 other를 리턴한다.
orElseGet( (( ) -> T ) other ) : 값이 존재하면 값을 리턴한다. 존재하지 않으면 람다식을 실행.
ifPresent( ((x) -> void ) consumer ) : 값이 존재하면 consumer를 실행한다. 



 # EL 비활성화 방법.

web.xml 파일에 지정.
<jsp-property-group>
	<url-pattern>/url</url-pattern>
	<el-ignored>true</el-ignored>
</jsp-property-group>

JSP 페이지에서 설정.
<%@ page isELIgnored= "true" %> : 비활성화.
<%@ page deferredSyntaxAllowedAsLiteral= "true" %> : #{ } 형식만 비활성화.



 # 버전에 따른 EL처리.

버전.
서블릿 2.3 버전의 web.xml : EL을 지원하지 않는다.
서블릿 2.4 버전의 web.xml : #{ expr }을 지원하지 않는다.
서블릿 2.5~3.1버전의 web.xml : 모두 지원한다.





