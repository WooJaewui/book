
 람다와 스트림.



 # 익명 클래스보다는 람다를 사용하라.

역사.
- 예전에는 자바에서 함수 타입을 표현할 때 추상 메서드를 하나만 담은 인터페이스를 사용했다.

함수 객체.
- 추상 메서드를 하나만 담은 인터페이스나 객체의 인스턴스.

람다식 사용.
- 타입을 명시해야 코드가 더 명확할 때를 제외하고는, 람다의 모든 매개변수 타입은 생략하자.
- 타입 추론 규칙에 대해 공부.

타입 추론 + 로 타입.
- 컬렉션을 로 타입으로 선언하면 타입 추론에 어려움을 겪기 때문에 컴파일 에러가 발생할 수 있다.
- 람다식을 사용하는 경우 항상 제네릭 타입을 사용하자.

람다의 단점.
- 람다는 이름이 없고 문서화도 못 한다.
	=> 코드 자체로 동작이 명확히 설명되지 않거나 코드 줄 수가 많아지면 람다를 쓰지 말아야 한다.
	=> 한 줄일 때 가장 좋고, 세 줄 안에 끝내는 게 좋다.

열거 타입 람다.
- 열거 타입 생성자 안의 람다는 열거 타입의 인스턴스 멤버에 접근할 수 없다.

람다 vs 익명 클래스.
- 람다는 함수형 인터페이스에서만 쓰인다. ( 추상 클래스의 인스턴스에는 사용 할 수 없다 )
- 익명 클래스는 추상 클래스에도 사용할 수 있고, 추상 메서드가 여러개일 때도 사용 가능하다.
- 람다는 자신을 참조할 수 없고, 익명 클래스는 자신을 참조할 수 있다.
- 람다를 직렬화하는 것은 삼가해야 한다. ( 직렬화 형태가 구현별로 다를 수 있다 )

주요 키워드.
- 타입 추론 규칙.
- 람다 vs 익명 클래스.

참조.
- 람다 vs 익명 클래스 : https://alkhwa-113.tistory.com/entry/%EB%9E%8C%EB%8B%A4%EC%8B%9Dfeat-%EC%9D%B5%EB%AA%85-%EA%B5%AC%ED%98%84-%ED%81%B4%EB%9E%98%EC%8A%A4-vs-%EB%9E%8C%EB%8B%A4%EC%8B%9D
- 람다 vs 익명 클래스 : https://blue-jay.tistory.com/51
- stack : https://johngrib.github.io/wiki/jvm-stack/
- stack : https://yaboong.github.io/java/2018/05/26/java-memory-management/

정리.
- 익명 클래스는 타입의 인스턴스를 만들 때만 사용하라.



 # 람다보다는 메서드 참조를 사용하라.

메서드 참조 특징.
- 람다로 할 수 없는 일이라면 메서드 참조로도 할 수 없다.
- 람다로 구현했을 떄 너무 길거나 복잡하다면 메서드 참조가 좋은 대안이 되어준다.
- 메서드 참조는 기능을 드러내는 이름을 지어주거나 친절한 설명을 문서로 남길 수 있다.

정리.
- 메서드 참조 쪽이 짧고 명확하다면 메서드 참조를 쓰고, 그렇지 않을 때는 람다는 사용하라.



 # 표준 함수형 인터페이스를 사용하라.

표준 함수형 인터페이스.
- 필요한 용도에 맞는 표준 함수형 인터페이스가 있다면 직접 구현하지 말고 사용하라.
- 총 43개의 인터페이스가 담겨 있다.

Operator 인터페이스.
- 인수의 개수에 따라 나뉜다.
- 반환값과 인수의 타입이 같은 함수.

Predicate 인터페이스.
- 인수 하나를 받아 boolean을 반환하는 함수.

Function 인터페이스.
- 인수와 반환 타입이 다른 함수.

Supplier 인터페이스.
- 인수를 받지 않고 값을 반환하는 함수.

Consumer 인터페이스.
- 인수를 받고 값을 반환하지 않는 함수.

기본 인터페이스.
- int, long, double용으로 각 3개씩 변형이 생겨 난다.
- IntPredicate, LongBinaryOperator, ... 등
- 기본형 인터페이스에 박싱된 기본 타입을 넣어서 사용하지 말아라. ( 성능 이슈 )

Comparator 인터페이스 장점.
1. 이름이 용도를 잘 설명해 준다.
2. 구현하는 쪽에서 반드시 지켜야 할 규약을 담고 있다.
3. 비교자들을 변환하고 조합해주는 유용한 디폴드 메서드들을 듬뿍 담고 있다.

함수 전용 인터페이스를 구현해야 되는 상황.
1. 자주 쓰이며, 이름 자체가 용도를 명확히 설명해준다.
2. 반드시 따라야 하는 규약이 있다.
3. 유용한 디폴트 메서드를 제공할 수 있다.
	=> 이 중 하나 이상을 만족하는 경우 함수 인터페이스 구현을 생각해봐야 한다.

@FunctionalInterface.
1. 이 인터페이스가 람다용으로 설계된 것임을 알려준다.
2. 해당 인터페이스가 추상 메서드를 오직 하나만 가지고 있어야 컴파일되게 해준다.
3. 유지보수 과정에서 누군가 실수로 메서드를 추가하지 못하게 막아준다.

주의사항.
- 같은 함수형 인터페이스를 같은 위치에서 다중 타입으로 정의하면 오류가 발생할 수 있다.

정리.
- API를 설계할 때 람다를 염두해둬야 한다.
- 입력값과 함수형 인터페이스 타입을 활용하라.




















