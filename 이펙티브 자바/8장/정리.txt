

 Optional.



 # 올바른 Optional 사용법 가이드.

Optional 변수에 Null을 할당하지 말아라.
Optional<String> emptyOptional = null; XXXXX
- null을 또 한번 검사해야 되는 문제를 야기.

값이 없을 때 Optional.orElseX( )로 기본 값을 반환하라.
- 가급적이면 isPresent( ), get( )을 통해 값을 사용하지 말고, orElseGet( ) 등을 활용하자.

단순히 값을 얻으려는 목적으로만 Optional을 사용하지 마라.
- 단순히 값을 얻으려고 Optional을 사용하는 것은 Optional을 남용하는 대표적인 경우.
- 이런 경우 굳이 Optional을 사용해 비용을 낭비하지 말고 직접 값을 다루는 것이 좋다.

생성자, 수정자, 메소드 파라미터 등으로 Optional을 넘기지 마라.
- Optional은 반환 타입으로 대체 동작을 사용하기 위해 고안된 것이다.
- Serializable을 구현하지 않으므로 필드 값으로 사용하면 안된다.

Collection의 경우 Optional이 아닌 빈 Collection을 사용하라.

정리.
- Optional은 반환 타입으로써 에러가 발생할 수 있는 경우에 결과 없음을 명확히 드러내기 위해 만들어졌다.
- Stream API와 결합되어 유연한 체이닝 api를 만들기 위해 탄생.
- 언어를 만드는 사람의 입장에서 null을 반환하는 것보다 값의 유무를 나타내는 객체를 반환하는 것이 더 합리적일 것이다.
- Optional을 잘못 사용하는 것은 비용은 증가시키고 코드 품질은 오히려 악화시킨다. 규칙을 잘 준수하여 사용하자.



 # Natvie method와 자바 Native Interface.

Native method.
- 자바 이외의 언어로 시작하는 Java 메소드.
- Java에서 직접 사용할 수 없는 시스템별 기능 및 API에 액세스할 수 있습니다.

JNI Java Native Interface.
- 플랫폼 중립적인 방식으로 JVM과 Native method를 호환할 수 있도록 도와준다.



 # JavaDoc.

자바독 사용 전제조건.
- JDK 1.4.
- PATH 환경 변수에 JDK/BIN 폴더 추가.
- (선택사항) 도구가 내장된 IDE.

자바독과 일반 주석의 차이.
/**
 *  자바독 
 */

/*
 *  일반 주석.
 */ 

자바독 어노테이션.
@author : 코드 소스 작성자.
@deprecated : 해당 클래스( 구현체 )의 삭제 또는 지원이 중단되는 것을 알려줌.
@exception : 예외처리할 수 있는 것들을 정의, 알파벳 순.
@param : 매개변수 메서드, 생성자 설명.
@return : 리턴값 설명.
@see : 파일이 참조하는 다른 클래스와 메서드 등.
@serial : Serializeable 인터페이스에 사용.
@serialData : writeObject writeExternal 메소드로 작성된 데이터 설명.
@serialField : serialPersistnetFields 모든 배열에 사용됨.
@since : 해당 클래스가 추가된 버전.
@throws : @exception처럼 예외처리하는 것들을 정의.
@version : 구현체, 패키지 버전 명시.










