
 메소드.



 # 매개변수가 유효한지 검사하라.

매개변수 검증.
- 메서드와 생성자 대부분은 입력 매개변수의 값이 특정 조건을 만족하기를 바란다.
- 이런 제약은 반드시 문서화해야 하며 메서드 몸체가 시작되기 전에 검사해야 한다. ( 예외도 같이 문서화 )
- 메서드 몸체가 실행하기 전에 빨리 오류를 잡아야 한다. ( 오류는 가능한 빨리 잡아야 한다 )

단언문( assert ) 특징.
1. 실패하면 AssertionError를 던진다.
2. 런타임에 아무런 효과도, 아무런 성능 저하도 없다.

몸체 실행 전 매개변수 검사 예외.
- 유효성 검사 비용이 지나치게 높거나 실용적이지 않을 때.
- 계산 과정에서 암묵적으로 검사가 수행될 때.

정리.
- 메서드나 생성자를 작성할 때면 그 매개변수들에 어떤 제약이 있을지 생각해야 한다.
- 그 제약들을 문서화하고 메서드 코드 시작 부분에서 명시적으로 검사해야 한다.
- 매개변수 제약은 적을수록 좋다.

참조.
requireNotNull : https://velog.io/@rockpago/Objects.requireNonNull 
assert : https://offbyone.tistory.com/294



 # 적시에 방어적 복사본을 만들라.

자바 특성.
- 자바는 안전한 언어이다.

native method. ( 302page )
- 자바 이외의 언어로 시작하는 자바 메소드이다.
- 자바에서 직접 사용할 수 없는 시스템별 기능 및 API에 액세스할 수 있다.
- Java Native Interface를 통해 JVM과 호환할 수 있도록 만들어서 사용한다.

가변 객체 검증. => Date라는 가변객체를 불변으로 만드는 방법.
- 생성자 매개변수로 가변 객체가 인자로 오는 경우 주소값을 사용하기 때문에 생성자 외부에서 값이 변경되면 매개변수도 값이 변경된다.
- 데이터 검증 이전에 방어적 복사본( 변수 )에 저장한다.
- 매개변수가 제3자에 의해 확장될 수 있는 타입이라면 방어적 복사본을 만들 때 clone을 사용해서는 안 된다.

정리.
- 클래스가 클라이언트로부터 받는 혹은 클라이언트로 반환하는 구성요소가 가변이라면 그 요소는 반드시 방어적 복사를 해야 한다.
- 복사 비용이 너무 크고 수정할 일이 없음을 신뢰한다면 수정했을 때의 책임이 클라이언트에 있음을 문서에 명시하자.

참조.
native method : https://www.ibm.com/docs/en/i/7.2?topic=languages-native-methods-java-native-interface ( 302page )
메서드 : https://ssungkang.tistory.com/entry/JAVA-03-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-1



 # 메서드 시그니처를 신중히 설계하라.

API 설계 요령.
1. 메서드 이름을 신중히 짓자.
	- 항상 표준 명명 규칙을 따라야 한다.
2. 편의 메서드를 너무 많이 만들지 말자.
	- 메서드가 너무 많은 클래스는 익히고, 사용하고, 문서화하고, 유지보수 하기 힘들다.
	- 아주 자주 쓰일 경우메나 별도의 약칭 메서드를 두자. ( 확신히 서지 않으면 만들지 말자 )
3. 매개변수 목록은 짧게 유지하자.
	- 4개 이하가 좋다.
	- 같은 타입의 매개변수 여러 개가 연달아 나오는 경우가 특히 해롭다.

매개변수 목록을 짧게 줄여주는 기술.
1. 여러 메서드로 쪼갠다.
	- 쪼개진 메서드 각각은 원래 매개변수 목록의 부분집합을 받는다.
2. 매개변수 여러 개를 묶어주는 도우미 클래스를 만든다.
	- 일반적으로 이런 도우미 클래스는 정적 멤버 클래스로 둔다.
3. 객체 생성에 사용한 빌더 패턴을 메서드 호출에 응용한다.
	- 매개변수가 많고 일부는 생략해도 괜찮을 때 도움이 되는 방식이다.
	- 매개변수를 하나로 추상화한 객체를 정의하고, 클라이언트에서 세터 메서드를 호출해 필요한 값을 설정한다.

매개변수 팁.
- 매개변수의 타입으로는 클래스보다는 인터페이스가 더 낫다.
- boolean보다는 원소 2개짜리 열거 타입이 낫다. ( 코드를 읽고 쓰기가 더 쉬워지고, 확장도 편리하다 )



 # 다중정의는 신중히 사용하라.

메서드 특징.
- 재정의한 메서드는 동적으로 선택되고, 다중정의한 메서드는 정적으로 선택된다.

다중정의.
- 다중정의가 혼동을 일으키는 상황을 피해야 한다. ( 서로 형변환 할 수 없는 매개변수 사용 )
- 안전하고 보수적으로 가려면 매개변수가 수가 같은 다중정의는 만들지 말자.
- 가변인수를 사용하는 메서드라면 다중정의를 아예 하지 말아야 한다.
	=> 다중정의 대신 메서드 이름을 다르게 지어주는 방법도 있다.

정리.
- 일반적으로 매개변수 수가 같을 때는 다중정의를 피하는 게 좋다.
- 생성자라면 이 조언을 따르기가 불가능할 수 있다.
- 헷갈릴 만한 매개변수는 형변환하여 정확한 다중정의 메서드가 선택되도록 해야 한다.
- 위에 사항을 모두 지키기 힘들시에는 다중정의 메서드들이 모두 동일하게 동작하도록 만들어야 한다.



 # 가변인수는 신중히 사용하라.

정리.
- 인수 개수가 일정하지 않은 메서드를 정의해야 한다면 가변인수가 반드시 필요하다.
- 메서드를 정의할 때 필수 매개변수는 가변인수 앞에 두고, 가변인수를 사용할 때는 성능 문제까지 고려하자.



 # null이 아닌, 빈 컬렉션이나 배열을 반환하라.

빈 컨테이너 ( 컬렉션, 배열 ) 반환 장점.
1. 성능분석 결과 빈 컨테이너를 생성하는 것이 성능 저하에 주범이 아니다. ( 거의 성능차이가 없다 )
2. 빈 컬렉션과 배열은 굳이 새로 할당하지 않고도 반환할 수 있다.

빈 컨테이너 생성.
Container.isEmpty( ) ? Collections.emptyList( ) : new ArrayList<>( list ) ;

정리.
- null이 아닌, 빈 배열이나 컬렉션을 반환하라.
- null을 반환하는 API는 사용하기 어렵고 오류 처리 코드도 늘어난다. 그렇다고 성능이 좋은 것도 아닌다.



 # 옵셔널 반환은 신중히 하라.

Optional 사용법.
- Optional.empty( ) : 빈 옵셔널.
- Optional.of( value ) : Optional에 value를 넣음.

Optional 주의사항.
- Optional을 반환하는 메서드에서는 절대 null을 반환하지 말자.
- 객체를 하나 더 생성하는 것이기 때문에 성능측정 등이 필요할 수 있다.
- 옵셔널을 컬렉션의 키, 값, 원소 또는 배열의 원소로 사용하는 게 적절한 상황은 거의 없다.

Optional 사용 시기.
- 결과가 없을 수 있으며, 클라이언트가 이 상황을 특별하게 처리해야 하는 경우.
- 선택적으로 값을 갖는 어떤 클래스의 getter메서드를 사용하는 경우 Optional을 사용하는 것이 좋다.

정리.
- 옵셔널 반환에는 성능 저하가 있을 수 있다.
- 옵셔널을 반환값 이외의 용도로 쓰는 경우는 매우 드물다.



 # 공개된 API 요소에는 항상 문서화 주석을 작성하라.

문서화 주석.
- API을 올바로 문서화하려면 공개된 모든 클래스, 인터페이스, 메서드, 필드 선언에 문서화 주석을 달아야 한다.
- 메서드용 문서화 주석에는 해당 메서드와 클라이언트 사이의 규약을 명료하게 기술해야 한다.
- 한 클래스 안에서 요약 설명이 똑같은 멤버 혹은 생성자가 둘 이상이면 안 된다.
- 제네릭 타입이나 제네릭 메서드를 문서화할 때는 모든 타입 매개변수에 주석을 달아야 한다.
- 열거 타입을 문서화할 때는 상수들에도 주석을 달아야 한다.
- 애너테이션 타입을 문서화할 때는 멤버들에도 모두 주석을 달아야 한다.
- 클래스 혹은 정적 메서드가 스레드 안전하든 그렇지 않든, 스레드 안전 수준을 반드시 API 설명에 포함해야 한다.

{ @code } 
- 태그로 감싼 내용을 코드용 폰트로 렌더링한다.
- 태그로 감싼 내용에 포함된 HTML 요소나 다른 자바독 태그를 무시한다. ( escape )

@implSpec
- 해당 메서드와 하위 클래스 사이의 계약을 설명.
- 하위 클래스들이 그 메서드를 상속하거나 super 키워드를 이용해 호출할 떄 그 메서드가 어떻게 동작하는지를 설명.

@inheritDoc.
- 상위 타입의 문서화 주석 일부를 상속할 수 있다.

정리.
- 문서화 주석은 API를 문서화하는 가장 훌륭하고 효과적인 방법이다.
- 공개 API라면 빠짐없이 설명을 달아야 한다.
- 표준 규약을 일관되게 지키자.

참고.
문서화 주석 작성법 : https://www.baeldung.com/javadoc














