
 열거와 이너테이션.



 # int 상수 대신 열거 타입을 사용하라.

열거타입.
- 일정 개수의 상수 값을 정의한 다음, 그 외의 값은 허용하지 않는 타입이다.

상수 열거 패턴의 문제점.
- 타입 안전성을 보장할 수 없고, 표현력도 좋지 않다. ( 가독성 )
- 깨지기 쉽다.
- 정수 상수는 문자열로 출력하기가 다소 까다롭다. 
- 디거깅 과정에서 숫자로만 보이기 때문에 어렵다.

열거타입 특징.
- 열거 타입 자체는 클래스이다.
- 상수 하나당 자신의 인스턴스를 하나씩 만들어 public static final 필드로 공개한다.
- 열거 타입은 밖에서 접근할 수 있는 생성자를 제공하지 않으므로 final이다.
- 열거 타입 손언으로 만들어진 인스턴스들은 딱 하나씩만 존재한다. ( 싱글톤 )
- 컴파일타임 타입 안전성을 제공한다.
- 열거 타입에 새로운 상수를 추가하거나 순서를 바꿔도 다시 컴파일하지 않아도 된다.

열거 타입에 새로운 상수를 추가하거나 순서를 바꿔도 다시 컴파일하지 않아도 된다.
- static에 대한 이해가 필요한데, static은 컴파일 타임에 메모리에 올라간다. ( 재컴파일 하지 않아도 됨 )
- 일반적인 클래스는 런타임에 메모리에 올라간다. ( 재컴파일 해야 함 )

열거 객체.
- 열거 타입의 상수들을 열거 객체를 참조한다.

열거 객체 메소드.
- name( ) : 열거 객체의 문자열을 리턴. ( String )
- oridinal( ) : 열거 객체의 순번을 리턴. ( int )
- compareTo( ) : 열거 객체를 비교해서 순번 차이를 리턴. ( int )
- valueOf( String name ) : 주어진 문자열의 열거 객체를 리턴.
- values( ) : 모든 열거 객체들을 배열로 리턴.

열거 상수와 데이터 매핑.
- 열거 타입 상수 각각을 특정 데이터와 연결지으려면 생성자에서 데이터를 받아 인스턴스 필드에 저장하면 된다.
- 열거 타입은 근본적으로 불변이라 모든 필드는 final이어야 한다. ( public도 가능하지만, 메소드를 따로 두는게 좋다 )

열거 타입 사용 시점.
- 필요한 원소를 컴파일타임에 다 알 수 있는 상수 집합이라면 항상 열거 타입을 사용하자.

정리.
- 열거 타입은 쉽고 안전하고 강력하다.
- 하나의 메서드가 상수별로 다르게 동작해야 하는 경우 switch 문 대신 상수별 메서드 구현을 사용하자.
- 열거 타입 상수 일부가 같은 동작을 공유한다면 전략 열거 타입 패턴을 사용하자.

참조.
열거타입 특징 : https://splendidlolli.tistory.com/339
제이온 : https://steady-coding.tistory.com/294
static : https://jinyoungchoi95.tistory.com/16






