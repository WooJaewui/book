
 일반적인 프로그래밍 원칙.



 # 지역변수의 범위를 최소화하라.

지역변수 최소화 장점.
- 코드 가독성과 유지보수성이 높아지고 오류 가능성은 낮아진다.

지역변수 사용법.
- 가장 처음 쓰일 때 선언하기.
- 거의 모든 지역변수는 선언과 동시에 초기화해야 한다.
- 메서드를 작게 유지하고 한 가지 기능에 집중해라.

반복문에서 지역변수.
- while문은 복사 붙여넣기 사용할 때 오류를 발생할 수 있기 때문에 for문을 사용하는 것이 좋다.



 # 전통적인 for문보다는 for-each 문을 사용하라.

for-each문.
- 향상된 for문을 의미한다.
- for문보다 문법적으로 실수할 확률이 적다.

for-each문을 사용할 수 없는 상황.
1. 파괴적인 필터링 destructive filtering.
	- 컬렉션을 순회하면서 선택된 원소를 제거해야 한다면 반복자의 remove 메서드를 호출해야 한다.
2. 변형 transforming.
	- 리스트나 배열을 순회하면서 그 원소의 값 일부 혹은 전체를 교체해야 한다면 리스트의 반복자나 배열의 인덱스를 사용.
3. 병렬 반복 parallel iteration.
	- 여러 컬렉션을 병렬로 순회해야 한다면 각각의 반복자와 인덱스 변수를 사용해 엄격하게 제어해야 한다.

for문 사용 조건.
- 컬렉션, 배열, iterable 인터페이스를 구현한 모든 객체.

정리.
- for-each문은 명료하고, 유연하고, 버그를 예방해준다.
- 성능에 저하도 없다.



 # 라이브러리를 익히고 사용하라.

표준 라이브러리 사용 이유.
1. 코드를 작성한 전문가의 지식과 다른 프로그래머들의 경험을 활용할 수 있다.
2. 핵심적인 일과 관련 없는 문제를 해결하느라 시간을 허비하지 않아도 된다.
3. 따로 노력하지 않아도 성능이 지속해서 개선된다.
4. 기능이 점점 늘어난다.
5. 내가 작성한 코드가 다른 사람이 이해하기 쉽게 된다.

라이브러리를 사용하지 않는 이유.
- 라이브러리가 존재하는지 잘 알지 못하기 때문.
	- java.lang, java.util, java.io와 하위 패키지들은 익숙해지도록 노력하자.






























