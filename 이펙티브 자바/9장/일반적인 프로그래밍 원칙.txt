
 일반적인 프로그래밍 원칙.



 # 지역변수의 범위를 최소화하라.

지역변수 최소화 장점.
- 코드 가독성과 유지보수성이 높아지고 오류 가능성은 낮아진다.

지역변수 사용법.
- 가장 처음 쓰일 때 선언하기.
- 거의 모든 지역변수는 선언과 동시에 초기화해야 한다.
- 메서드를 작게 유지하고 한 가지 기능에 집중해라.

반복문에서 지역변수.
- while문은 복사 붙여넣기 사용할 때 오류를 발생할 수 있기 때문에 for문을 사용하는 것이 좋다.



 # 전통적인 for문보다는 for-each 문을 사용하라.

for-each문.
- 향상된 for문을 의미한다.
- for문보다 문법적으로 실수할 확률이 적다.

for-each문을 사용할 수 없는 상황.
1. 파괴적인 필터링 destructive filtering.
	- 컬렉션을 순회하면서 선택된 원소를 제거해야 한다면 반복자의 remove 메서드를 호출해야 한다.
2. 변형 transforming.
	- 리스트나 배열을 순회하면서 그 원소의 값 일부 혹은 전체를 교체해야 한다면 리스트의 반복자나 배열의 인덱스를 사용.
3. 병렬 반복 parallel iteration.
	- 여러 컬렉션을 병렬로 순회해야 한다면 각각의 반복자와 인덱스 변수를 사용해 엄격하게 제어해야 한다.

for문 사용 조건.
- 컬렉션, 배열, iterable 인터페이스를 구현한 모든 객체.

정리.
- for-each문은 명료하고, 유연하고, 버그를 예방해준다.
- 성능에 저하도 없다.



 # 라이브러리를 익히고 사용하라.

표준 라이브러리 사용 이유.
1. 코드를 작성한 전문가의 지식과 다른 프로그래머들의 경험을 활용할 수 있다.
2. 핵심적인 일과 관련 없는 문제를 해결하느라 시간을 허비하지 않아도 된다.
3. 따로 노력하지 않아도 성능이 지속해서 개선된다.
4. 기능이 점점 늘어난다.
5. 내가 작성한 코드가 다른 사람이 이해하기 쉽게 된다.

라이브러리를 사용하지 않는 이유.
- 라이브러리가 존재하는지 잘 알지 못하기 때문.
	- java.lang, java.util, java.io와 하위 패키지들은 익숙해지도록 노력하자.



 # 정확한 답이 필요하다면 float와 double은 피하라.

float, double.
- 이진 부동소수점 연산에 사용된다.
- 넓은 범위의 수를 빠르게 정밀한 근사치로 계산하도록 설계되었다.

정확한 계산.
- BigDecimal, int, long을 사용.

정리.
- BigDecimal은 코딩 시 불편함이나 성능 저하를 신경쓰지 않을 경우 사용.
	- 여덟 가지 반올림 모드를 이용하여 반올림을 완벽히 제어.



 # 박싱된 기본 타입보다는 기본 타입을 사용하라.

기본 타입과 래퍼 타입의 차이점.
1. 기본 타입은 값만 가지고 있고, 래퍼 타입은 값과 식별성이란 속성을 갖는다.
	- 래퍼 타입의 두 인스턴스는 값이 같아도 서로 다르게 식별될 수 있다.
2. 기본 타입의 값은 언제나 유효하나, 래퍼 타입은 유효하지 않은 값 null을 가질 수 있다.
3. 기본 타입이 래퍼 타입보다 시간과 메모리 사용면에서 더 효율적이다.

래퍼 클래스 사용 시점.
1. 컬렉션의 원소로 사용한다.
	- 컬렉션은 기본형은 담을 수 없다.
2. 리플렉션을 통해 메서드를 호출할 때 사용한다.



 # 다른 타입이 적절하다면 문자열 사용을 피하라.

문자열을 잘못 사용하는 경우.
- 파일, 네트워크, 키보드 입력 데이터가 문자열 형태가 아닌데 문자열로 받는 경우.
- 문자열은 열거 타입을 대신하기에 적합하지 않다.
- 문자열은 혼합 타입을 대신하기에 적합하지 않다.
- 문자열은 권한을 표현하기에 적합하지 않다.

정리.
- 더 적합한 데이터 타입이 있거나 새로 작성할 수 있다면 문자열을 사용하지 말아라.
- 문자열은 잘못 사용하면 번거롭고, 덜 유연하고, 느리고, 오류 가능성도 크다.
- 기본 타입, 열거 타입, 혼합 타입은 문자열 외에 다른 타입을 한 번 고민해 봐라.



 # 문자열 연결은 느리니 주의하라.

성능.
- 문자열을 연결 연산자로 문자열 n개를 잇는 시간은 n**2에 비례한다.

성능을 높이는 방법.
- String 대신 StringBuilder를 사용하자.

정리.
- 많은 문자열을 연결할 때는 문자열 연결 연산자 (+)를 피하자.
- String 대신 StringBuilder.append( ) 메서드를 사용하자.



 # 객체는 인터페이스를 사용해 참조하라.

설명.
- 적합한 인터페이스가 있다면 매개변수, 반환값, 변수, 필드를 전부 인터페이스 타입으로 선언하라.
- 인터페이스를 타입으로 사용하는 습관을 길러두면 프로그램이 훨씬 유연해질 것이다.

주의사항.
- 적합한 인터페이스가 없다면 당연히 클래스로 참조해야 한다.



 # 리플렉션보다는 인터페이스를 사용하라.

설명.
- 리플렉션 기능을 이용하면 프로그램에서 임의의 클래스에 접근할 수 있다.

리플렉션 단점.
1. 컴파일타임 타입 검사가 주는 이점을 하나도 누릴 수 없다.
	- 컴파일 예외도 할 수 없다.
2. 리플렉션을 이용하면 코드가 지저분하고 장황해진다.
3. 성능이 떨어진다.
	- 리플렉션 메소드 호출은 일반 메서드 호출보다 훨씬 느리다.



 # 네이티브 메서드는 신중히 사용하라.

JNI Java Native Interface.
- 자바 프로그램이 네이티브 메서드를 호출하는 기술.

네이티브 메서드.
- C, C++ 같은 네이티브 프로그래밍 언어로 작성한 메서드를 의미한다.
- Java가 발전하면서 네이티브 메서드 활용에 필요성이 줄고 있다.

네이티브 메서드의 활용.
1. 레지스트리 같은 플랫폼 특화 기능을 사용한다.
2. 네이티브 코드로 작성된 기존 라이브러리를 사용한다.
3. 성능 개선을 목적으로 성능에 결정적인 영향을 주는 영역만 따로 네이티브 언어로 작성한다.
	- 성능을 개선할 목적으로 네이티브 메서드를 사용하는 것은 거의 권장하지 않는다.

네이티브 메서드의 단점.
- 네이티브 언어가 안전하지 않으므로 메모리 훼손 오류로부터 안전하지 않다.
- 이식성이 낮다.
- 디버깅이 어렵다.
- 주의하지 않으면 속도가 오히려 느려질 수 있다.

정리.
- 네이티브 메서드를 사용해야 되는 경우에 한번 더 생각하자.



 # 최적화는 신중히 하라.

최적화 격언 3가지.
1. 그 어떤 핑계보다 효율성이라는 이름 아래 행해진 컴퓨팅 죄악이 더 많다.
2. 자그마한 효율성은 모두 잊자. 섣부른 최적화가 만악의 근원이다.
3. 최적화를 할 떄는 다음 두 규칙을 따르라.
	- 첫 째, 하지마라.
	- 두 번째, 완벽한 방안을 찾기 전까지는 하지 마라.
	- 추가사항, 각각의 최적화 시도 전후로 성능을 측정하라.

프로그램 방향성.
- 빠른 프로그램보다는 좋은 프로그램을 작성하라.

설계 고려 사항.
- 성능을 제한하는 설계를 피하라.
- API를 설계할 때 성능에 주는 영향을 고려하라.
	- 성능을 위해 API를 왜곡하지는 말자.
	
정리.
- 성능에 집착해서 빠른 프로그램을 작성하려 안달하지 말자.
- 좋은 프로그램을 작성하면 성능은 자연스럽게 좋아지기 마련이다.
- API, 네트워크 프로토콜, 영구 저장용 데이터 포맷을 설계할 때는 성능을 염두에 두어야 한다.



 # 일반적으로 통용되는 명명 규칙을 따르라.

설명.
- 자바 명명 규칙은 크게 철자와 문법, 두 범주로 나뉜다.
- 철자 규칙은 패키지, 클래스, 인터페이스, 타입 변수 등의 이름을 다룬다.
	
패키지 명명 규칙.
- 특별한 이유가 없는 한 반드시 따라야 한다.
- 패키지와 모듈 이름은 각 요소를 점( . )으로 구분.
- 패키지 이름은 8자 이하의 짧은 단어로 한다.

클래스 인터페이스 명명 규칙.
- 하나 이상의 단어로 이뤄지며, 각 단어는 대문자로 시작한다.
- 웬만하면 단어를 줄여쓰지 않는다.
- 약자를 쓰는 경우에 전체를 대문자로 쓸지, 첫 글자만 대문자를 할지는 논쟁거리이다. ( 첫 글자만 대문자가 더 많다 )

메서드 필드 명명 규칙.
- 첫 글자를 소문자로 쓴다는 점만 빼면 클래스 명명 규칙과 같다.
- 상수는 모두 대문자를 사용하고 단어 사이를 '_'로 표현한다.
- 지역변수는 약어를 써도 괜찮다. ( 알아볼 수 있음 )

중요한 메서드 이름 규칙.
1. 객체의 타입을 바꾸는 메서드 이름. ( toType, toString, ... )
2. 객체의 내용을 다른 뷰로 보여주는 메서드. ( asType, asList, ... )
3. 객체의 값을 기본 타입 값으로 반환하는 메서드. ( typeValue, intValue, ... )
4. 정적 팩터리의 이름. ( from, of, valueOf, instance, getInstance, newInstance, getType, newType, ... )

정리.
- 표준 명명 규칙을 체화하여 자연스럽게 베어 나오도록 ㅎ하자.
- 오랫동안 따라온 규칙과 충돌한다면 그 규칙을 맹종해서는 안 된다.







