
 동시성.



 # 공유 중인 가변 데이터는 동기화해 사용하라.

동기화.
- 항상 일관된 상태에서 로직을 수행하게 만들어 준다. ( 로직 수행시 일관된 상태를 변경할 수 있다 )
- 동기화는 동기화된 메서드나 블록에 들어간 스레드가 같은 락의 보호하에 수행된 모든 이전 수정의 최종 결과를 보게 해준다.
- 동기화는 배타적 실행뿐 아니라 스레드 사이의 안정적인 통신에 꼭 필요하다.
- 읽기와 쓰기 모두를 동기화해야 동작을 보장할 수 있다.

배타적인 실행.
- 상태가 일관되지 않는 객체를 현재 사용중인 쓰레드만 접근이 가능하게 만드는 것을 의미한다.

쓰레드 사이의 안정적인 통신.
- 동기화 없이는 한 쓰레드가 만든 변화를 다른 쓰레드에서 확인하지 못할 수 있다.
- 이런 상황이 발생되지 않게 하는 것을 안정적인 통신이라고 한다.

Thread.
- Thread.stop( )은 deprecated되었다. ( 데이터 손상이 발생할 수 있다 )

volatile.
- Java 변수를 Main Memory에 저장하겠다는 것을 명시하는 것이다.
- 매번 변수의 값을 Read할 때마다 CPU Cache에 저장된 값이 아닌 Main Memory에서 읽는 것이다.
- 변수의 값을 write할 때마다 main Memory에 까지 작성하는 것이다.
- 항상 가장 최근에 기록된 값을 읽게 됨을 보장.

안전 실패 safety failure.
- 프로그램이 잘못된 결과를 계산해내는 오류. ( 동시성 문제 등 )

AutomicLong.
- java.util.concurrent.atomic 패키지에 있는 클래스이다.
- java.util.concurrent.atomic 패키지에는 락 없이도 스레드 안전한 프로그래밍을 지원하는 클래스들이 담겨 있다.

정리.
- 여러 쓰레드가 가변 데이터를 공유한다면 그 데이터를 읽고 쓰는 동작은 반드시 동기화 해야 한다.































