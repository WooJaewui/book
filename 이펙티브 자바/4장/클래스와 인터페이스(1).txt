
 클래스와 인터페이스.



 # 클래스와 멤버의 접근 권한을 최소화하라.

어설프게 설계된 컴포넌트와 잘 설계된 컴포넌트의 가장 큰 차이는 클래스 내부 데이터와 내부 구현 정보를 외부 컴포넌트로부터
얼마나 잘 숨겼느냐다.

정보 은닉의 장점.
- 시스템 개발 속도를 높인다. ( 여러 컴포넌트를 병렬로 개발 )
- 시스템 관리 비용을 낮춘다. ( 디버깅 유리, 컴포넌트 교체 )
- 성능 최적화에 도움을 준다. 
- 소프트웨어 재사용성을 높인다.  
- 큰 시스템을 제작하는 난이도를 낮춰준다. ( 단위 테스트하기 편리하다 )

기본 원칙.
- 모든 클래스와 멤버의 접근성을 가능한 한 좁혀야 한다.

주의사항.
- public 클래스의 인스턴스 필드는 되도록 public이 아니어야 한다. ( 쓰레드에 안전하지 않다 )

정리.
- 프로그램 요소의 접근성은 가능한 한 최소한으로 해라.
- 꼭 필요한 것만 골라서 public API를 설계하자.



 # public 클래스에서는 public 필드가 아닌 접근자 메서드를 사용하라.

원리.
- public 클래스면 필드를 private으로 하고, 접근자 메서드를 사용하라.
- private/default 클래스면 필드를 public으로 해도 된다.



 # 변경 가능성을 최소화하라.

불변 클래스.
- 인스턴스의 내부 값을 수정할 수 없는 클래스다.
- 객체가 파괴되는 순간까지 객체에 저장된 값은 변경되지 않는다.

불변 클래스 사용이유.
- 가변 클래스보다 설계하고 구현하고 사용하기 쉽다.
- 오류가 생길 여지도 적고 훨씬 안전하다.

불변 클래스 규칙.
1. 객체의 상태를 변경하는 메서드를 제공하지 않는다.
2. 클래스를 확장할 수 없도록 한다.
3. 모든 필드를 final로 선언한다.
4. 모든 필드를 private으로 선언한다.
5. 자신 외에는 내부의 가변 컴포넌트에 접근할 수 없도록 한다.

불변 객체의 특징.
- 쓰레드에 안전하여 따로 동기화할 필요 없다.
- 불변 객체를 구성요소로 만들면 이점이 많다. ( Map의 key 또는 Set의 원소로 사용할 수 있다 )
- 그 자체로 실패 원자성을 제공한다.
- 값이 다르면 반드시 독립된 객체로 만들어야 한다.

불변 객체 단점 해결 방법.
1. 흔히 사용될 다단계 연산들을 예측하여 기본 기능으로 제공하는 방법.

상속을 못하게 만드는 방법.
1. private class로 만든다.
2. 모든 생성자를 private으로 만들고 정적 팩터리를 제공한다.

직렬화할 때 주의사항.
- 가변 객체를 참조하는 필드가 있다면 readObject나 readResolve 메서드를 반드시 제공해야 한다. ( 뒤에서 자세히 )

정리.
- 불변으로 만들 수 없는 클래스라도 변경할 수 있는 부분을 최소한으로 줄이자.
- 다른 합당한 이유가 없다면 모든 필드는 private final이어야 한다.
- 생성자는 불변식 설정이 모두 완료된, 초기화가 완벽히 끝낸 상태의 객체를 생성해야 한다.




















