
 Model1 아키텍처로 게시판 개발.



 # MVC Model1 아키텍처 구조.

Model1 설명.
JSP : View, Controller 역할을 모두 수행한다.
Model : VO, DAO 클래스.

Model1의 단점.
자바코드와 HTML 코드를 JSP에서 함께 사용하기 때문에 큰 프로젝트에서는 사용하기 힘들다.



 # 포워드와 리다이렉트 차이.

포워드.
RequestDispatcher를 이용하여 응답을 JSP 화면으로 넘겨서 포워드된 화면이 클라이언트에 전송.
실행 속도는 빠르지만, URL이 바뀌지 않아 응답이 어디에서 들어왔는지 확인할 수 없다.

리다이렉트.
요청 JSP에서 브라우저로 응답 메시지를 보냈다가 다시 서버로 재요청하는 방식이다.
URL이 변경되지만, 두 번의 요청과 응답으로 실행 속도는 포워드보다 느리다.



 # 로그아웃.

session 처리.
session.invalidate( );
session.removeAttribute( "변수이름" ) ;



 # MVC Model2 아키텍처 구조.

Model2 설명.
Model1 방식이 유지보수가 어려운 문제점 때문에 Model2 방식이 생겼다.
JSP가 담당했던 Controller부분을 Servlet이 담당하게 되었다.
JSP는 View기능만 담당하게 되었다.

Model2 구성요소.
Model : VO, DAO 클래스. 
View : JSP 페이지. ( 웹 디자이너들이 많이 개발한다 )
Controller : Servlet 클래스.

MVC 아키텍처에 중요점.
Controller를 성능과 유지보수의 고려하여 잘 만드는 것이 중요하다.



 # Controller Servlet.

메소드.
doGet : GET 방식 요청을 처리하는 메소드.
doPost : POST 방식 요청을 처리하는 메소드.
process : 두 가지 방식을 모두 처리하는 메소드.



 # 게시간 목록 기능 구현.

실행 순서.
1. DispatcherServlet이 요청을 받는다.
2. 받은 요청을 세부 Controller( Servlet )에게 포워드한다.
3. Controller에서 DAO 클래스를 호출해서 글 목록을 검색.
4. 글 목록을 request에 저장하고 jsp로 포워드한다.
5. jsp에서 EL을 사용해서 view를 작성한다.
6. 작성된 view가 response되어 클라이언트에게 보여진다.



 # 로그인.

설명.
클라이언트가 작성한 아이디 비밀번호와 기존에 저장된 DB 데이터를 비교한다.
두 개의 데이터가 일치하는 경우 session.setAttribute( )로 아이디에 관련된 정보를 저장해준다.

로그인 유지.
${ !empty 로그인데이터변수 } 를 통해 로그인 된 상태임을 확인해서 view를 작성할 수 있다.

로그아웃.
session.invalidate( ) 또는 session.removeAttribute( "변수이름" )을 통해 데이터를 삭제하면 로그아웃.



