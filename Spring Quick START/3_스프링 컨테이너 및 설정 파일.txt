
 스프링 컨테이너 및 설정 파일.



 # 스프링 IoC 시작하기.

스프링 xml 파일 생성하기.
resource 폴더 우클릭 -> New -> Java Bean Configuration File.

스프링 컨테이너에 클래스 생성하기.
<bean id="Bean변수이름" class="패키지이름.클래스이름" />

스프링 컨테이너 구동.
AbstractApplicationContext container = new GenericXmlApplicationContext( "스프링xml파일이름" );
클래스타입 변수이름 = ( 클래스타입 ) container.getBean( "Bean변수이름" ) ;
변수이름.메소드( ) ;

스프링 컨테이너 실행 순서.
1. GenericXmlApplicationContext를 생성해서 스프링 xml파일을 로딩하여 컨테이너 구동. 
2. 스프링 설정 파일에 <bean>으로 등록된 객체 생성.
3. getBean( ) 메소드에서 'bean변수이름' 으로 컨테이너에 생성된 클래스 요청. ( Lookup )
4. 컨테이너에 생성된 객체( 인스턴스 ) 반환.

스프링 컨테이너 종류.
BeanFactory : 객체를 생성하고 관리하는 기본적인 기능만 제공. Lookup에 의해서만 bean을 생성한다. ( 지연 로딩 )
ApplicationContext : BeanFactory를 상속. 객체 관리 기능 외에 다양한 기능 지원. 컨테이너 생성시 즉시 로딩.
일반적인 스프링 프로젝트에서 BeanFactory를 사용할 일은 없다.

AppplcationContext 구현 클래스.
GenericXmlAppplicationContext : 파일 시스템이나 클래스 경로에 있는 XML 설정 파일을 로딩하여 구동.
XmlWebApplicationContext : 웹 기반의 스프링 애플리케이션을 개발할 때 사용하는 컨테이너.



 # 스프링 XML 설정.

<beans> 루트 엘리먼트.
<bean>의 생명주기를 관리하고 여러 가지 서비스를 제공한다. ( 기본 네임스페이스로 지정되어 있다 )
<bean>, <description>, <alias>, <import> 등 네 개의 엘리먼트를 자식 엘리먼트로 사용.
<bean, <import> 정도가 실제 프로젝트에 사용된다.

<import> 엘리먼트.
기능별로 분리하여 작성한 설정 파일들을 하나로 통합할 때 <import> 엘리먼트를 사용한다.

<bean> 엘리먼트.
컨테이너에 클래스를 등록하기 위한 엘리먼트이다.

<bean> 엘리먼트 속성.
id는 getBean( "id" )를 통해 컨테이너에 저장된 클래스를 사용하기 위한 속성이고, 생략가능하다.
class는 "패키지.클래스이름"으로 클래스를 등록하기 위한 속성이다.
name은 자바 식별자 규칙을 따르지 않는 문자열을 허용한다. ( 예 : name="http://~~~.com" )
init-method="메소드이름" 으로 컨테이너가 객체 생성시 메소드를 호출할 수 있다.
destroy-method="메소드이름" 으로 컨테이너가 객체 삭제 전에 메소드 호출할 수 있다.
lazy-init="true" 로 설정하면 bean이 사용되는 시점( Lookup )에서 객체를 생성한다. ( 메모리 효율적 )
scope="singleton" 기본값이 객체를 하나만 생성하는 싱글톤이다. ( "prototype" 으로 설정하면 여러개 생성 )




