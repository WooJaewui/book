
 프레임워크 개요.



 # 프레임워크 개념.

프레임워크.
소프트웨어 관점에서 아키텍처에 해당하는 골격 코드이다.

프레임워크의 필요성.
협업이나 인수인계 등을 할 때 다른사람의 코드를 쉽게 이해할 수 있도록 도와준다.

프레임워크의 장점.
빠른구현시간 : 아키텍처 골격 코드가 프레임워크로 제공된다.
쉬운관리 : 같은 프레임워크로 적용한 애플리케이션들은 관리가 수월하다.
개발자들의 역량 획일화 : 숙련된 개발자와 초급 개발자의 생성 코드가 비슷해진다.
검증된 아키텍처의 재사용 : 미리 다른사람들이 검증한 아키텍처를 사용하므로 고민없이 적용가능.

자바 기반의 프레임워크.
오픈소스 형태로 제공된다.

자바 프레임워크 종류.
Presentation : Struts, Spring( MVC )
Business : Spring( IoC ), Spring( AOP )
Persistence : Ibatis, Mybatis( Ibatis에서 파생된 언어 - 문법이 거의 같다 ).

POJO Plain Old Java Object.
평범한 자바 클래스를 의미한다. 
POJO가 아닌 클래스 : Servlet.



 # 스프링 프레임워크의 특징.

스프링 한줄표현.
IoC와 AOP를 지원하는 경량의 컨테이너 프레임워크.

경량.
1. 크기 측면에서 가볍다, jar파일만 있으면 개발 가능. ( 완성된 애플리케이션의 배포도 빠르고 쉽다 )
2. POJO클래스는 특별한 규칙이 없는 단순한 객체이다. ( 스프링은 POJO를 관리 )

제어의 역행 ( Inversion Of Control ) 
낮은 결합도를 유지할 수 있도록 도와준다. ( 의존도를 낮춘다 )

관점지향 프로그래밍 ( Aspect Oriented Programming AOP ) 
반복해서 등장하는 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원한다.
공통으로 사용하는 기능들은 외부의 독립된 클래스로 분리하고,
해당 기능을 프로그램 코드에 명시하지 않고 선언적으로 처리하여 적용하는 것.

컨테이너 Container.
특정 객체의 생성과 관리를 담당하며 객체 운용에 필요한 다양한 기능을 제공한다.



 # IoC 컨테이너.

Servlet 컨테이너 동작 순서.
1. web.xml 파일을 로딩하여 구동.
2. 브라우저로 요청을 받음. ( request ) 
3. 요청에 해당되는 Servlet 클래스를 Servlet 컨테이너에서 찾아서 객체 생성 후 해당하는 메소드 호출.
4. 메소드 실행 결과를 브라우저로 응답. ( response )

결합도를 낮추는 방법.
1. 인터페이스를 만들어서 다형성을 통해 결합도를 낮출 수 있다. ( 유지보수가 쉬워짐 )
2. Factory 패턴과 같은 디자인 패턴 활용하기. ( Factory 클래스에서 필요한 클래스를 호출하여 사용 )

IoC 컨테이너.
Servlet 컨테이너와 유사하다. ( 뒤에서 자세히 배우는 것 같다 )



