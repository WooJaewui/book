
 검색 기능 추가 구현 & 파일 업로드.



 # 검색 기능 구현.

VO 클래스.
VO 클래스에 어떤 요소에 검색할 것인지 정하고, 어떤 문구로 검색할 것인지 변수를 생성해준다.
getter, setter 메소드를 설정한다.

SQL 명령어.
select * from where #{ 요소 } like "%${ 문구 }%' ;



 # 파일 업로드.

html 설정.
<form enctype="multpart/form-data">
	<input type="file" name="uploadFile"/>
</form>

VO 설정.
MultipartFile 타입의 file 데이터를 담을 수 있는 변수를 추가한다.

MultipartFile 클래스.
클라이언트가 업로드한 파일에 대한 모든 정보가 저장된다.
getOriginalFilename( ) : 업로드한 파일명을 문자열로 리턴.
transferTo( File destFile ) : 업로드한 파일을 destFile에 저장.
boolean isEmpty( ) : 업로드한 파일 존재 여부 리턴 ( 없으면 true 리턴 )

POM.xml 설정.
FileUpload 라이브러리 추가.
commons-fileupload.

MultipartResolver 설정. ( DispatcherServlet.xml )
<bean id="multipartResolver" class="~~~.CommonsMultipartResolver">
	<property name="maxUploadSize" value="10000" />	
</bean>
id 값은 무조건 multipartResolver로 해야 DispatcherServlet이 인식한다.
maxUploadSize를 설정하지 않으면 -1로 지정된다. ( 무제한 )

MultipartResolver bean의 설정이유.
스프링 컨테이너 VO 객체 생성.
파라미터 정보를 VO 객체의 setter메소드를 통해 입력.
값들이 입력될 때 MultipartFile 타입의 클래스가 생성되야 되는데 이때 스프링 컨테이너의 bean을 사용.



 # 파일 업로드 순서.

순서.
1. 라이브러리 설정 commons.FileUpload ( pom.xml )
2. multipartResolver bean 생성 ( DispatcherServlet.xml )
3. form 데이터 형식 변경 method="post" enctype="multipart/form-data"
4. Controller 매개변수로 Multipart file 받기.
5. RealPath 구하기. ServletContext.getRealPath( workspace 저장폴더 ) ; 
6. 파일 객체 경로 생성하기. File filePath = new File( realPath ) 
7. RealPath에 폴더 확인하기. file변수.exists( ) 없을 경우, file변수.mkdirs( ) ;
8. 파일 이름 확인하기. file.getOriginalFilename( ) ;
9. 경로 + 파일 이름까지 적용하기. reapath += File.separator + fileName ;
10. 경로에 파일 저장하기. File saveFile = new File ( realPath ) ; multipart.transferTo( saveFile ) ;



 # 예외처리. ( 어노테이션 방식 )

어노테이션 기반의 예외처리. ( spring.xml 설정 )
<mvc:annotation-driven />을 설정해야 어노테이션을 사용할 수 있다.

@ControllerAdvice( "패키지이름" ).
Component역할로 클래스 위에 작성하면 자동으로 bean이 생성된다.
패키지이름로 시작하는 컨트롤러에서 예외가 발생하는 순간 @ExceptionHandler 메소드가 실행된다.

@ExceptionHandler( Exception종류.class )
메소드 위에 작성하면 Controller에서 설정 Exception 발생시 메소드가 실행된다.



 # 예외처리. ( XML 방식 )

사용.
<bean id="exceptionResolver" class="패키지이름.SimpleMultipartResolver">
	<property name="exceptionMappings">
		<props>
			<prop key="패키지이름.Exception클래스">
				에러페이지 url.
			</prop>
				....
		</props>
	</property>
	<property name="defaultErrorView" value="에러페이지 url" />
</bean>



