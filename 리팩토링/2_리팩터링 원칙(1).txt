
 리팩터링 원칙(1)



 # 리팩터링 정의.

리팩터링.
소프트웨어의 겉보기 동작은 그대로 유지한 채,
코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법.

리팩터링하다.
소프트웨어의 겉보기 동작은 그대로 유지한 채,
여러 가지 리팩터링 기법을 적용해서 소프트웨어를 재구성하다.

최적화와 리팩터링.
최적화 : 속도 개선을 위해 코드를 수정하는 것.
리팩터링 : 코드를 이해하고 수정하기 쉽게 만드는 것. ( 성능이 나빠질 수 있다 )



 # 두 개의 모자.

기능 추가.
기존 코드는 절대 건드리지 않고 새 기능을 추가하기만 한다.

리팩터링.
기능 추가는 절대 하지 않으며 코드 재구성에만 전념한다.



 # 리팩터링을 하는 이유.

소프트웨어 설계가 좋아진다.
아키텍처를 충분히 이해하지 못한 채 단기 목표만을 위해 코드를 수정하면 기반 구조가 무너진다.
코드 구조가 무너지기 시작하면 악효과가 누적된다.
중복코드를 줄이는 것이 성능 향상에 큰 도움을 주지는 않는다.
하지만, 코드량이 줄면 수정하는 데 드는 시간은 크게 달라진다.

소프트웨어를 이해하기 쉬워진다.
프로그래밍이란 내가 원하는 바를 정확히 표현하는 일이다.

버그를 쉽게 찾을 수 있다.
프로그램의 구조를 명확하게 다듬으면 버그를 쉽게 찾을 수 있다.

프로그래밍 속도를 높일 수 있다.
새로운 기능을 추가할수록 기존 코드베이스에 잘 녹여낼 방법을 찾는 데 드는 시간이 늘어난다.
새로운 기능을 추가할수록 버그가 발생하는 일이 잦고, 이를 해결하는 시간은 한층 더 걸린다.






