
 캡슐화.



 # 레코드 캡슐화하기 Encapsulate Record.

단순한 레코드의 단점.
계산해서 얻을 수 있는 값과 그렇지 않은 값을 명확히 구분해 저장해야한다.
이러한 문제점 때문에 가변데이터는 객체로 저장하는게 선호된다.

절차.
레코드를 담은 변수를 캡슐화한다.
레코드를 감싼 클래스로 변수의 내용을 교체하고, 접근자와 캡슐화 함수를 적용한다.
테스트한다.
원본 레코드 대신 새로 정의한 클래스 타입의 객체를 반환하는 함수들을 새로 만든다.
예전 함수를 사용하는 코드를 새로만든 함수를 사용하도록 바꾼다. 바꿀때마다 테스트.



 # 컬렉션 캡슐화하기 Encapsulate Collection.

절차.
컬렉션을 캡슐화하지 않았다면 캡슐화한다.
컬렉션에 원소를 추가/제거하는 함수를 추가한다.
정적 검사를 수행한다.
컬렉션을 참조하는 부분을 모두 찾는다. 
컬렉션 게터를 수정해서 원본 내용을 수정할 수 없는 읽기전용 프락시나 복제본을 반환하게 한다.
테스트한다.



 # 기본형을 객체로 바꾸기 Replace Primitive with Object.

필요성.
기본형 데이터가 단순한 출력 이상의 기능이 필요해지는 순간 클래스로 묶어준다.

절차.
변수를 캡슐화한다.
단순한 VO를 만든다.
생성자와 게터 메소드를 추가한다.
정적 검사를 수행한다.
세터를 생성 및 수정한다.
새로 만든 클래스의 게터를 호출한 결과를 반환하도록 게터를 수정한다.
테스트한다.
함수 이름을 바꾸면 원본 접근자의 동작을 더 잘 드러낼 수 있는지 검토한다.



 # 임시 변수를 질의 함수로 바꾸기 Replace Temp with Query.

필요성.
긴 함수의 한 부분을 별도 함수로 추출하고자 할 때 먼저 변숟르을 함수로 만들면 일이 수월해진다.
- 추출한 함수에 변수를 따로 전달할 필요가 없어진다.
- 부자연스러운 의존 관계나 부수효과를 찾고 제거하는 데 도움이 된다.

절차.
변수가 사용되기 전에 값이 확실히 결정되는지, 변수를 사용할 때마다 로직이 다른 결과를 내지 않는지 확인.
읽기전용으로 만들 수 있는 변수는 읽기전용으로 만든다.
테스트한다.
변수 대입문을 함수로 추출한다.
테스트한다.
변수 인라인하기로 임시 변수를 제거한다.



 # 클래스 추출하기 Extract Class.

클래스의 역할.
반드시 명확하게 추상화하고 소수의 주어진 역할만 처리해야 한다.

필요성.
메소드와 데이터가 너무 많은 클래스는 가독성이 떨어져서 적절히 분리해주는 것이 좋다.
특히 일부 데이터와 메소드를 따로 묶을 수 있다면 따로 분리.
함께 변경되는 일이 많거나 서로 의존하는 데이터들도 분리.

절차.
클래스의 역할을 분리할 방법을 정한다.
분리될 역할을 담당할 클래스를 새로 만든다.
원래 클래스의 생성자에서 새로운 클래스의 인스턴스를 생성하여 필드에 저장해둔다.
분리될 역할에 필요한 필드들을 새 클래스로 옮긴다. 옮길 때마다 테스트.
메서드들도 새 클래스로 옮긴다. 호출을 당하는 일이 많은 메소드부터 옮긴다. 옮길 때마다 테스트.
양쪽 클래스의 인터페이스를 살펴보면서 불필요한 메서드를 제거하고, 이름도 환경에 맞게 바꾼다.
새 클래스를 외부로 노출할지 정한다.



 # 클래스 인라인하기 Inline Class.

필요성.
리팩터링을 너무 많이해서 기능이 거의 없는 클래스는 가장 많이 사용하는 클래스에 합쳐버린다.

절차.
소스 클래스의 각 메서드에 대응하는 메서드들은 타깃 클래스에 생성한다.
소스 클래스의 메서드를 사용하는 코드를 모두 타깃 클래스의 위임 메서드를 사용하도록 바꾼다.
소스 클래스의 메서드와 필드를 모두 타깃 클래스로 옮긴다. 옮길 때마다 테스트.
소스 클래스를 삭제한다.



 # 위임 숨기기 Hide Delegate.

설명.
Spring Container 역할을 의미하는 것 같다.

절차.
위임 객체의 각 메서드에 해당하는 위임 메서드를 서버에 생성한다.
클라이언트가 위임 객체 대신 서버를 호출하도록 수정한다. 바꿀 때마다 테스트.
모두 수정했다면, 서버로부터 위임 객체를 얻는 접근자를 제거한다.
테스트한다.



 # 중재자 제거하기 Remove Middle Man.

설명.
Spring Container 사용법에 대한 설명인 것 같다.

절차.
위임 객체를 얻는 게터를 만든다.
위임 메서드를 호출하는 클라이언트가 모두 이 게터를 거치도록 수정한다. 바꿀 때마다 테스트.
모두 수정했다면 위임 메서드를 삭제한다.



 # 알고리즘 교체하기 Substitute Algorithm.

필요성.
코드 작성 후 좀 더 쉬운 알고리즘을 발견한 경우에 사용한다.

절차.
교체할 코드를 함수 하나에 모은다.
이 함수만을 이용해 동작을 검증하는 테스트를 마련한다.
대체할 알고리즘을 준비한다.
정적 검사를 수행한다.
기존 알고리즘과 새 알고리즘의 결과를 비교하는 테스트를 수행한다.


