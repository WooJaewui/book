
 람다와 스트림.



 # 익명 클래스보다는 람다를 사용하라.

역사.
- 예전에는 자바에서 함수 타입을 표현할 때 추상 메서드를 하나만 담은 인터페이스를 사용했다.

함수 객체.
- 추상 메서드를 하나만 담은 인터페이스나 객체의 인스턴스.

람다식 사용.
- 타입을 명시해야 코드가 더 명확할 때를 제외하고는, 람다의 모든 매개변수 타입은 생략하자.
- 타입 추론 규칙에 대해 공부.

타입 추론 + 로 타입.
- 컬렉션을 로 타입으로 선언하면 타입 추론에 어려움을 겪기 때문에 컴파일 에러가 발생할 수 있다.
- 람다식을 사용하는 경우 항상 제네릭 타입을 사용하자.

람다의 단점.
- 람다는 이름이 없고 문서화도 못 한다.
	=> 코드 자체로 동작이 명확히 설명되지 않거나 코드 줄 수가 많아지면 람다를 쓰지 말아야 한다.
	=> 한 줄일 때 가장 좋고, 세 줄 안에 끝내는 게 좋다.

열거 타입 람다.
- 열거 타입 생성자 안의 람다는 열거 타입의 인스턴스 멤버에 접근할 수 없다.

람다 vs 익명 클래스.
- 람다는 함수형 인터페이스에서만 쓰인다. ( 추상 클래스의 인스턴스에는 사용 할 수 없다 )
- 익명 클래스는 추상 클래스에도 사용할 수 있고, 추상 메서드가 여러개일 때도 사용 가능하다.
- 람다는 자신을 참조할 수 없고, 익명 클래스는 자신을 참조할 수 있다.
- 람다를 직렬화하는 것은 삼가해야 한다. ( 직렬화 형태가 구현별로 다를 수 있다 )

주요 키워드.
- 타입 추론 규칙.
- 람다 vs 익명 클래스.

참조.
- 람다 vs 익명 클래스 : https://alkhwa-113.tistory.com/entry/%EB%9E%8C%EB%8B%A4%EC%8B%9Dfeat-%EC%9D%B5%EB%AA%85-%EA%B5%AC%ED%98%84-%ED%81%B4%EB%9E%98%EC%8A%A4-vs-%EB%9E%8C%EB%8B%A4%EC%8B%9D
- 람다 vs 익명 클래스 : https://blue-jay.tistory.com/51
- stack : https://johngrib.github.io/wiki/jvm-stack/
- stack : https://yaboong.github.io/java/2018/05/26/java-memory-management/
- 반복문 성능 : https://jypthemiracle.medium.com/java-stream-api%EB%8A%94-%EC%99%9C-for-loop%EB%B3%B4%EB%8B%A4-%EB%8A%90%EB%A6%B4%EA%B9%8C-50dec4b9974b

정리.
- 익명 클래스는 타입의 인스턴스를 만들 때만 사용하라.



 # 람다보다는 메서드 참조를 사용하라.

메서드 참조 특징.
- 람다로 할 수 없는 일이라면 메서드 참조로도 할 수 없다.
- 람다로 구현했을 떄 너무 길거나 복잡하다면 메서드 참조가 좋은 대안이 되어준다.
- 메서드 참조는 기능을 드러내는 이름을 지어주거나 친절한 설명을 문서로 남길 수 있다.

정리.
- 메서드 참조 쪽이 짧고 명확하다면 메서드 참조를 쓰고, 그렇지 않을 때는 람다는 사용하라.



 # 표준 함수형 인터페이스를 사용하라.

표준 함수형 인터페이스.
- 필요한 용도에 맞는 표준 함수형 인터페이스가 있다면 직접 구현하지 말고 사용하라.
- 총 43개의 인터페이스가 담겨 있다.

Operator 인터페이스.
- 인수의 개수에 따라 나뉜다.
- 반환값과 인수의 타입이 같은 함수.

Predicate 인터페이스.
- 인수 하나를 받아 boolean을 반환하는 함수.

Function 인터페이스.
- 인수와 반환 타입이 다른 함수.

Supplier 인터페이스.
- 인수를 받지 않고 값을 반환하는 함수.

Consumer 인터페이스.
- 인수를 받고 값을 반환하지 않는 함수.

기본 인터페이스.
- int, long, double용으로 각 3개씩 변형이 생겨 난다.
- IntPredicate, LongBinaryOperator, ... 등
- 기본형 인터페이스에 박싱된 기본 타입을 넣어서 사용하지 말아라. ( 성능 이슈 )

Comparator 인터페이스 장점.
1. 이름이 용도를 잘 설명해 준다.
2. 구현하는 쪽에서 반드시 지켜야 할 규약을 담고 있다.
3. 비교자들을 변환하고 조합해주는 유용한 디폴드 메서드들을 듬뿍 담고 있다.

함수 전용 인터페이스를 구현해야 되는 상황.
1. 자주 쓰이며, 이름 자체가 용도를 명확히 설명해준다.
2. 반드시 따라야 하는 규약이 있다.
3. 유용한 디폴트 메서드를 제공할 수 있다.
	=> 이 중 하나 이상을 만족하는 경우 함수 인터페이스 구현을 생각해봐야 한다.

@FunctionalInterface.
1. 이 인터페이스가 람다용으로 설계된 것임을 알려준다.
2. 해당 인터페이스가 추상 메서드를 오직 하나만 가지고 있어야 컴파일되게 해준다.
3. 유지보수 과정에서 누군가 실수로 메서드를 추가하지 못하게 막아준다.

주의사항.
- 같은 함수형 인터페이스를 같은 위치에서 다중 타입으로 정의하면 오류가 발생할 수 있다.

정리.
- API를 설계할 때 람다를 염두해둬야 한다.
- 입력값과 함수형 인터페이스 타입을 활용하라.



 # 스트림은 주의해서 사용하라.

스트림 API.
- 다량의 데이터 처리 작업을 돕고자 자바 8에 추가되었다.
- 대표적인 스트림 원소는 컬렉션, 배열, 파일, 정규표현식 패턴 매처, 난수 생성기 등이 있다.
- 스트림 원소는 참조 또는 int, long, double의 타입을 갖는다.

스트림 API 핵심.
1. 데이터 원소의 유한 또는 무한 시퀀스를 뜻한다.
2. 스트림 파이프라인은 이 원소들로 수행하는 연산 단계를 표현하는 개념.

스트림 특징.
- 지연 평가 lazy evaluation.
	- 종단 연산이 호출될 때 평가가 일어난다. ( 종단 연산이 쓰이지 않으면 계산되지 않는다 )

스트림 주의사항.
- 스트림을 과용하면 프로그램을 읽거나 유지보수하기 어려워진다.
- 람다의 매개변수의 이름은 주의해서 정해야 한다. ( 확실히 알아볼 수 있게 )

스트림 파이프라인.
- 여러 개의 스트림이 연결되어 있는 구조를 말함.
- 일반적으로 원본 스트림 -> 중간 처리 스트림 -> 최종 처리 스트림을 모두 합친 의미.

코드 블럭의 장점.
- 범위 안의 지역변수를 읽고 수정할 수 있다. ( 람다는 FINAL변수를 읽을 수 있고, 지역변수를 수정하는 건 불가능 )
- 코드 블럭은 return/break/continue를 사용할 수 있다.

스트림의 장점.
- 원소들의 시퀀스를 일관되게 변환한다.
- 원소들의 시퀀스를 필터링한다.
- 원소들의 시퀀스를 하나의 연산을 사용해 결합한다.
- 원소들의 시퀀스를 컬렉션에 모은다.
- 원소들의 시퀀스에서 특정 조건을 만족하는 원소를 찾는다.

스트림의 단점.
- 스트림 파이프라인은 한 값을 다른 값에 매핑하고 나면 원래의 값은 잃는 구조이다.

정리.
- 스트림과 반복 중 어느 쪽이 나은지 확신하기 어렵다면 둘 다 해보고 더 낭느 쪽을 택하라.



 # 스트림에서는 부작용 없는 함수를 사용하라.

순수 함수.
- 입력만이 결과에 영향을 주는 함수.

스트림 주의사항.
- forEach 연산은 스트림 계산 결과를 보고할 때만 사용하고, 계산하는 데는 쓰지 말자.

수집기를 이용한 스트림 원소 컬렉션화.
- toList( ), toSet( ), toCollection( collectionFactory )
- 스트림.collect( toList( ) );

키워드.
- 수집기, Collectors.

정리.
- 스트림 파이프라인 프로그래밍의 핵심은 부작용 없는 함수 객체에 있다.



 # 반환 타입으로는 스트림보다 컬렉션이 낫다.

Stream 인터페이스.
- Iterable 인터페이스가 정의한 추상 메섣르르 전부 포함하고, Iterable 인터페이스가 정의한 방식대로 동작한다.

반환 타입.
- 원소 시퀀스를 반환하는 공개 API의 반환 타입에는 Collection이나 그 하위 타입을 쓰는 게 일반적으로 최선이다.

정리.
- 원소 시퀀스를 반환하는 메서드를 작성할 때는, 스트림으로 처리하려는 사람과 반복으로 처리하는 사용자가 있을 수 있다.
- 두 사용자 모두 만족할 수 있는 방향은 컬렉션이다.
- 반환 전부터 이미 원소들을 컬렉션에 담아 관리하거나 컬렉션을 하나 더 만들어도 될 정도로 원소 개수가 적다면 표준컬렉션을 사용하라.
- 그렇지 않으면 전용 컬렉션을 구현할지 고민하라.



 # 스트림 병렬화는 주의해서 적용하라.

주의사항.
- 환경이 아무리 좋아도 데이터 소스가 Stream.iterate거나 중간 연산으로 limit를 쓰면 파이프라인 병렬화로는 성능 개선을 기대할 수 없다.

스트림 병렬화에 유리한 소스.
- ArrayList, HashMap, HashSet, ConcurrentHashMap의 인스턴스거나 배열, int 범위, long 범위.
- 원소들을 순차적으로 실행할 때의 참조 지역성이 뛰어나다. ( 대부분 이웃한 원소의 참조들이 메모리에 연속해서 저장 )
	=> 참조 지역성이 낮으면 스레드는 쓰레드는 데이터가 주 메모리에서 캐시 메모리로 전송되어 오기를 기다린다.
	=> 참조 지역성은 다량의 데이터를 처리하는 연산을 병렬화할 때 중요한 요소이다.

안전 실패 safety failure.
- 결과가 잘못되거나 오동작하는 것.

정리.
- 계산도 올바로 수행하고 성능도 빨라질 거라는 확신 없이는 병렬화는 시도조차 하지 마라.
- 결과값도 정확히 확인하라.












